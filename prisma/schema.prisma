generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String              @id @default(cuid())
  username                    String?             @unique
  email                       String?             @unique
  name                        String?
  gender                      String?
  birthDate                   DateTime?
  phoneNumber                 String?             @unique
  address                     String?
  bio                         String?
  website                     String?
  relationshipStatus          String?
  emailVerified               DateTime?
  image                       String?
  profilePhoto                String?
  coverPhoto                  String?
  passwordHash                String?
  walletAddress               String?             @unique
  apeBalance                  Float               @default(0)
  walletCreatedAt             DateTime?
  featured                    Boolean             @default(false)
  ttsModelId                  String?
  ttsVoiceId                  String?
  punked                      Boolean             @default(false)
  appessoBalance              Float?
  appessoBalanceUpdatedAt     DateTime?
  ttsPlaybackSpeed            Float?              @default(1.0)
  ttsRemainingTrainings       Int?                @default(5)
  lastActivityAt              DateTime?
  aiMemories                  AIMemory[]
  aiProfile                   AIProfile?
  accounts                    Account[]
  notifications               Activity[]          @relation("notification")
  activities                  Activity[]          @relation("activity")
  comments                    Comment[]
  commentLikes                CommentLike[]
  conversationsAsParticipant2 Conversation[]      @relation("ConversationParticipant2")
  conversationsAsParticipant1 Conversation[]      @relation("ConversationParticipant1")
  facegatePerson              FacegatePerson?
  followers                   Follow[]            @relation("following")
  following                   Follow[]            @relation("follower")
  messages                    Message[]
  post                        Post[]
  postLikes                   PostLike[]
  sessions                    Session[]
  visualMedia                 VisualMedia[]
  receivedTransactions        WalletTransaction[] @relation("receiver")
  sentTransactions            WalletTransaction[] @relation("sender")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id          Int    @id @default(autoincrement())
  followerId  String
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Post {
  id                    Int           @id @default(autoincrement())
  content               String?
  createdAt             DateTime      @default(now())
  userId                String
  isTask                Boolean       @default(false)
  rewardAmount          Float         @default(0)
  taskStatus            String?
  completedBy           String?
  completedAt           DateTime?
  completionConfirmedAt DateTime?
  completionRequestedAt DateTime?
  finalPaymentAmount    Float?
  finalPaymentAt        DateTime?
  initialPaymentAmount  Float?
  initialPaymentAt      DateTime?
  audioUrl              String?
  comments              Comment[]
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postLikes             PostLike[]
  visualMedia           VisualMedia[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  createdAt    DateTime      @default(now())
  userId       String
  postId       Int
  parentId     Int?
  parent       Comment?      @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[]     @relation("Replies")
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model VisualMedia {
  id         Int      @id @default(autoincrement())
  type       String   @default("PHOTO")
  fileName   String
  uploadedAt DateTime @default(now())
  userId     String
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  type                 String
  sourceId             Int
  targetId             Int?
  sourceUserId         String
  targetUserId         String
  isNotificationActive Boolean  @default(true)
  isNotificationRead   Boolean  @default(false)
  targetUser           User     @relation("notification", fields: [targetUserId], references: [id], onDelete: Cascade)
  sourceUser           User     @relation("activity", fields: [sourceUserId], references: [id], onDelete: Cascade)
}

model ActivityType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model VisualMediaType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model RelationshipStatus {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Conversation {
  id             String    @id
  participant1Id String
  participant2Id String
  createdAt      DateTime  @default(now())
  lastMessageAt  DateTime  @default(now())
  participant2   User      @relation("ConversationParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  participant1   User      @relation("ConversationParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  messages       Message[]

  @@unique([participant1Id, participant2Id])
  @@index([lastMessageAt])
}

model Message {
  id                   String       @id @default(cuid())
  content              String
  conversationId       String
  senderId             String
  createdAt            DateTime     @default(now())
  isRead               Boolean      @default(false)
  type                 String       @default("TEXT")
  redPacketAmount      Float?
  redPacketMessage     String?
  redPacketStatus      String?
  redPacketClaimedAt   DateTime?
  taskPostId           Int?
  taskFinalAmount      Float?
  taskCompletionStatus String?
  isAIResponse         Boolean      @default(false)
  sender               User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation         Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([type])
}

model WalletTransaction {
  id          String    @id @default(cuid())
  type        String
  amount      Float
  status      String    @default("PENDING")
  description String?
  fromUserId  String?
  toUserId    String?
  txHash      String?   @unique
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  toUser      User?     @relation("receiver", fields: [toUserId], references: [id])
  fromUser    User?     @relation("sender", fields: [fromUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([createdAt])
}

model AIProfile {
  id             String          @id @default(cuid())
  userId         String          @unique
  llmProvider    String          @default("deepseek")
  llmModel       String          @default("deepseek-chat")
  temperature    Float           @default(0.7)
  maxTokens      Int             @default(2000)
  topP           Float           @default(0.9)
  systemPrompt   String?
  roleTemplate   String          @default("assistant")
  contextPrompts String?
  activeVoiceId  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  voiceTrainings VoiceTraining[]
}

model AIMemory {
  id        String    @id @default(cuid())
  userId    String
  type      String
  category  String
  title     String
  content   String
  tags      String
  score     Float     @default(1.0)
  metadata  String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, category])
  @@index([userId, score])
}

model VoiceTraining {
  id                  String    @id @default(cuid())
  userId              String
  profileId           String
  name                String
  version             String
  status              String    @default("pending")
  progress            Int       @default(0)
  sampleKeys          String
  modelKey            String?
  sampleCount         Int       @default(0)
  duration            Int       @default(0)
  accuracy            Float?
  trainingStartedAt   DateTime?
  trainingCompletedAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  profile             AIProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model FacegateDevice {
  id              String                   @id @default(cuid())
  deviceId        String                   @unique
  prodType        String?
  prodName        String?
  relaySlots      Int                      @default(0)
  lastSeenTs      BigInt?
  fwVersion       String?
  status          Int                      @default(1)
  online          Boolean                  @default(false)
  tz              String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  jobs            FacegateJob[]
  records         FacegateRecord[]
  scheduleTargets FacegateScheduleTarget[]

  @@index([deviceId])
  @@index([online])
}

model FacegatePerson {
  id             String           @id @default(cuid())
  userId         String?          @unique
  phone          String           @unique
  personName     String
  localImagePath String?
  imageChecksum  String?
  icCardId       String?
  idCardNo       String?
  memberLevel    String?
  memberExpiry   DateTime?
  isApeLord      Boolean          @default(false)
  passPlans      String?
  syncStatus     Int              @default(0)
  extInfo        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User?            @relation(fields: [userId], references: [id])
  records        FacegateRecord[]

  @@index([phone])
  @@index([userId])
  @@index([syncStatus])
}

model FacegateRecord {
  id              String          @id @default(cuid())
  deviceId        String
  recordId        BigInt
  personPhone     String?
  recordTime      BigInt
  recordType      Int
  recordPass      Int
  similarity      Float?
  temperature     Float?
  qrcode          String?
  healthCodeColor String?
  recordPicUrl    String?
  idCardPicUrl    String?
  raw             String?
  createdAt       DateTime        @default(now())
  person          FacegatePerson? @relation(fields: [personPhone], references: [phone])
  device          FacegateDevice  @relation(fields: [deviceId], references: [deviceId])

  @@unique([deviceId, recordId])
  @@index([personPhone])
  @@index([recordTime])
  @@index([deviceId])
}

model FacegateSchedule {
  id          String                   @id @default(cuid())
  userPhone   String
  imageId     String?
  payloadType String                   @default("image")
  startAt     DateTime
  endAt       DateTime?
  cron        String?
  status      Int                      @default(0)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  jobs        FacegateJob[]
  image       FacegateImage?           @relation(fields: [imageId], references: [id])
  targets     FacegateScheduleTarget[]

  @@index([userPhone])
  @@index([status])
  @@index([startAt, endAt])
}

model FacegateImage {
  id        String             @id @default(cuid())
  userPhone String
  localPath String
  fileName  String
  url       String?
  createdAt DateTime           @default(now())
  schedules FacegateSchedule[]

  @@index([userPhone])
}

model FacegateScheduleTarget {
  id         String           @id @default(cuid())
  scheduleId String
  deviceId   String
  device     FacegateDevice   @relation(fields: [deviceId], references: [deviceId])
  schedule   FacegateSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, deviceId])
  @@index([scheduleId])
  @@index([deviceId])
}

model FacegateJob {
  id         String           @id @default(cuid())
  scheduleId String
  deviceId   String
  state      String           @default("pending")
  retryCount Int              @default(0)
  lastError  String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  device     FacegateDevice   @relation(fields: [deviceId], references: [deviceId])
  schedule   FacegateSchedule @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId, deviceId])
  @@index([state])
  @@index([deviceId])
}
