import { test, expect } from '@playwright/test';

test.describe('Production Complete Test', () => {
  test('complete end-to-end test on https://xyuan.chat', async ({ page }) => {
    console.log('üéØ Complete test on production server https://xyuan.chat');

    test.setTimeout(90000);

    const networkRequests: any[] = [];
    page.on('request', request => {
      if (request.url().includes('/api/posts')) {
        networkRequests.push({
          method: request.method(),
          url: request.url(),
        });
      }
    });

    try {
      console.log('1Ô∏è‚É£ Loading auth page...');
      await page.goto('https://xyuan.chat/auth');
      await page.waitForLoadState('domcontentloaded');
      await page.waitForTimeout(3000);

      console.log('2Ô∏è‚É£ Filling auth form...');
      await page.fill('input[placeholder="ËØ∑ËæìÂÖ•ÊâãÊú∫Âè∑"]', '13374743333');
      await page.fill('input[type="password"]', '123456');
      await page.fill('input[placeholder*="ËæìÂÖ•‰ªªÊÑèÊï∞Â≠ó"]', '123456');

      console.log('3Ô∏è‚É£ Submitting auth...');
      await page.click('button:has-text("ÁôªÂΩï/Ê≥®ÂÜå")');
      await page.waitForTimeout(8000);

      const finalUrl = page.url();
      console.log(`   Final URL: ${finalUrl}`);

      if (finalUrl.includes('/feed')) {
        console.log('‚úÖ Authentication successful!');

        console.log('4Ô∏è‚É£ Testing session...');
        const sessionResult = await page.evaluate(async () => {
          const response = await fetch('/api/auth/session', { credentials: 'include' });
          const data = await response.json();
          return { hasUser: !!data?.user, userId: data?.user?.id };
        });

        console.log(`   Session: ${sessionResult.hasUser ? '‚úÖ Valid' : '‚ùå Invalid'}`);

        if (sessionResult.hasUser) {
          console.log('5Ô∏è‚É£ Testing post creation...');

          // Look for post creation element
          const createPostElement = await page.locator('text="ÊÉ≥Âà∞Âï•ËØ¥Âï•"').first();
          if (await createPostElement.isVisible()) {
            console.log('   Post creation UI: ‚úÖ Available');

            await createPostElement.click();
            await page.waitForTimeout(3000);

            // Fill post content
            await page.fill('input[placeholder*="ËØ¥‰∫õÂï•"], textarea[placeholder*="ËØ¥‰∫õÂï•"]', 'üéâ Production test successful!');
            await page.waitForTimeout(1000);

            // Submit post
            const submitButton = page.locator('button:has-text("ÂèëÂ∏ñ")');
            if (await submitButton.isVisible()) {
              console.log('   Submit button: ‚úÖ Found');
              await submitButton.click();
              await page.waitForTimeout(8000);

              const postRequests = networkRequests.filter(req => req.method === 'POST');
              console.log(`   POST requests: ${postRequests.length}`);

              if (postRequests.length > 0) {
                console.log('‚úÖ Post creation: SUCCESS');
              } else {
                console.log('‚ùå Post creation: FAILED - No API calls');
              }
            } else {
              console.log('‚ùå Submit button not found');
            }
          } else {
            console.log('‚ùå Post creation UI not available');
          }

          // Test direct API call
          console.log('6Ô∏è‚É£ Testing direct API...');
          const apiResult = await page.evaluate(async () => {
            const formData = new FormData();
            formData.append('content', 'Direct API test');

            const response = await fetch('/api/posts', {
              method: 'POST',
              body: formData,
              credentials: 'include'
            });

            return {
              status: response.status,
              success: response.ok
            };
          });

          console.log(`   API call: ${apiResult.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'} (${apiResult.status})`);

          // Final summary
          console.log('\nüèÜ PRODUCTION TEST SUMMARY:');
          console.log(`‚úÖ Auth: ${finalUrl.includes('/feed') ? 'WORKING' : 'FAILED'}`);
          console.log(`‚úÖ Session: ${sessionResult.hasUser ? 'WORKING' : 'FAILED'}`);
          console.log(`‚úÖ API: ${apiResult.success ? 'WORKING' : 'FAILED'}`);

          if (finalUrl.includes('/feed') && sessionResult.hasUser && apiResult.success) {
            console.log('üéâ PRODUCTION SERVER IS FULLY FUNCTIONAL!');
          } else {
            console.log('‚ùå Production server has issues');
          }

        } else {
          console.log('‚ùå No valid session after authentication');
        }
      } else {
        console.log('‚ùå Authentication failed - not redirected to feed');
      }

    } catch (error) {
      console.log('‚ùå Test error:', error.message);
    }
  });
});