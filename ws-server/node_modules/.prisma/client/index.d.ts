
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AccountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Account"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }, ExtArgs["result"]["account"]>
  composites: {}
}

/**
 * Model Account
 * 
 */
export type Account = runtime.Types.DefaultSelection<AccountPayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    sessionToken: string
    userId: string
    expires: Date
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    accounts: AccountPayload<ExtArgs>[]
    sessions: SessionPayload<ExtArgs>[]
    post: PostPayload<ExtArgs>[]
    visualMedia: VisualMediaPayload<ExtArgs>[]
    postLikes: PostLikePayload<ExtArgs>[]
    comments: CommentPayload<ExtArgs>[]
    commentLikes: CommentLikePayload<ExtArgs>[]
    followers: FollowPayload<ExtArgs>[]
    following: FollowPayload<ExtArgs>[]
    activities: ActivityPayload<ExtArgs>[]
    notifications: ActivityPayload<ExtArgs>[]
    conversationsAsParticipant1: ConversationPayload<ExtArgs>[]
    conversationsAsParticipant2: ConversationPayload<ExtArgs>[]
    messages: MessagePayload<ExtArgs>[]
    sentTransactions: WalletTransactionPayload<ExtArgs>[]
    receivedTransactions: WalletTransactionPayload<ExtArgs>[]
    aiProfile: AIProfilePayload<ExtArgs> | null
    aiMemories: AIMemoryPayload<ExtArgs>[]
    facegatePerson: FacegatePersonPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    username: string | null
    email: string | null
    name: string | null
    gender: string | null
    birthDate: Date | null
    phoneNumber: string | null
    address: string | null
    bio: string | null
    website: string | null
    relationshipStatus: string | null
    emailVerified: Date | null
    image: string | null
    profilePhoto: string | null
    coverPhoto: string | null
    passwordHash: string | null
    walletAddress: string | null
    apeBalance: number
    walletCreatedAt: Date | null
    featured: boolean
    ttsModelId: string | null
    ttsVoiceId: string | null
    ttsPlaybackSpeed: number | null
    punked: boolean
    appessoBalance: number | null
    appessoBalanceUpdatedAt: Date | null
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type VerificationTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VerificationToken"
  objects: {}
  scalars: $Extensions.GetResult<{
    identifier: string
    token: string
    expires: Date
  }, ExtArgs["result"]["verificationToken"]>
  composites: {}
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = runtime.Types.DefaultSelection<VerificationTokenPayload>
export type FollowPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Follow"
  objects: {
    follower: UserPayload<ExtArgs>
    following: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    followerId: string
    followingId: string
  }, ExtArgs["result"]["follow"]>
  composites: {}
}

/**
 * Model Follow
 * 
 */
export type Follow = runtime.Types.DefaultSelection<FollowPayload>
export type PostPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Post"
  objects: {
    visualMedia: VisualMediaPayload<ExtArgs>[]
    user: UserPayload<ExtArgs>
    postLikes: PostLikePayload<ExtArgs>[]
    comments: CommentPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    content: string | null
    createdAt: Date
    userId: string
    isTask: boolean
    rewardAmount: number
    taskStatus: string | null
    completedBy: string | null
    completedAt: Date | null
    initialPaymentAmount: number | null
    initialPaymentAt: Date | null
    finalPaymentAmount: number | null
    finalPaymentAt: Date | null
    completionRequestedAt: Date | null
    completionConfirmedAt: Date | null
    audioUrl: string | null
  }, ExtArgs["result"]["post"]>
  composites: {}
}

/**
 * Model Post
 * 
 */
export type Post = runtime.Types.DefaultSelection<PostPayload>
export type PostLikePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PostLike"
  objects: {
    user: UserPayload<ExtArgs>
    post: PostPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    userId: string
    postId: number
  }, ExtArgs["result"]["postLike"]>
  composites: {}
}

/**
 * Model PostLike
 * 
 */
export type PostLike = runtime.Types.DefaultSelection<PostLikePayload>
export type CommentPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Comment"
  objects: {
    user: UserPayload<ExtArgs>
    commentLikes: CommentLikePayload<ExtArgs>[]
    post: PostPayload<ExtArgs>
    parent: CommentPayload<ExtArgs> | null
    replies: CommentPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    content: string
    createdAt: Date
    userId: string
    postId: number
    parentId: number | null
  }, ExtArgs["result"]["comment"]>
  composites: {}
}

/**
 * Model Comment
 * 
 */
export type Comment = runtime.Types.DefaultSelection<CommentPayload>
export type CommentLikePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "CommentLike"
  objects: {
    user: UserPayload<ExtArgs>
    comment: CommentPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    userId: string
    commentId: number
  }, ExtArgs["result"]["commentLike"]>
  composites: {}
}

/**
 * Model CommentLike
 * 
 */
export type CommentLike = runtime.Types.DefaultSelection<CommentLikePayload>
export type VisualMediaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VisualMedia"
  objects: {
    user: UserPayload<ExtArgs>
    post: PostPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    type: string
    fileName: string
    uploadedAt: Date
    userId: string
    postId: number
  }, ExtArgs["result"]["visualMedia"]>
  composites: {}
}

/**
 * Model VisualMedia
 * 
 */
export type VisualMedia = runtime.Types.DefaultSelection<VisualMediaPayload>
export type ActivityPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Activity"
  objects: {
    sourceUser: UserPayload<ExtArgs>
    targetUser: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    type: string
    sourceId: number
    targetId: number | null
    sourceUserId: string
    targetUserId: string
    isNotificationActive: boolean
    isNotificationRead: boolean
  }, ExtArgs["result"]["activity"]>
  composites: {}
}

/**
 * Model Activity
 * 
 */
export type Activity = runtime.Types.DefaultSelection<ActivityPayload>
export type ActivityTypePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ActivityType"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["activityType"]>
  composites: {}
}

/**
 * Model ActivityType
 * 
 */
export type ActivityType = runtime.Types.DefaultSelection<ActivityTypePayload>
export type VisualMediaTypePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VisualMediaType"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["visualMediaType"]>
  composites: {}
}

/**
 * Model VisualMediaType
 * 
 */
export type VisualMediaType = runtime.Types.DefaultSelection<VisualMediaTypePayload>
export type GenderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Gender"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["gender"]>
  composites: {}
}

/**
 * Model Gender
 * 
 */
export type Gender = runtime.Types.DefaultSelection<GenderPayload>
export type RelationshipStatusPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "RelationshipStatus"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    name: string
  }, ExtArgs["result"]["relationshipStatus"]>
  composites: {}
}

/**
 * Model RelationshipStatus
 * 
 */
export type RelationshipStatus = runtime.Types.DefaultSelection<RelationshipStatusPayload>
export type ConversationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Conversation"
  objects: {
    participant1: UserPayload<ExtArgs>
    participant2: UserPayload<ExtArgs>
    messages: MessagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    participant1Id: string
    participant2Id: string
    createdAt: Date
    lastMessageAt: Date
  }, ExtArgs["result"]["conversation"]>
  composites: {}
}

/**
 * Model Conversation
 * 
 */
export type Conversation = runtime.Types.DefaultSelection<ConversationPayload>
export type MessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Message"
  objects: {
    conversation: ConversationPayload<ExtArgs>
    sender: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    content: string
    conversationId: string
    senderId: string
    createdAt: Date
    isRead: boolean
    type: string
    redPacketAmount: number | null
    redPacketMessage: string | null
    redPacketStatus: string | null
    redPacketClaimedAt: Date | null
    taskPostId: number | null
    taskFinalAmount: number | null
    taskCompletionStatus: string | null
    isAIResponse: boolean
  }, ExtArgs["result"]["message"]>
  composites: {}
}

/**
 * Model Message
 * 
 */
export type Message = runtime.Types.DefaultSelection<MessagePayload>
export type WalletTransactionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "WalletTransaction"
  objects: {
    fromUser: UserPayload<ExtArgs> | null
    toUser: UserPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    type: string
    amount: number
    status: string
    description: string | null
    fromUserId: string | null
    toUserId: string | null
    txHash: string | null
    createdAt: Date
    completedAt: Date | null
  }, ExtArgs["result"]["walletTransaction"]>
  composites: {}
}

/**
 * Model WalletTransaction
 * 
 */
export type WalletTransaction = runtime.Types.DefaultSelection<WalletTransactionPayload>
export type AIProfilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AIProfile"
  objects: {
    user: UserPayload<ExtArgs>
    voiceTrainings: VoiceTrainingPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    llmProvider: string
    llmModel: string
    temperature: number
    maxTokens: number
    topP: number
    systemPrompt: string | null
    roleTemplate: string
    contextPrompts: string | null
    activeVoiceId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["aIProfile"]>
  composites: {}
}

/**
 * Model AIProfile
 * 
 */
export type AIProfile = runtime.Types.DefaultSelection<AIProfilePayload>
export type AIMemoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AIMemory"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    type: string
    category: string
    title: string
    content: string
    tags: string
    score: number
    metadata: string | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["aIMemory"]>
  composites: {}
}

/**
 * Model AIMemory
 * 
 */
export type AIMemory = runtime.Types.DefaultSelection<AIMemoryPayload>
export type VoiceTrainingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VoiceTraining"
  objects: {
    profile: AIProfilePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    profileId: string
    name: string
    version: string
    status: string
    progress: number
    sampleKeys: string
    modelKey: string | null
    sampleCount: number
    duration: number
    accuracy: number | null
    trainingStartedAt: Date | null
    trainingCompletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["voiceTraining"]>
  composites: {}
}

/**
 * Model VoiceTraining
 * 
 */
export type VoiceTraining = runtime.Types.DefaultSelection<VoiceTrainingPayload>
export type FacegateDevicePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegateDevice"
  objects: {
    records: FacegateRecordPayload<ExtArgs>[]
    scheduleTargets: FacegateScheduleTargetPayload<ExtArgs>[]
    jobs: FacegateJobPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    deviceId: string
    prodType: string | null
    prodName: string | null
    relaySlots: number
    lastSeenTs: bigint | null
    fwVersion: string | null
    status: number
    online: boolean
    tz: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["facegateDevice"]>
  composites: {}
}

/**
 * Model FacegateDevice
 * 
 */
export type FacegateDevice = runtime.Types.DefaultSelection<FacegateDevicePayload>
export type FacegatePersonPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegatePerson"
  objects: {
    user: UserPayload<ExtArgs> | null
    records: FacegateRecordPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string | null
    phone: string
    personName: string
    localImagePath: string | null
    imageChecksum: string | null
    icCardId: string | null
    idCardNo: string | null
    memberLevel: string | null
    memberExpiry: Date | null
    isApeLord: boolean
    passPlans: string | null
    syncStatus: number
    extInfo: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["facegatePerson"]>
  composites: {}
}

/**
 * Model FacegatePerson
 * 
 */
export type FacegatePerson = runtime.Types.DefaultSelection<FacegatePersonPayload>
export type FacegateRecordPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegateRecord"
  objects: {
    device: FacegateDevicePayload<ExtArgs>
    person: FacegatePersonPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    deviceId: string
    recordId: bigint
    personPhone: string | null
    recordTime: bigint
    recordType: number
    recordPass: number
    similarity: number | null
    temperature: number | null
    qrcode: string | null
    healthCodeColor: string | null
    recordPicUrl: string | null
    idCardPicUrl: string | null
    raw: string | null
    createdAt: Date
  }, ExtArgs["result"]["facegateRecord"]>
  composites: {}
}

/**
 * Model FacegateRecord
 * 
 */
export type FacegateRecord = runtime.Types.DefaultSelection<FacegateRecordPayload>
export type FacegateSchedulePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegateSchedule"
  objects: {
    image: FacegateImagePayload<ExtArgs> | null
    targets: FacegateScheduleTargetPayload<ExtArgs>[]
    jobs: FacegateJobPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userPhone: string
    imageId: string | null
    payloadType: string
    startAt: Date
    endAt: Date | null
    cron: string | null
    status: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["facegateSchedule"]>
  composites: {}
}

/**
 * Model FacegateSchedule
 * 
 */
export type FacegateSchedule = runtime.Types.DefaultSelection<FacegateSchedulePayload>
export type FacegateImagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegateImage"
  objects: {
    schedules: FacegateSchedulePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userPhone: string
    localPath: string
    fileName: string
    url: string | null
    createdAt: Date
  }, ExtArgs["result"]["facegateImage"]>
  composites: {}
}

/**
 * Model FacegateImage
 * 
 */
export type FacegateImage = runtime.Types.DefaultSelection<FacegateImagePayload>
export type FacegateScheduleTargetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegateScheduleTarget"
  objects: {
    schedule: FacegateSchedulePayload<ExtArgs>
    device: FacegateDevicePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    scheduleId: string
    deviceId: string
  }, ExtArgs["result"]["facegateScheduleTarget"]>
  composites: {}
}

/**
 * Model FacegateScheduleTarget
 * 
 */
export type FacegateScheduleTarget = runtime.Types.DefaultSelection<FacegateScheduleTargetPayload>
export type FacegateJobPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "FacegateJob"
  objects: {
    schedule: FacegateSchedulePayload<ExtArgs>
    device: FacegateDevicePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    scheduleId: string
    deviceId: string
    state: string
    retryCount: number
    lastError: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["facegateJob"]>
  composites: {}
}

/**
 * Model FacegateJob
 * 
 */
export type FacegateJob = runtime.Types.DefaultSelection<FacegateJobPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;

  /**
   * `prisma.postLike`: Exposes CRUD operations for the **PostLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostLikes
    * const postLikes = await prisma.postLike.findMany()
    * ```
    */
  get postLike(): Prisma.PostLikeDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.commentLike`: Exposes CRUD operations for the **CommentLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentLikes
    * const commentLikes = await prisma.commentLike.findMany()
    * ```
    */
  get commentLike(): Prisma.CommentLikeDelegate<ExtArgs>;

  /**
   * `prisma.visualMedia`: Exposes CRUD operations for the **VisualMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisualMedias
    * const visualMedias = await prisma.visualMedia.findMany()
    * ```
    */
  get visualMedia(): Prisma.VisualMediaDelegate<ExtArgs>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs>;

  /**
   * `prisma.activityType`: Exposes CRUD operations for the **ActivityType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityTypes
    * const activityTypes = await prisma.activityType.findMany()
    * ```
    */
  get activityType(): Prisma.ActivityTypeDelegate<ExtArgs>;

  /**
   * `prisma.visualMediaType`: Exposes CRUD operations for the **VisualMediaType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisualMediaTypes
    * const visualMediaTypes = await prisma.visualMediaType.findMany()
    * ```
    */
  get visualMediaType(): Prisma.VisualMediaTypeDelegate<ExtArgs>;

  /**
   * `prisma.gender`: Exposes CRUD operations for the **Gender** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genders
    * const genders = await prisma.gender.findMany()
    * ```
    */
  get gender(): Prisma.GenderDelegate<ExtArgs>;

  /**
   * `prisma.relationshipStatus`: Exposes CRUD operations for the **RelationshipStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelationshipStatuses
    * const relationshipStatuses = await prisma.relationshipStatus.findMany()
    * ```
    */
  get relationshipStatus(): Prisma.RelationshipStatusDelegate<ExtArgs>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.walletTransaction`: Exposes CRUD operations for the **WalletTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WalletTransactions
    * const walletTransactions = await prisma.walletTransaction.findMany()
    * ```
    */
  get walletTransaction(): Prisma.WalletTransactionDelegate<ExtArgs>;

  /**
   * `prisma.aIProfile`: Exposes CRUD operations for the **AIProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIProfiles
    * const aIProfiles = await prisma.aIProfile.findMany()
    * ```
    */
  get aIProfile(): Prisma.AIProfileDelegate<ExtArgs>;

  /**
   * `prisma.aIMemory`: Exposes CRUD operations for the **AIMemory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIMemories
    * const aIMemories = await prisma.aIMemory.findMany()
    * ```
    */
  get aIMemory(): Prisma.AIMemoryDelegate<ExtArgs>;

  /**
   * `prisma.voiceTraining`: Exposes CRUD operations for the **VoiceTraining** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoiceTrainings
    * const voiceTrainings = await prisma.voiceTraining.findMany()
    * ```
    */
  get voiceTraining(): Prisma.VoiceTrainingDelegate<ExtArgs>;

  /**
   * `prisma.facegateDevice`: Exposes CRUD operations for the **FacegateDevice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegateDevices
    * const facegateDevices = await prisma.facegateDevice.findMany()
    * ```
    */
  get facegateDevice(): Prisma.FacegateDeviceDelegate<ExtArgs>;

  /**
   * `prisma.facegatePerson`: Exposes CRUD operations for the **FacegatePerson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegatePeople
    * const facegatePeople = await prisma.facegatePerson.findMany()
    * ```
    */
  get facegatePerson(): Prisma.FacegatePersonDelegate<ExtArgs>;

  /**
   * `prisma.facegateRecord`: Exposes CRUD operations for the **FacegateRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegateRecords
    * const facegateRecords = await prisma.facegateRecord.findMany()
    * ```
    */
  get facegateRecord(): Prisma.FacegateRecordDelegate<ExtArgs>;

  /**
   * `prisma.facegateSchedule`: Exposes CRUD operations for the **FacegateSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegateSchedules
    * const facegateSchedules = await prisma.facegateSchedule.findMany()
    * ```
    */
  get facegateSchedule(): Prisma.FacegateScheduleDelegate<ExtArgs>;

  /**
   * `prisma.facegateImage`: Exposes CRUD operations for the **FacegateImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegateImages
    * const facegateImages = await prisma.facegateImage.findMany()
    * ```
    */
  get facegateImage(): Prisma.FacegateImageDelegate<ExtArgs>;

  /**
   * `prisma.facegateScheduleTarget`: Exposes CRUD operations for the **FacegateScheduleTarget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegateScheduleTargets
    * const facegateScheduleTargets = await prisma.facegateScheduleTarget.findMany()
    * ```
    */
  get facegateScheduleTarget(): Prisma.FacegateScheduleTargetDelegate<ExtArgs>;

  /**
   * `prisma.facegateJob`: Exposes CRUD operations for the **FacegateJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacegateJobs
    * const facegateJobs = await prisma.facegateJob.findMany()
    * ```
    */
  get facegateJob(): Prisma.FacegateJobDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken',
    Follow: 'Follow',
    Post: 'Post',
    PostLike: 'PostLike',
    Comment: 'Comment',
    CommentLike: 'CommentLike',
    VisualMedia: 'VisualMedia',
    Activity: 'Activity',
    ActivityType: 'ActivityType',
    VisualMediaType: 'VisualMediaType',
    Gender: 'Gender',
    RelationshipStatus: 'RelationshipStatus',
    Conversation: 'Conversation',
    Message: 'Message',
    WalletTransaction: 'WalletTransaction',
    AIProfile: 'AIProfile',
    AIMemory: 'AIMemory',
    VoiceTraining: 'VoiceTraining',
    FacegateDevice: 'FacegateDevice',
    FacegatePerson: 'FacegatePerson',
    FacegateRecord: 'FacegateRecord',
    FacegateSchedule: 'FacegateSchedule',
    FacegateImage: 'FacegateImage',
    FacegateScheduleTarget: 'FacegateScheduleTarget',
    FacegateJob: 'FacegateJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'session' | 'user' | 'verificationToken' | 'follow' | 'post' | 'postLike' | 'comment' | 'commentLike' | 'visualMedia' | 'activity' | 'activityType' | 'visualMediaType' | 'gender' | 'relationshipStatus' | 'conversation' | 'message' | 'walletTransaction' | 'aIProfile' | 'aIMemory' | 'voiceTraining' | 'facegateDevice' | 'facegatePerson' | 'facegateRecord' | 'facegateSchedule' | 'facegateImage' | 'facegateScheduleTarget' | 'facegateJob'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>,
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>,
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      PostLike: {
        payload: PostLikePayload<ExtArgs>
        fields: Prisma.PostLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostLikeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostLikeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>
          }
          findFirst: {
            args: Prisma.PostLikeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostLikeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>
          }
          findMany: {
            args: Prisma.PostLikeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>[]
          }
          create: {
            args: Prisma.PostLikeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>
          }
          delete: {
            args: Prisma.PostLikeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>
          }
          update: {
            args: Prisma.PostLikeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>
          }
          deleteMany: {
            args: Prisma.PostLikeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostLikeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostLikeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PostLikePayload>
          }
          aggregate: {
            args: Prisma.PostLikeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePostLike>
          }
          groupBy: {
            args: Prisma.PostLikeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostLikeCountArgs<ExtArgs>,
            result: $Utils.Optional<PostLikeCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      CommentLike: {
        payload: CommentLikePayload<ExtArgs>
        fields: Prisma.CommentLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentLikeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentLikeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>
          }
          findFirst: {
            args: Prisma.CommentLikeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentLikeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>
          }
          findMany: {
            args: Prisma.CommentLikeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>[]
          }
          create: {
            args: Prisma.CommentLikeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>
          }
          delete: {
            args: Prisma.CommentLikeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>
          }
          update: {
            args: Prisma.CommentLikeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>
          }
          deleteMany: {
            args: Prisma.CommentLikeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentLikeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentLikeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CommentLikePayload>
          }
          aggregate: {
            args: Prisma.CommentLikeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommentLike>
          }
          groupBy: {
            args: Prisma.CommentLikeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentLikeCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentLikeCountAggregateOutputType> | number
          }
        }
      }
      VisualMedia: {
        payload: VisualMediaPayload<ExtArgs>
        fields: Prisma.VisualMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisualMediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisualMediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>
          }
          findFirst: {
            args: Prisma.VisualMediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisualMediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>
          }
          findMany: {
            args: Prisma.VisualMediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>[]
          }
          create: {
            args: Prisma.VisualMediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>
          }
          delete: {
            args: Prisma.VisualMediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>
          }
          update: {
            args: Prisma.VisualMediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>
          }
          deleteMany: {
            args: Prisma.VisualMediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VisualMediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VisualMediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaPayload>
          }
          aggregate: {
            args: Prisma.VisualMediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVisualMedia>
          }
          groupBy: {
            args: Prisma.VisualMediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VisualMediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisualMediaCountArgs<ExtArgs>,
            result: $Utils.Optional<VisualMediaCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      ActivityType: {
        payload: ActivityTypePayload<ExtArgs>
        fields: Prisma.ActivityTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>
          }
          findFirst: {
            args: Prisma.ActivityTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>
          }
          findMany: {
            args: Prisma.ActivityTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>[]
          }
          create: {
            args: Prisma.ActivityTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>
          }
          delete: {
            args: Prisma.ActivityTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>
          }
          update: {
            args: Prisma.ActivityTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>
          }
          deleteMany: {
            args: Prisma.ActivityTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActivityTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ActivityTypePayload>
          }
          aggregate: {
            args: Prisma.ActivityTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivityType>
          }
          groupBy: {
            args: Prisma.ActivityTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityTypeCountAggregateOutputType> | number
          }
        }
      }
      VisualMediaType: {
        payload: VisualMediaTypePayload<ExtArgs>
        fields: Prisma.VisualMediaTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisualMediaTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisualMediaTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>
          }
          findFirst: {
            args: Prisma.VisualMediaTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisualMediaTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>
          }
          findMany: {
            args: Prisma.VisualMediaTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>[]
          }
          create: {
            args: Prisma.VisualMediaTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>
          }
          delete: {
            args: Prisma.VisualMediaTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>
          }
          update: {
            args: Prisma.VisualMediaTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>
          }
          deleteMany: {
            args: Prisma.VisualMediaTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VisualMediaTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VisualMediaTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VisualMediaTypePayload>
          }
          aggregate: {
            args: Prisma.VisualMediaTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVisualMediaType>
          }
          groupBy: {
            args: Prisma.VisualMediaTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VisualMediaTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisualMediaTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<VisualMediaTypeCountAggregateOutputType> | number
          }
        }
      }
      Gender: {
        payload: GenderPayload<ExtArgs>
        fields: Prisma.GenderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>
          }
          findFirst: {
            args: Prisma.GenderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>
          }
          findMany: {
            args: Prisma.GenderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>[]
          }
          create: {
            args: Prisma.GenderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>
          }
          delete: {
            args: Prisma.GenderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>
          }
          update: {
            args: Prisma.GenderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>
          }
          deleteMany: {
            args: Prisma.GenderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GenderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GenderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GenderPayload>
          }
          aggregate: {
            args: Prisma.GenderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGender>
          }
          groupBy: {
            args: Prisma.GenderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GenderGroupByOutputType>[]
          }
          count: {
            args: Prisma.GenderCountArgs<ExtArgs>,
            result: $Utils.Optional<GenderCountAggregateOutputType> | number
          }
        }
      }
      RelationshipStatus: {
        payload: RelationshipStatusPayload<ExtArgs>
        fields: Prisma.RelationshipStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelationshipStatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelationshipStatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>
          }
          findFirst: {
            args: Prisma.RelationshipStatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelationshipStatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>
          }
          findMany: {
            args: Prisma.RelationshipStatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>[]
          }
          create: {
            args: Prisma.RelationshipStatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>
          }
          delete: {
            args: Prisma.RelationshipStatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>
          }
          update: {
            args: Prisma.RelationshipStatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>
          }
          deleteMany: {
            args: Prisma.RelationshipStatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RelationshipStatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RelationshipStatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RelationshipStatusPayload>
          }
          aggregate: {
            args: Prisma.RelationshipStatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRelationshipStatus>
          }
          groupBy: {
            args: Prisma.RelationshipStatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RelationshipStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelationshipStatusCountArgs<ExtArgs>,
            result: $Utils.Optional<RelationshipStatusCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>,
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      WalletTransaction: {
        payload: WalletTransactionPayload<ExtArgs>
        fields: Prisma.WalletTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletTransactionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletTransactionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>
          }
          findFirst: {
            args: Prisma.WalletTransactionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletTransactionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>
          }
          findMany: {
            args: Prisma.WalletTransactionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>[]
          }
          create: {
            args: Prisma.WalletTransactionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>
          }
          delete: {
            args: Prisma.WalletTransactionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>
          }
          update: {
            args: Prisma.WalletTransactionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>
          }
          deleteMany: {
            args: Prisma.WalletTransactionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WalletTransactionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WalletTransactionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletTransactionPayload>
          }
          aggregate: {
            args: Prisma.WalletTransactionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWalletTransaction>
          }
          groupBy: {
            args: Prisma.WalletTransactionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WalletTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletTransactionCountArgs<ExtArgs>,
            result: $Utils.Optional<WalletTransactionCountAggregateOutputType> | number
          }
        }
      }
      AIProfile: {
        payload: AIProfilePayload<ExtArgs>
        fields: Prisma.AIProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>
          }
          findFirst: {
            args: Prisma.AIProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>
          }
          findMany: {
            args: Prisma.AIProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>[]
          }
          create: {
            args: Prisma.AIProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>
          }
          delete: {
            args: Prisma.AIProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>
          }
          update: {
            args: Prisma.AIProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>
          }
          deleteMany: {
            args: Prisma.AIProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AIProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AIProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIProfilePayload>
          }
          aggregate: {
            args: Prisma.AIProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAIProfile>
          }
          groupBy: {
            args: Prisma.AIProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AIProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<AIProfileCountAggregateOutputType> | number
          }
        }
      }
      AIMemory: {
        payload: AIMemoryPayload<ExtArgs>
        fields: Prisma.AIMemoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIMemoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIMemoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>
          }
          findFirst: {
            args: Prisma.AIMemoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIMemoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>
          }
          findMany: {
            args: Prisma.AIMemoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>[]
          }
          create: {
            args: Prisma.AIMemoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>
          }
          delete: {
            args: Prisma.AIMemoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>
          }
          update: {
            args: Prisma.AIMemoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>
          }
          deleteMany: {
            args: Prisma.AIMemoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AIMemoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AIMemoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AIMemoryPayload>
          }
          aggregate: {
            args: Prisma.AIMemoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAIMemory>
          }
          groupBy: {
            args: Prisma.AIMemoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AIMemoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIMemoryCountArgs<ExtArgs>,
            result: $Utils.Optional<AIMemoryCountAggregateOutputType> | number
          }
        }
      }
      VoiceTraining: {
        payload: VoiceTrainingPayload<ExtArgs>
        fields: Prisma.VoiceTrainingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoiceTrainingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoiceTrainingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>
          }
          findFirst: {
            args: Prisma.VoiceTrainingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoiceTrainingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>
          }
          findMany: {
            args: Prisma.VoiceTrainingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>[]
          }
          create: {
            args: Prisma.VoiceTrainingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>
          }
          delete: {
            args: Prisma.VoiceTrainingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>
          }
          update: {
            args: Prisma.VoiceTrainingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>
          }
          deleteMany: {
            args: Prisma.VoiceTrainingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VoiceTrainingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VoiceTrainingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VoiceTrainingPayload>
          }
          aggregate: {
            args: Prisma.VoiceTrainingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVoiceTraining>
          }
          groupBy: {
            args: Prisma.VoiceTrainingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VoiceTrainingGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoiceTrainingCountArgs<ExtArgs>,
            result: $Utils.Optional<VoiceTrainingCountAggregateOutputType> | number
          }
        }
      }
      FacegateDevice: {
        payload: FacegateDevicePayload<ExtArgs>
        fields: Prisma.FacegateDeviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegateDeviceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegateDeviceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>
          }
          findFirst: {
            args: Prisma.FacegateDeviceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegateDeviceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>
          }
          findMany: {
            args: Prisma.FacegateDeviceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>[]
          }
          create: {
            args: Prisma.FacegateDeviceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>
          }
          delete: {
            args: Prisma.FacegateDeviceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>
          }
          update: {
            args: Prisma.FacegateDeviceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>
          }
          deleteMany: {
            args: Prisma.FacegateDeviceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegateDeviceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegateDeviceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateDevicePayload>
          }
          aggregate: {
            args: Prisma.FacegateDeviceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegateDevice>
          }
          groupBy: {
            args: Prisma.FacegateDeviceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegateDeviceGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegateDeviceCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegateDeviceCountAggregateOutputType> | number
          }
        }
      }
      FacegatePerson: {
        payload: FacegatePersonPayload<ExtArgs>
        fields: Prisma.FacegatePersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegatePersonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegatePersonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>
          }
          findFirst: {
            args: Prisma.FacegatePersonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegatePersonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>
          }
          findMany: {
            args: Prisma.FacegatePersonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>[]
          }
          create: {
            args: Prisma.FacegatePersonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>
          }
          delete: {
            args: Prisma.FacegatePersonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>
          }
          update: {
            args: Prisma.FacegatePersonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>
          }
          deleteMany: {
            args: Prisma.FacegatePersonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegatePersonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegatePersonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegatePersonPayload>
          }
          aggregate: {
            args: Prisma.FacegatePersonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegatePerson>
          }
          groupBy: {
            args: Prisma.FacegatePersonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegatePersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegatePersonCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegatePersonCountAggregateOutputType> | number
          }
        }
      }
      FacegateRecord: {
        payload: FacegateRecordPayload<ExtArgs>
        fields: Prisma.FacegateRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegateRecordFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegateRecordFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>
          }
          findFirst: {
            args: Prisma.FacegateRecordFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegateRecordFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>
          }
          findMany: {
            args: Prisma.FacegateRecordFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>[]
          }
          create: {
            args: Prisma.FacegateRecordCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>
          }
          delete: {
            args: Prisma.FacegateRecordDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>
          }
          update: {
            args: Prisma.FacegateRecordUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>
          }
          deleteMany: {
            args: Prisma.FacegateRecordDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegateRecordUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegateRecordUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateRecordPayload>
          }
          aggregate: {
            args: Prisma.FacegateRecordAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegateRecord>
          }
          groupBy: {
            args: Prisma.FacegateRecordGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegateRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegateRecordCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegateRecordCountAggregateOutputType> | number
          }
        }
      }
      FacegateSchedule: {
        payload: FacegateSchedulePayload<ExtArgs>
        fields: Prisma.FacegateScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegateScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegateScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>
          }
          findFirst: {
            args: Prisma.FacegateScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegateScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>
          }
          findMany: {
            args: Prisma.FacegateScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>[]
          }
          create: {
            args: Prisma.FacegateScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>
          }
          delete: {
            args: Prisma.FacegateScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>
          }
          update: {
            args: Prisma.FacegateScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>
          }
          deleteMany: {
            args: Prisma.FacegateScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegateScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegateScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateSchedulePayload>
          }
          aggregate: {
            args: Prisma.FacegateScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegateSchedule>
          }
          groupBy: {
            args: Prisma.FacegateScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegateScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegateScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegateScheduleCountAggregateOutputType> | number
          }
        }
      }
      FacegateImage: {
        payload: FacegateImagePayload<ExtArgs>
        fields: Prisma.FacegateImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegateImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegateImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>
          }
          findFirst: {
            args: Prisma.FacegateImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegateImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>
          }
          findMany: {
            args: Prisma.FacegateImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>[]
          }
          create: {
            args: Prisma.FacegateImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>
          }
          delete: {
            args: Prisma.FacegateImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>
          }
          update: {
            args: Prisma.FacegateImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>
          }
          deleteMany: {
            args: Prisma.FacegateImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegateImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegateImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateImagePayload>
          }
          aggregate: {
            args: Prisma.FacegateImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegateImage>
          }
          groupBy: {
            args: Prisma.FacegateImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegateImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegateImageCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegateImageCountAggregateOutputType> | number
          }
        }
      }
      FacegateScheduleTarget: {
        payload: FacegateScheduleTargetPayload<ExtArgs>
        fields: Prisma.FacegateScheduleTargetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegateScheduleTargetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegateScheduleTargetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>
          }
          findFirst: {
            args: Prisma.FacegateScheduleTargetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegateScheduleTargetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>
          }
          findMany: {
            args: Prisma.FacegateScheduleTargetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>[]
          }
          create: {
            args: Prisma.FacegateScheduleTargetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>
          }
          delete: {
            args: Prisma.FacegateScheduleTargetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>
          }
          update: {
            args: Prisma.FacegateScheduleTargetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>
          }
          deleteMany: {
            args: Prisma.FacegateScheduleTargetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegateScheduleTargetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegateScheduleTargetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateScheduleTargetPayload>
          }
          aggregate: {
            args: Prisma.FacegateScheduleTargetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegateScheduleTarget>
          }
          groupBy: {
            args: Prisma.FacegateScheduleTargetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegateScheduleTargetGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegateScheduleTargetCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegateScheduleTargetCountAggregateOutputType> | number
          }
        }
      }
      FacegateJob: {
        payload: FacegateJobPayload<ExtArgs>
        fields: Prisma.FacegateJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacegateJobFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacegateJobFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>
          }
          findFirst: {
            args: Prisma.FacegateJobFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacegateJobFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>
          }
          findMany: {
            args: Prisma.FacegateJobFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>[]
          }
          create: {
            args: Prisma.FacegateJobCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>
          }
          delete: {
            args: Prisma.FacegateJobDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>
          }
          update: {
            args: Prisma.FacegateJobUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>
          }
          deleteMany: {
            args: Prisma.FacegateJobDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FacegateJobUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FacegateJobUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FacegateJobPayload>
          }
          aggregate: {
            args: Prisma.FacegateJobAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFacegateJob>
          }
          groupBy: {
            args: Prisma.FacegateJobGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacegateJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacegateJobCountArgs<ExtArgs>,
            result: $Utils.Optional<FacegateJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    accounts: number
    sessions: number
    post: number
    visualMedia: number
    postLikes: number
    comments: number
    commentLikes: number
    followers: number
    following: number
    activities: number
    notifications: number
    conversationsAsParticipant1: number
    conversationsAsParticipant2: number
    messages: number
    sentTransactions: number
    receivedTransactions: number
    aiMemories: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    post?: boolean | UserCountOutputTypeCountPostArgs
    visualMedia?: boolean | UserCountOutputTypeCountVisualMediaArgs
    postLikes?: boolean | UserCountOutputTypeCountPostLikesArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    commentLikes?: boolean | UserCountOutputTypeCountCommentLikesArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    conversationsAsParticipant1?: boolean | UserCountOutputTypeCountConversationsAsParticipant1Args
    conversationsAsParticipant2?: boolean | UserCountOutputTypeCountConversationsAsParticipant2Args
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    sentTransactions?: boolean | UserCountOutputTypeCountSentTransactionsArgs
    receivedTransactions?: boolean | UserCountOutputTypeCountReceivedTransactionsArgs
    aiMemories?: boolean | UserCountOutputTypeCountAiMemoriesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVisualMediaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VisualMediaWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationsAsParticipant1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationsAsParticipant2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAiMemoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AIMemoryWhereInput
  }



  /**
   * Count Type PostCountOutputType
   */


  export type PostCountOutputType = {
    visualMedia: number
    postLikes: number
    comments: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    visualMedia?: boolean | PostCountOutputTypeCountVisualMediaArgs
    postLikes?: boolean | PostCountOutputTypeCountPostLikesArgs
    comments?: boolean | PostCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountVisualMediaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VisualMediaWhereInput
  }


  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountPostLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
  }


  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }



  /**
   * Count Type CommentCountOutputType
   */


  export type CommentCountOutputType = {
    commentLikes: number
    replies: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    commentLikes?: boolean | CommentCountOutputTypeCountCommentLikesArgs
    replies?: boolean | CommentCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountCommentLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
  }


  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }



  /**
   * Count Type ConversationCountOutputType
   */


  export type ConversationCountOutputType = {
    messages: number
  }

  export type ConversationCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | ConversationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     */
    select?: ConversationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }



  /**
   * Count Type AIProfileCountOutputType
   */


  export type AIProfileCountOutputType = {
    voiceTrainings: number
  }

  export type AIProfileCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    voiceTrainings?: boolean | AIProfileCountOutputTypeCountVoiceTrainingsArgs
  }

  // Custom InputTypes

  /**
   * AIProfileCountOutputType without action
   */
  export type AIProfileCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfileCountOutputType
     */
    select?: AIProfileCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AIProfileCountOutputType without action
   */
  export type AIProfileCountOutputTypeCountVoiceTrainingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VoiceTrainingWhereInput
  }



  /**
   * Count Type FacegateDeviceCountOutputType
   */


  export type FacegateDeviceCountOutputType = {
    records: number
    scheduleTargets: number
    jobs: number
  }

  export type FacegateDeviceCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    records?: boolean | FacegateDeviceCountOutputTypeCountRecordsArgs
    scheduleTargets?: boolean | FacegateDeviceCountOutputTypeCountScheduleTargetsArgs
    jobs?: boolean | FacegateDeviceCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes

  /**
   * FacegateDeviceCountOutputType without action
   */
  export type FacegateDeviceCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDeviceCountOutputType
     */
    select?: FacegateDeviceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FacegateDeviceCountOutputType without action
   */
  export type FacegateDeviceCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateRecordWhereInput
  }


  /**
   * FacegateDeviceCountOutputType without action
   */
  export type FacegateDeviceCountOutputTypeCountScheduleTargetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateScheduleTargetWhereInput
  }


  /**
   * FacegateDeviceCountOutputType without action
   */
  export type FacegateDeviceCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateJobWhereInput
  }



  /**
   * Count Type FacegatePersonCountOutputType
   */


  export type FacegatePersonCountOutputType = {
    records: number
  }

  export type FacegatePersonCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    records?: boolean | FacegatePersonCountOutputTypeCountRecordsArgs
  }

  // Custom InputTypes

  /**
   * FacegatePersonCountOutputType without action
   */
  export type FacegatePersonCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePersonCountOutputType
     */
    select?: FacegatePersonCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FacegatePersonCountOutputType without action
   */
  export type FacegatePersonCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateRecordWhereInput
  }



  /**
   * Count Type FacegateScheduleCountOutputType
   */


  export type FacegateScheduleCountOutputType = {
    targets: number
    jobs: number
  }

  export type FacegateScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    targets?: boolean | FacegateScheduleCountOutputTypeCountTargetsArgs
    jobs?: boolean | FacegateScheduleCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes

  /**
   * FacegateScheduleCountOutputType without action
   */
  export type FacegateScheduleCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleCountOutputType
     */
    select?: FacegateScheduleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FacegateScheduleCountOutputType without action
   */
  export type FacegateScheduleCountOutputTypeCountTargetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateScheduleTargetWhereInput
  }


  /**
   * FacegateScheduleCountOutputType without action
   */
  export type FacegateScheduleCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateJobWhereInput
  }



  /**
   * Count Type FacegateImageCountOutputType
   */


  export type FacegateImageCountOutputType = {
    schedules: number
  }

  export type FacegateImageCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    schedules?: boolean | FacegateImageCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes

  /**
   * FacegateImageCountOutputType without action
   */
  export type FacegateImageCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImageCountOutputType
     */
    select?: FacegateImageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FacegateImageCountOutputType without action
   */
  export type FacegateImageCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateScheduleWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> = $Types.GetResult<AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    apeBalance: number | null
    ttsPlaybackSpeed: number | null
    appessoBalance: number | null
  }

  export type UserSumAggregateOutputType = {
    apeBalance: number | null
    ttsPlaybackSpeed: number | null
    appessoBalance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    name: string | null
    gender: string | null
    birthDate: Date | null
    phoneNumber: string | null
    address: string | null
    bio: string | null
    website: string | null
    relationshipStatus: string | null
    emailVerified: Date | null
    image: string | null
    profilePhoto: string | null
    coverPhoto: string | null
    passwordHash: string | null
    walletAddress: string | null
    apeBalance: number | null
    walletCreatedAt: Date | null
    featured: boolean | null
    ttsModelId: string | null
    ttsVoiceId: string | null
    ttsPlaybackSpeed: number | null
    punked: boolean | null
    appessoBalance: number | null
    appessoBalanceUpdatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    name: string | null
    gender: string | null
    birthDate: Date | null
    phoneNumber: string | null
    address: string | null
    bio: string | null
    website: string | null
    relationshipStatus: string | null
    emailVerified: Date | null
    image: string | null
    profilePhoto: string | null
    coverPhoto: string | null
    passwordHash: string | null
    walletAddress: string | null
    apeBalance: number | null
    walletCreatedAt: Date | null
    featured: boolean | null
    ttsModelId: string | null
    ttsVoiceId: string | null
    ttsPlaybackSpeed: number | null
    punked: boolean | null
    appessoBalance: number | null
    appessoBalanceUpdatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    name: number
    gender: number
    birthDate: number
    phoneNumber: number
    address: number
    bio: number
    website: number
    relationshipStatus: number
    emailVerified: number
    image: number
    profilePhoto: number
    coverPhoto: number
    passwordHash: number
    walletAddress: number
    apeBalance: number
    walletCreatedAt: number
    featured: number
    ttsModelId: number
    ttsVoiceId: number
    ttsPlaybackSpeed: number
    punked: number
    appessoBalance: number
    appessoBalanceUpdatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    apeBalance?: true
    ttsPlaybackSpeed?: true
    appessoBalance?: true
  }

  export type UserSumAggregateInputType = {
    apeBalance?: true
    ttsPlaybackSpeed?: true
    appessoBalance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    name?: true
    gender?: true
    birthDate?: true
    phoneNumber?: true
    address?: true
    bio?: true
    website?: true
    relationshipStatus?: true
    emailVerified?: true
    image?: true
    profilePhoto?: true
    coverPhoto?: true
    passwordHash?: true
    walletAddress?: true
    apeBalance?: true
    walletCreatedAt?: true
    featured?: true
    ttsModelId?: true
    ttsVoiceId?: true
    ttsPlaybackSpeed?: true
    punked?: true
    appessoBalance?: true
    appessoBalanceUpdatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    name?: true
    gender?: true
    birthDate?: true
    phoneNumber?: true
    address?: true
    bio?: true
    website?: true
    relationshipStatus?: true
    emailVerified?: true
    image?: true
    profilePhoto?: true
    coverPhoto?: true
    passwordHash?: true
    walletAddress?: true
    apeBalance?: true
    walletCreatedAt?: true
    featured?: true
    ttsModelId?: true
    ttsVoiceId?: true
    ttsPlaybackSpeed?: true
    punked?: true
    appessoBalance?: true
    appessoBalanceUpdatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    name?: true
    gender?: true
    birthDate?: true
    phoneNumber?: true
    address?: true
    bio?: true
    website?: true
    relationshipStatus?: true
    emailVerified?: true
    image?: true
    profilePhoto?: true
    coverPhoto?: true
    passwordHash?: true
    walletAddress?: true
    apeBalance?: true
    walletCreatedAt?: true
    featured?: true
    ttsModelId?: true
    ttsVoiceId?: true
    ttsPlaybackSpeed?: true
    punked?: true
    appessoBalance?: true
    appessoBalanceUpdatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string | null
    email: string | null
    name: string | null
    gender: string | null
    birthDate: Date | null
    phoneNumber: string | null
    address: string | null
    bio: string | null
    website: string | null
    relationshipStatus: string | null
    emailVerified: Date | null
    image: string | null
    profilePhoto: string | null
    coverPhoto: string | null
    passwordHash: string | null
    walletAddress: string | null
    apeBalance: number
    walletCreatedAt: Date | null
    featured: boolean
    ttsModelId: string | null
    ttsVoiceId: string | null
    ttsPlaybackSpeed: number | null
    punked: boolean
    appessoBalance: number | null
    appessoBalanceUpdatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    name?: boolean
    gender?: boolean
    birthDate?: boolean
    phoneNumber?: boolean
    address?: boolean
    bio?: boolean
    website?: boolean
    relationshipStatus?: boolean
    emailVerified?: boolean
    image?: boolean
    profilePhoto?: boolean
    coverPhoto?: boolean
    passwordHash?: boolean
    walletAddress?: boolean
    apeBalance?: boolean
    walletCreatedAt?: boolean
    featured?: boolean
    ttsModelId?: boolean
    ttsVoiceId?: boolean
    ttsPlaybackSpeed?: boolean
    punked?: boolean
    appessoBalance?: boolean
    appessoBalanceUpdatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    post?: boolean | User$postArgs<ExtArgs>
    visualMedia?: boolean | User$visualMediaArgs<ExtArgs>
    postLikes?: boolean | User$postLikesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    commentLikes?: boolean | User$commentLikesArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    conversationsAsParticipant1?: boolean | User$conversationsAsParticipant1Args<ExtArgs>
    conversationsAsParticipant2?: boolean | User$conversationsAsParticipant2Args<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    sentTransactions?: boolean | User$sentTransactionsArgs<ExtArgs>
    receivedTransactions?: boolean | User$receivedTransactionsArgs<ExtArgs>
    aiProfile?: boolean | User$aiProfileArgs<ExtArgs>
    aiMemories?: boolean | User$aiMemoriesArgs<ExtArgs>
    facegatePerson?: boolean | User$facegatePersonArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    name?: boolean
    gender?: boolean
    birthDate?: boolean
    phoneNumber?: boolean
    address?: boolean
    bio?: boolean
    website?: boolean
    relationshipStatus?: boolean
    emailVerified?: boolean
    image?: boolean
    profilePhoto?: boolean
    coverPhoto?: boolean
    passwordHash?: boolean
    walletAddress?: boolean
    apeBalance?: boolean
    walletCreatedAt?: boolean
    featured?: boolean
    ttsModelId?: boolean
    ttsVoiceId?: boolean
    ttsPlaybackSpeed?: boolean
    punked?: boolean
    appessoBalance?: boolean
    appessoBalanceUpdatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    post?: boolean | User$postArgs<ExtArgs>
    visualMedia?: boolean | User$visualMediaArgs<ExtArgs>
    postLikes?: boolean | User$postLikesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    commentLikes?: boolean | User$commentLikesArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    conversationsAsParticipant1?: boolean | User$conversationsAsParticipant1Args<ExtArgs>
    conversationsAsParticipant2?: boolean | User$conversationsAsParticipant2Args<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    sentTransactions?: boolean | User$sentTransactionsArgs<ExtArgs>
    receivedTransactions?: boolean | User$receivedTransactionsArgs<ExtArgs>
    aiProfile?: boolean | User$aiProfileArgs<ExtArgs>
    aiMemories?: boolean | User$aiMemoriesArgs<ExtArgs>
    facegatePerson?: boolean | User$facegatePersonArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findMany'>| Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany'>| Null>;

    post<T extends User$postArgs<ExtArgs> = {}>(args?: Subset<T, User$postArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PostPayload<ExtArgs>, T, 'findMany'>| Null>;

    visualMedia<T extends User$visualMediaArgs<ExtArgs> = {}>(args?: Subset<T, User$visualMediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findMany'>| Null>;

    postLikes<T extends User$postLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$postLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findMany'>| Null>;

    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findMany'>| Null>;

    commentLikes<T extends User$commentLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$commentLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findMany'>| Null>;

    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findMany'>| Null>;

    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findMany'>| Null>;

    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findMany'>| Null>;

    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findMany'>| Null>;

    conversationsAsParticipant1<T extends User$conversationsAsParticipant1Args<ExtArgs> = {}>(args?: Subset<T, User$conversationsAsParticipant1Args<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findMany'>| Null>;

    conversationsAsParticipant2<T extends User$conversationsAsParticipant2Args<ExtArgs> = {}>(args?: Subset<T, User$conversationsAsParticipant2Args<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findMany'>| Null>;

    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>| Null>;

    sentTransactions<T extends User$sentTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findMany'>| Null>;

    receivedTransactions<T extends User$receivedTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findMany'>| Null>;

    aiProfile<T extends User$aiProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$aiProfileArgs<ExtArgs>>): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    aiMemories<T extends User$aiMemoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$aiMemoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'findMany'>| Null>;

    facegatePerson<T extends User$facegatePersonArgs<ExtArgs> = {}>(args?: Subset<T, User$facegatePersonArgs<ExtArgs>>): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'String'>
    readonly birthDate: FieldRef<"User", 'DateTime'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly website: FieldRef<"User", 'String'>
    readonly relationshipStatus: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly profilePhoto: FieldRef<"User", 'String'>
    readonly coverPhoto: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly apeBalance: FieldRef<"User", 'Float'>
    readonly walletCreatedAt: FieldRef<"User", 'DateTime'>
    readonly featured: FieldRef<"User", 'Boolean'>
    readonly ttsModelId: FieldRef<"User", 'String'>
    readonly ttsVoiceId: FieldRef<"User", 'String'>
    readonly ttsPlaybackSpeed: FieldRef<"User", 'Float'>
    readonly punked: FieldRef<"User", 'Boolean'>
    readonly appessoBalance: FieldRef<"User", 'Float'>
    readonly appessoBalanceUpdatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * User.post
   */
  export type User$postArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }


  /**
   * User.visualMedia
   */
  export type User$visualMediaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    where?: VisualMediaWhereInput
    orderBy?: VisualMediaOrderByWithRelationInput | VisualMediaOrderByWithRelationInput[]
    cursor?: VisualMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisualMediaScalarFieldEnum | VisualMediaScalarFieldEnum[]
  }


  /**
   * User.postLikes
   */
  export type User$postLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }


  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * User.commentLikes
   */
  export type User$commentLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    cursor?: CommentLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }


  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }


  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }


  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * User.conversationsAsParticipant1
   */
  export type User$conversationsAsParticipant1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * User.conversationsAsParticipant2
   */
  export type User$conversationsAsParticipant2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User.sentTransactions
   */
  export type User$sentTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    cursor?: WalletTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }


  /**
   * User.receivedTransactions
   */
  export type User$receivedTransactionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    cursor?: WalletTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }


  /**
   * User.aiProfile
   */
  export type User$aiProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    where?: AIProfileWhereInput
  }


  /**
   * User.aiMemories
   */
  export type User$aiMemoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    where?: AIMemoryWhereInput
    orderBy?: AIMemoryOrderByWithRelationInput | AIMemoryOrderByWithRelationInput[]
    cursor?: AIMemoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AIMemoryScalarFieldEnum | AIMemoryScalarFieldEnum[]
  }


  /**
   * User.facegatePerson
   */
  export type User$facegatePersonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    where?: FacegatePersonWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenArgs> = $Types.GetResult<VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }



  /**
   * Model Follow
   */


  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _avg: FollowAvgAggregateOutputType | null
    _sum: FollowSumAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowAvgAggregateOutputType = {
    id: number | null
  }

  export type FollowSumAggregateOutputType = {
    id: number | null
  }

  export type FollowMinAggregateOutputType = {
    id: number | null
    followerId: string | null
    followingId: string | null
  }

  export type FollowMaxAggregateOutputType = {
    id: number | null
    followerId: string | null
    followingId: string | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    followerId: number
    followingId: number
    _all: number
  }


  export type FollowAvgAggregateInputType = {
    id?: true
  }

  export type FollowSumAggregateInputType = {
    id?: true
  }

  export type FollowMinAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _avg?: FollowAvgAggregateInputType
    _sum?: FollowSumAggregateInputType
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }


  export type FollowGroupByOutputType = {
    id: number
    followerId: string
    followingId: string
    _count: FollowCountAggregateOutputType | null
    _avg: FollowAvgAggregateOutputType | null
    _sum: FollowSumAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | UserArgs<ExtArgs>
    following?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectScalar = {
    id?: boolean
    followerId?: boolean
    followingId?: boolean
  }

  export type FollowInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    follower?: boolean | UserArgs<ExtArgs>
    following?: boolean | UserArgs<ExtArgs>
  }


  type FollowGetPayload<S extends boolean | null | undefined | FollowArgs> = $Types.GetResult<FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FollowFindManyArgs, 'select' | 'include'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Follow that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FollowFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FollowPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
    **/
    create<T extends FollowCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FollowCreateArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
    **/
    delete<T extends FollowDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
    **/
    upsert<T extends FollowUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>
    ): Prisma__FollowClient<$Types.GetResult<FollowPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    follower<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    following<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Follow model
   */ 
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'Int'>
    readonly followerId: FieldRef<"Follow", 'String'>
    readonly followingId: FieldRef<"Follow", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }


  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }


  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }


  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }


  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
  }


  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }


  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
  }


  /**
   * Follow without action
   */
  export type FollowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude<ExtArgs> | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    rewardAmount: number | null
    initialPaymentAmount: number | null
    finalPaymentAmount: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    rewardAmount: number | null
    initialPaymentAmount: number | null
    finalPaymentAmount: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    userId: string | null
    isTask: boolean | null
    rewardAmount: number | null
    taskStatus: string | null
    completedBy: string | null
    completedAt: Date | null
    initialPaymentAmount: number | null
    initialPaymentAt: Date | null
    finalPaymentAmount: number | null
    finalPaymentAt: Date | null
    completionRequestedAt: Date | null
    completionConfirmedAt: Date | null
    audioUrl: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    userId: string | null
    isTask: boolean | null
    rewardAmount: number | null
    taskStatus: string | null
    completedBy: string | null
    completedAt: Date | null
    initialPaymentAmount: number | null
    initialPaymentAt: Date | null
    finalPaymentAmount: number | null
    finalPaymentAt: Date | null
    completionRequestedAt: Date | null
    completionConfirmedAt: Date | null
    audioUrl: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    userId: number
    isTask: number
    rewardAmount: number
    taskStatus: number
    completedBy: number
    completedAt: number
    initialPaymentAmount: number
    initialPaymentAt: number
    finalPaymentAmount: number
    finalPaymentAt: number
    completionRequestedAt: number
    completionConfirmedAt: number
    audioUrl: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    rewardAmount?: true
    initialPaymentAmount?: true
    finalPaymentAmount?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    rewardAmount?: true
    initialPaymentAmount?: true
    finalPaymentAmount?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    userId?: true
    isTask?: true
    rewardAmount?: true
    taskStatus?: true
    completedBy?: true
    completedAt?: true
    initialPaymentAmount?: true
    initialPaymentAt?: true
    finalPaymentAmount?: true
    finalPaymentAt?: true
    completionRequestedAt?: true
    completionConfirmedAt?: true
    audioUrl?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    userId?: true
    isTask?: true
    rewardAmount?: true
    taskStatus?: true
    completedBy?: true
    completedAt?: true
    initialPaymentAmount?: true
    initialPaymentAt?: true
    finalPaymentAmount?: true
    finalPaymentAt?: true
    completionRequestedAt?: true
    completionConfirmedAt?: true
    audioUrl?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    userId?: true
    isTask?: true
    rewardAmount?: true
    taskStatus?: true
    completedBy?: true
    completedAt?: true
    initialPaymentAmount?: true
    initialPaymentAt?: true
    finalPaymentAmount?: true
    finalPaymentAt?: true
    completionRequestedAt?: true
    completionConfirmedAt?: true
    audioUrl?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    content: string | null
    createdAt: Date
    userId: string
    isTask: boolean
    rewardAmount: number
    taskStatus: string | null
    completedBy: string | null
    completedAt: Date | null
    initialPaymentAmount: number | null
    initialPaymentAt: Date | null
    finalPaymentAmount: number | null
    finalPaymentAt: Date | null
    completionRequestedAt: Date | null
    completionConfirmedAt: Date | null
    audioUrl: string | null
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    userId?: boolean
    isTask?: boolean
    rewardAmount?: boolean
    taskStatus?: boolean
    completedBy?: boolean
    completedAt?: boolean
    initialPaymentAmount?: boolean
    initialPaymentAt?: boolean
    finalPaymentAmount?: boolean
    finalPaymentAt?: boolean
    completionRequestedAt?: boolean
    completionConfirmedAt?: boolean
    audioUrl?: boolean
    visualMedia?: boolean | Post$visualMediaArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
    postLikes?: boolean | Post$postLikesArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    userId?: boolean
    isTask?: boolean
    rewardAmount?: boolean
    taskStatus?: boolean
    completedBy?: boolean
    completedAt?: boolean
    initialPaymentAmount?: boolean
    initialPaymentAt?: boolean
    finalPaymentAmount?: boolean
    finalPaymentAt?: boolean
    completionRequestedAt?: boolean
    completionConfirmedAt?: boolean
    audioUrl?: boolean
  }

  export type PostInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    visualMedia?: boolean | Post$visualMediaArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
    postLikes?: boolean | Post$postLikesArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeArgs<ExtArgs>
  }


  type PostGetPayload<S extends boolean | null | undefined | PostArgs> = $Types.GetResult<PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PostPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostCreateArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostDeleteArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpdateArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpsertArgs<ExtArgs>>
    ): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    visualMedia<T extends Post$visualMediaArgs<ExtArgs> = {}>(args?: Subset<T, Post$visualMediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findMany'>| Null>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    postLikes<T extends Post$postLikesArgs<ExtArgs> = {}>(args?: Subset<T, Post$postLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findMany'>| Null>;

    comments<T extends Post$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly content: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly userId: FieldRef<"Post", 'String'>
    readonly isTask: FieldRef<"Post", 'Boolean'>
    readonly rewardAmount: FieldRef<"Post", 'Float'>
    readonly taskStatus: FieldRef<"Post", 'String'>
    readonly completedBy: FieldRef<"Post", 'String'>
    readonly completedAt: FieldRef<"Post", 'DateTime'>
    readonly initialPaymentAmount: FieldRef<"Post", 'Float'>
    readonly initialPaymentAt: FieldRef<"Post", 'DateTime'>
    readonly finalPaymentAmount: FieldRef<"Post", 'Float'>
    readonly finalPaymentAt: FieldRef<"Post", 'DateTime'>
    readonly completionRequestedAt: FieldRef<"Post", 'DateTime'>
    readonly completionConfirmedAt: FieldRef<"Post", 'DateTime'>
    readonly audioUrl: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }


  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }


  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }


  /**
   * Post.visualMedia
   */
  export type Post$visualMediaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    where?: VisualMediaWhereInput
    orderBy?: VisualMediaOrderByWithRelationInput | VisualMediaOrderByWithRelationInput[]
    cursor?: VisualMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VisualMediaScalarFieldEnum | VisualMediaScalarFieldEnum[]
  }


  /**
   * Post.postLikes
   */
  export type Post$postLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }


  /**
   * Post.comments
   */
  export type Post$commentsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Post without action
   */
  export type PostArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude<ExtArgs> | null
  }



  /**
   * Model PostLike
   */


  export type AggregatePostLike = {
    _count: PostLikeCountAggregateOutputType | null
    _avg: PostLikeAvgAggregateOutputType | null
    _sum: PostLikeSumAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  export type PostLikeAvgAggregateOutputType = {
    id: number | null
    postId: number | null
  }

  export type PostLikeSumAggregateOutputType = {
    id: number | null
    postId: number | null
  }

  export type PostLikeMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: string | null
    postId: number | null
  }

  export type PostLikeMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: string | null
    postId: number | null
  }

  export type PostLikeCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    postId: number
    _all: number
  }


  export type PostLikeAvgAggregateInputType = {
    id?: true
    postId?: true
  }

  export type PostLikeSumAggregateInputType = {
    id?: true
    postId?: true
  }

  export type PostLikeMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    postId?: true
  }

  export type PostLikeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    postId?: true
  }

  export type PostLikeCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    postId?: true
    _all?: true
  }

  export type PostLikeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostLike to aggregate.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostLikes
    **/
    _count?: true | PostLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostLikeMaxAggregateInputType
  }

  export type GetPostLikeAggregateType<T extends PostLikeAggregateArgs> = {
        [P in keyof T & keyof AggregatePostLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostLike[P]>
      : GetScalarType<T[P], AggregatePostLike[P]>
  }




  export type PostLikeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithAggregationInput | PostLikeOrderByWithAggregationInput[]
    by: PostLikeScalarFieldEnum[] | PostLikeScalarFieldEnum
    having?: PostLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostLikeCountAggregateInputType | true
    _avg?: PostLikeAvgAggregateInputType
    _sum?: PostLikeSumAggregateInputType
    _min?: PostLikeMinAggregateInputType
    _max?: PostLikeMaxAggregateInputType
  }


  export type PostLikeGroupByOutputType = {
    id: number
    createdAt: Date
    userId: string
    postId: number
    _count: PostLikeCountAggregateOutputType | null
    _avg: PostLikeAvgAggregateOutputType | null
    _sum: PostLikeSumAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  type GetPostLikeGroupByPayload<T extends PostLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
            : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
        }
      >
    >


  export type PostLikeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    post?: boolean | PostArgs<ExtArgs>
  }, ExtArgs["result"]["postLike"]>

  export type PostLikeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
  }

  export type PostLikeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    post?: boolean | PostArgs<ExtArgs>
  }


  type PostLikeGetPayload<S extends boolean | null | undefined | PostLikeArgs> = $Types.GetResult<PostLikePayload, S>

  type PostLikeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PostLikeFindManyArgs, 'select' | 'include'> & {
      select?: PostLikeCountAggregateInputType | true
    }

  export interface PostLikeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostLike'], meta: { name: 'PostLike' } }
    /**
     * Find zero or one PostLike that matches the filter.
     * @param {PostLikeFindUniqueArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostLikeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeFindUniqueArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PostLike that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostLikeFindUniqueOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostLikeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PostLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostLikeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindFirstArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PostLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostLikeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PostLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostLikes
     * const postLikes = await prisma.postLike.findMany()
     * 
     * // Get first 10 PostLikes
     * const postLikes = await prisma.postLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postLikeWithIdOnly = await prisma.postLike.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostLikeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PostLike.
     * @param {PostLikeCreateArgs} args - Arguments to create a PostLike.
     * @example
     * // Create one PostLike
     * const PostLike = await prisma.postLike.create({
     *   data: {
     *     // ... data to create a PostLike
     *   }
     * })
     * 
    **/
    create<T extends PostLikeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeCreateArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a PostLike.
     * @param {PostLikeDeleteArgs} args - Arguments to delete one PostLike.
     * @example
     * // Delete one PostLike
     * const PostLike = await prisma.postLike.delete({
     *   where: {
     *     // ... filter to delete one PostLike
     *   }
     * })
     * 
    **/
    delete<T extends PostLikeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeDeleteArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PostLike.
     * @param {PostLikeUpdateArgs} args - Arguments to update one PostLike.
     * @example
     * // Update one PostLike
     * const postLike = await prisma.postLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostLikeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeUpdateArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PostLikes.
     * @param {PostLikeDeleteManyArgs} args - Arguments to filter PostLikes to delete.
     * @example
     * // Delete a few PostLikes
     * const { count } = await prisma.postLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostLikeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostLikes
     * const postLike = await prisma.postLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostLikeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostLike.
     * @param {PostLikeUpsertArgs} args - Arguments to update or create a PostLike.
     * @example
     * // Update or create a PostLike
     * const postLike = await prisma.postLike.upsert({
     *   create: {
     *     // ... data to create a PostLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostLike we want to update
     *   }
     * })
    **/
    upsert<T extends PostLikeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeUpsertArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Types.GetResult<PostLikePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeCountArgs} args - Arguments to filter PostLikes to count.
     * @example
     * // Count the number of PostLikes
     * const count = await prisma.postLike.count({
     *   where: {
     *     // ... the filter for the PostLikes we want to count
     *   }
     * })
    **/
    count<T extends PostLikeCountArgs>(
      args?: Subset<T, PostLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostLikeAggregateArgs>(args: Subset<T, PostLikeAggregateArgs>): Prisma.PrismaPromise<GetPostLikeAggregateType<T>>

    /**
     * Group by PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostLikeGroupByArgs['orderBy'] }
        : { orderBy?: PostLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostLike model
   */
  readonly fields: PostLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostLikeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    post<T extends PostArgs<ExtArgs> = {}>(args?: Subset<T, PostArgs<ExtArgs>>): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the PostLike model
   */ 
  interface PostLikeFieldRefs {
    readonly id: FieldRef<"PostLike", 'Int'>
    readonly createdAt: FieldRef<"PostLike", 'DateTime'>
    readonly userId: FieldRef<"PostLike", 'String'>
    readonly postId: FieldRef<"PostLike", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * PostLike findUnique
   */
  export type PostLikeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike findUniqueOrThrow
   */
  export type PostLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike findFirst
   */
  export type PostLikeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }


  /**
   * PostLike findFirstOrThrow
   */
  export type PostLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }


  /**
   * PostLike findMany
   */
  export type PostLikeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLikes to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }


  /**
   * PostLike create
   */
  export type PostLikeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a PostLike.
     */
    data: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
  }


  /**
   * PostLike update
   */
  export type PostLikeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a PostLike.
     */
    data: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
    /**
     * Choose, which PostLike to update.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike updateMany
   */
  export type PostLikeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostLikes.
     */
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyInput>
    /**
     * Filter which PostLikes to update
     */
    where?: PostLikeWhereInput
  }


  /**
   * PostLike upsert
   */
  export type PostLikeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the PostLike to update in case it exists.
     */
    where: PostLikeWhereUniqueInput
    /**
     * In case the PostLike found by the `where` argument doesn't exist, create a new PostLike with this data.
     */
    create: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
    /**
     * In case the PostLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
  }


  /**
   * PostLike delete
   */
  export type PostLikeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter which PostLike to delete.
     */
    where: PostLikeWhereUniqueInput
  }


  /**
   * PostLike deleteMany
   */
  export type PostLikeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostLikes to delete
     */
    where?: PostLikeWhereInput
  }


  /**
   * PostLike without action
   */
  export type PostLikeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostLikeInclude<ExtArgs> | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    parentId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    postId: number | null
    parentId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    userId: string | null
    postId: number | null
    parentId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    userId: string | null
    postId: number | null
    parentId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    userId: number
    postId: number
    parentId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    postId?: true
    parentId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    postId?: true
    parentId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    userId?: true
    postId?: true
    parentId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    userId?: true
    postId?: true
    parentId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    userId?: true
    postId?: true
    parentId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    content: string
    createdAt: Date
    userId: string
    postId: number
    parentId: number | null
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    parentId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    commentLikes?: boolean | Comment$commentLikesArgs<ExtArgs>
    post?: boolean | PostArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    userId?: boolean
    postId?: boolean
    parentId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    commentLikes?: boolean | Comment$commentLikesArgs<ExtArgs>
    post?: boolean | PostArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeArgs<ExtArgs>
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentArgs> = $Types.GetResult<CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    commentLikes<T extends Comment$commentLikesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$commentLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findMany'>| Null>;

    post<T extends PostArgs<ExtArgs> = {}>(args?: Subset<T, PostArgs<ExtArgs>>): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    parent<T extends Comment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentArgs<ExtArgs>>): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    replies<T extends Comment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly postId: FieldRef<"Comment", 'Int'>
    readonly parentId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment.commentLikes
   */
  export type Comment$commentLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    cursor?: CommentLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }


  /**
   * Comment.parent
   */
  export type Comment$parentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }


  /**
   * Comment.replies
   */
  export type Comment$repliesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment without action
   */
  export type CommentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
  }



  /**
   * Model CommentLike
   */


  export type AggregateCommentLike = {
    _count: CommentLikeCountAggregateOutputType | null
    _avg: CommentLikeAvgAggregateOutputType | null
    _sum: CommentLikeSumAggregateOutputType | null
    _min: CommentLikeMinAggregateOutputType | null
    _max: CommentLikeMaxAggregateOutputType | null
  }

  export type CommentLikeAvgAggregateOutputType = {
    id: number | null
    commentId: number | null
  }

  export type CommentLikeSumAggregateOutputType = {
    id: number | null
    commentId: number | null
  }

  export type CommentLikeMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: string | null
    commentId: number | null
  }

  export type CommentLikeMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: string | null
    commentId: number | null
  }

  export type CommentLikeCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    commentId: number
    _all: number
  }


  export type CommentLikeAvgAggregateInputType = {
    id?: true
    commentId?: true
  }

  export type CommentLikeSumAggregateInputType = {
    id?: true
    commentId?: true
  }

  export type CommentLikeMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    commentId?: true
  }

  export type CommentLikeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    commentId?: true
  }

  export type CommentLikeCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    commentId?: true
    _all?: true
  }

  export type CommentLikeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentLike to aggregate.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommentLikes
    **/
    _count?: true | CommentLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentLikeMaxAggregateInputType
  }

  export type GetCommentLikeAggregateType<T extends CommentLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentLike[P]>
      : GetScalarType<T[P], AggregateCommentLike[P]>
  }




  export type CommentLikeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithAggregationInput | CommentLikeOrderByWithAggregationInput[]
    by: CommentLikeScalarFieldEnum[] | CommentLikeScalarFieldEnum
    having?: CommentLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentLikeCountAggregateInputType | true
    _avg?: CommentLikeAvgAggregateInputType
    _sum?: CommentLikeSumAggregateInputType
    _min?: CommentLikeMinAggregateInputType
    _max?: CommentLikeMaxAggregateInputType
  }


  export type CommentLikeGroupByOutputType = {
    id: number
    createdAt: Date
    userId: string
    commentId: number
    _count: CommentLikeCountAggregateOutputType | null
    _avg: CommentLikeAvgAggregateOutputType | null
    _sum: CommentLikeSumAggregateOutputType | null
    _min: CommentLikeMinAggregateOutputType | null
    _max: CommentLikeMaxAggregateOutputType | null
  }

  type GetCommentLikeGroupByPayload<T extends CommentLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
            : GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
        }
      >
    >


  export type CommentLikeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    commentId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    comment?: boolean | CommentArgs<ExtArgs>
  }, ExtArgs["result"]["commentLike"]>

  export type CommentLikeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    commentId?: boolean
  }

  export type CommentLikeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    comment?: boolean | CommentArgs<ExtArgs>
  }


  type CommentLikeGetPayload<S extends boolean | null | undefined | CommentLikeArgs> = $Types.GetResult<CommentLikePayload, S>

  type CommentLikeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CommentLikeFindManyArgs, 'select' | 'include'> & {
      select?: CommentLikeCountAggregateInputType | true
    }

  export interface CommentLikeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommentLike'], meta: { name: 'CommentLike' } }
    /**
     * Find zero or one CommentLike that matches the filter.
     * @param {CommentLikeFindUniqueArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentLikeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommentLike that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentLikeFindUniqueOrThrowArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentLikeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommentLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindFirstArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentLikeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindFirstArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommentLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindFirstOrThrowArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentLikeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommentLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentLikes
     * const commentLikes = await prisma.commentLike.findMany()
     * 
     * // Get first 10 CommentLikes
     * const commentLikes = await prisma.commentLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentLikeWithIdOnly = await prisma.commentLike.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentLikeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommentLike.
     * @param {CommentLikeCreateArgs} args - Arguments to create a CommentLike.
     * @example
     * // Create one CommentLike
     * const CommentLike = await prisma.commentLike.create({
     *   data: {
     *     // ... data to create a CommentLike
     *   }
     * })
     * 
    **/
    create<T extends CommentLikeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeCreateArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a CommentLike.
     * @param {CommentLikeDeleteArgs} args - Arguments to delete one CommentLike.
     * @example
     * // Delete one CommentLike
     * const CommentLike = await prisma.commentLike.delete({
     *   where: {
     *     // ... filter to delete one CommentLike
     *   }
     * })
     * 
    **/
    delete<T extends CommentLikeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeDeleteArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommentLike.
     * @param {CommentLikeUpdateArgs} args - Arguments to update one CommentLike.
     * @example
     * // Update one CommentLike
     * const commentLike = await prisma.commentLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentLikeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeUpdateArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommentLikes.
     * @param {CommentLikeDeleteManyArgs} args - Arguments to filter CommentLikes to delete.
     * @example
     * // Delete a few CommentLikes
     * const { count } = await prisma.commentLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentLikeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentLikes
     * const commentLike = await prisma.commentLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentLikeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommentLike.
     * @param {CommentLikeUpsertArgs} args - Arguments to update or create a CommentLike.
     * @example
     * // Update or create a CommentLike
     * const commentLike = await prisma.commentLike.upsert({
     *   create: {
     *     // ... data to create a CommentLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentLike we want to update
     *   }
     * })
    **/
    upsert<T extends CommentLikeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeUpsertArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Types.GetResult<CommentLikePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommentLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeCountArgs} args - Arguments to filter CommentLikes to count.
     * @example
     * // Count the number of CommentLikes
     * const count = await prisma.commentLike.count({
     *   where: {
     *     // ... the filter for the CommentLikes we want to count
     *   }
     * })
    **/
    count<T extends CommentLikeCountArgs>(
      args?: Subset<T, CommentLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentLikeAggregateArgs>(args: Subset<T, CommentLikeAggregateArgs>): Prisma.PrismaPromise<GetCommentLikeAggregateType<T>>

    /**
     * Group by CommentLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentLikeGroupByArgs['orderBy'] }
        : { orderBy?: CommentLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommentLike model
   */
  readonly fields: CommentLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommentLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentLikeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    comment<T extends CommentArgs<ExtArgs> = {}>(args?: Subset<T, CommentArgs<ExtArgs>>): Prisma__CommentClient<$Types.GetResult<CommentPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the CommentLike model
   */ 
  interface CommentLikeFieldRefs {
    readonly id: FieldRef<"CommentLike", 'Int'>
    readonly createdAt: FieldRef<"CommentLike", 'DateTime'>
    readonly userId: FieldRef<"CommentLike", 'String'>
    readonly commentId: FieldRef<"CommentLike", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CommentLike findUnique
   */
  export type CommentLikeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where: CommentLikeWhereUniqueInput
  }


  /**
   * CommentLike findUniqueOrThrow
   */
  export type CommentLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where: CommentLikeWhereUniqueInput
  }


  /**
   * CommentLike findFirst
   */
  export type CommentLikeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentLikes.
     */
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }


  /**
   * CommentLike findFirstOrThrow
   */
  export type CommentLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentLikes.
     */
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }


  /**
   * CommentLike findMany
   */
  export type CommentLikeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLikes to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }


  /**
   * CommentLike create
   */
  export type CommentLikeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a CommentLike.
     */
    data: XOR<CommentLikeCreateInput, CommentLikeUncheckedCreateInput>
  }


  /**
   * CommentLike update
   */
  export type CommentLikeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a CommentLike.
     */
    data: XOR<CommentLikeUpdateInput, CommentLikeUncheckedUpdateInput>
    /**
     * Choose, which CommentLike to update.
     */
    where: CommentLikeWhereUniqueInput
  }


  /**
   * CommentLike updateMany
   */
  export type CommentLikeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommentLikes.
     */
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyInput>
    /**
     * Filter which CommentLikes to update
     */
    where?: CommentLikeWhereInput
  }


  /**
   * CommentLike upsert
   */
  export type CommentLikeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the CommentLike to update in case it exists.
     */
    where: CommentLikeWhereUniqueInput
    /**
     * In case the CommentLike found by the `where` argument doesn't exist, create a new CommentLike with this data.
     */
    create: XOR<CommentLikeCreateInput, CommentLikeUncheckedCreateInput>
    /**
     * In case the CommentLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentLikeUpdateInput, CommentLikeUncheckedUpdateInput>
  }


  /**
   * CommentLike delete
   */
  export type CommentLikeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter which CommentLike to delete.
     */
    where: CommentLikeWhereUniqueInput
  }


  /**
   * CommentLike deleteMany
   */
  export type CommentLikeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentLikes to delete
     */
    where?: CommentLikeWhereInput
  }


  /**
   * CommentLike without action
   */
  export type CommentLikeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentLikeInclude<ExtArgs> | null
  }



  /**
   * Model VisualMedia
   */


  export type AggregateVisualMedia = {
    _count: VisualMediaCountAggregateOutputType | null
    _avg: VisualMediaAvgAggregateOutputType | null
    _sum: VisualMediaSumAggregateOutputType | null
    _min: VisualMediaMinAggregateOutputType | null
    _max: VisualMediaMaxAggregateOutputType | null
  }

  export type VisualMediaAvgAggregateOutputType = {
    id: number | null
    postId: number | null
  }

  export type VisualMediaSumAggregateOutputType = {
    id: number | null
    postId: number | null
  }

  export type VisualMediaMinAggregateOutputType = {
    id: number | null
    type: string | null
    fileName: string | null
    uploadedAt: Date | null
    userId: string | null
    postId: number | null
  }

  export type VisualMediaMaxAggregateOutputType = {
    id: number | null
    type: string | null
    fileName: string | null
    uploadedAt: Date | null
    userId: string | null
    postId: number | null
  }

  export type VisualMediaCountAggregateOutputType = {
    id: number
    type: number
    fileName: number
    uploadedAt: number
    userId: number
    postId: number
    _all: number
  }


  export type VisualMediaAvgAggregateInputType = {
    id?: true
    postId?: true
  }

  export type VisualMediaSumAggregateInputType = {
    id?: true
    postId?: true
  }

  export type VisualMediaMinAggregateInputType = {
    id?: true
    type?: true
    fileName?: true
    uploadedAt?: true
    userId?: true
    postId?: true
  }

  export type VisualMediaMaxAggregateInputType = {
    id?: true
    type?: true
    fileName?: true
    uploadedAt?: true
    userId?: true
    postId?: true
  }

  export type VisualMediaCountAggregateInputType = {
    id?: true
    type?: true
    fileName?: true
    uploadedAt?: true
    userId?: true
    postId?: true
    _all?: true
  }

  export type VisualMediaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisualMedia to aggregate.
     */
    where?: VisualMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMedias to fetch.
     */
    orderBy?: VisualMediaOrderByWithRelationInput | VisualMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisualMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisualMedias
    **/
    _count?: true | VisualMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisualMediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisualMediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisualMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisualMediaMaxAggregateInputType
  }

  export type GetVisualMediaAggregateType<T extends VisualMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateVisualMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisualMedia[P]>
      : GetScalarType<T[P], AggregateVisualMedia[P]>
  }




  export type VisualMediaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VisualMediaWhereInput
    orderBy?: VisualMediaOrderByWithAggregationInput | VisualMediaOrderByWithAggregationInput[]
    by: VisualMediaScalarFieldEnum[] | VisualMediaScalarFieldEnum
    having?: VisualMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisualMediaCountAggregateInputType | true
    _avg?: VisualMediaAvgAggregateInputType
    _sum?: VisualMediaSumAggregateInputType
    _min?: VisualMediaMinAggregateInputType
    _max?: VisualMediaMaxAggregateInputType
  }


  export type VisualMediaGroupByOutputType = {
    id: number
    type: string
    fileName: string
    uploadedAt: Date
    userId: string
    postId: number
    _count: VisualMediaCountAggregateOutputType | null
    _avg: VisualMediaAvgAggregateOutputType | null
    _sum: VisualMediaSumAggregateOutputType | null
    _min: VisualMediaMinAggregateOutputType | null
    _max: VisualMediaMaxAggregateOutputType | null
  }

  type GetVisualMediaGroupByPayload<T extends VisualMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisualMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisualMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisualMediaGroupByOutputType[P]>
            : GetScalarType<T[P], VisualMediaGroupByOutputType[P]>
        }
      >
    >


  export type VisualMediaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileName?: boolean
    uploadedAt?: boolean
    userId?: boolean
    postId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    post?: boolean | PostArgs<ExtArgs>
  }, ExtArgs["result"]["visualMedia"]>

  export type VisualMediaSelectScalar = {
    id?: boolean
    type?: boolean
    fileName?: boolean
    uploadedAt?: boolean
    userId?: boolean
    postId?: boolean
  }

  export type VisualMediaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    post?: boolean | PostArgs<ExtArgs>
  }


  type VisualMediaGetPayload<S extends boolean | null | undefined | VisualMediaArgs> = $Types.GetResult<VisualMediaPayload, S>

  type VisualMediaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VisualMediaFindManyArgs, 'select' | 'include'> & {
      select?: VisualMediaCountAggregateInputType | true
    }

  export interface VisualMediaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VisualMedia'], meta: { name: 'VisualMedia' } }
    /**
     * Find zero or one VisualMedia that matches the filter.
     * @param {VisualMediaFindUniqueArgs} args - Arguments to find a VisualMedia
     * @example
     * // Get one VisualMedia
     * const visualMedia = await prisma.visualMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VisualMediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaFindUniqueArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VisualMedia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VisualMediaFindUniqueOrThrowArgs} args - Arguments to find a VisualMedia
     * @example
     * // Get one VisualMedia
     * const visualMedia = await prisma.visualMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VisualMediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VisualMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaFindFirstArgs} args - Arguments to find a VisualMedia
     * @example
     * // Get one VisualMedia
     * const visualMedia = await prisma.visualMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VisualMediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaFindFirstArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VisualMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaFindFirstOrThrowArgs} args - Arguments to find a VisualMedia
     * @example
     * // Get one VisualMedia
     * const visualMedia = await prisma.visualMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VisualMediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VisualMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisualMedias
     * const visualMedias = await prisma.visualMedia.findMany()
     * 
     * // Get first 10 VisualMedias
     * const visualMedias = await prisma.visualMedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visualMediaWithIdOnly = await prisma.visualMedia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VisualMediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VisualMedia.
     * @param {VisualMediaCreateArgs} args - Arguments to create a VisualMedia.
     * @example
     * // Create one VisualMedia
     * const VisualMedia = await prisma.visualMedia.create({
     *   data: {
     *     // ... data to create a VisualMedia
     *   }
     * })
     * 
    **/
    create<T extends VisualMediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaCreateArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a VisualMedia.
     * @param {VisualMediaDeleteArgs} args - Arguments to delete one VisualMedia.
     * @example
     * // Delete one VisualMedia
     * const VisualMedia = await prisma.visualMedia.delete({
     *   where: {
     *     // ... filter to delete one VisualMedia
     *   }
     * })
     * 
    **/
    delete<T extends VisualMediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaDeleteArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VisualMedia.
     * @param {VisualMediaUpdateArgs} args - Arguments to update one VisualMedia.
     * @example
     * // Update one VisualMedia
     * const visualMedia = await prisma.visualMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VisualMediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaUpdateArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VisualMedias.
     * @param {VisualMediaDeleteManyArgs} args - Arguments to filter VisualMedias to delete.
     * @example
     * // Delete a few VisualMedias
     * const { count } = await prisma.visualMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VisualMediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisualMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisualMedias
     * const visualMedia = await prisma.visualMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VisualMediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisualMedia.
     * @param {VisualMediaUpsertArgs} args - Arguments to update or create a VisualMedia.
     * @example
     * // Update or create a VisualMedia
     * const visualMedia = await prisma.visualMedia.upsert({
     *   create: {
     *     // ... data to create a VisualMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisualMedia we want to update
     *   }
     * })
    **/
    upsert<T extends VisualMediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaUpsertArgs<ExtArgs>>
    ): Prisma__VisualMediaClient<$Types.GetResult<VisualMediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VisualMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaCountArgs} args - Arguments to filter VisualMedias to count.
     * @example
     * // Count the number of VisualMedias
     * const count = await prisma.visualMedia.count({
     *   where: {
     *     // ... the filter for the VisualMedias we want to count
     *   }
     * })
    **/
    count<T extends VisualMediaCountArgs>(
      args?: Subset<T, VisualMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisualMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisualMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisualMediaAggregateArgs>(args: Subset<T, VisualMediaAggregateArgs>): Prisma.PrismaPromise<GetVisualMediaAggregateType<T>>

    /**
     * Group by VisualMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisualMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisualMediaGroupByArgs['orderBy'] }
        : { orderBy?: VisualMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisualMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisualMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VisualMedia model
   */
  readonly fields: VisualMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VisualMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VisualMediaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    post<T extends PostArgs<ExtArgs> = {}>(args?: Subset<T, PostArgs<ExtArgs>>): Prisma__PostClient<$Types.GetResult<PostPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the VisualMedia model
   */ 
  interface VisualMediaFieldRefs {
    readonly id: FieldRef<"VisualMedia", 'Int'>
    readonly type: FieldRef<"VisualMedia", 'String'>
    readonly fileName: FieldRef<"VisualMedia", 'String'>
    readonly uploadedAt: FieldRef<"VisualMedia", 'DateTime'>
    readonly userId: FieldRef<"VisualMedia", 'String'>
    readonly postId: FieldRef<"VisualMedia", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * VisualMedia findUnique
   */
  export type VisualMediaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * Filter, which VisualMedia to fetch.
     */
    where: VisualMediaWhereUniqueInput
  }


  /**
   * VisualMedia findUniqueOrThrow
   */
  export type VisualMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * Filter, which VisualMedia to fetch.
     */
    where: VisualMediaWhereUniqueInput
  }


  /**
   * VisualMedia findFirst
   */
  export type VisualMediaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * Filter, which VisualMedia to fetch.
     */
    where?: VisualMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMedias to fetch.
     */
    orderBy?: VisualMediaOrderByWithRelationInput | VisualMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisualMedias.
     */
    cursor?: VisualMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisualMedias.
     */
    distinct?: VisualMediaScalarFieldEnum | VisualMediaScalarFieldEnum[]
  }


  /**
   * VisualMedia findFirstOrThrow
   */
  export type VisualMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * Filter, which VisualMedia to fetch.
     */
    where?: VisualMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMedias to fetch.
     */
    orderBy?: VisualMediaOrderByWithRelationInput | VisualMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisualMedias.
     */
    cursor?: VisualMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisualMedias.
     */
    distinct?: VisualMediaScalarFieldEnum | VisualMediaScalarFieldEnum[]
  }


  /**
   * VisualMedia findMany
   */
  export type VisualMediaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * Filter, which VisualMedias to fetch.
     */
    where?: VisualMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMedias to fetch.
     */
    orderBy?: VisualMediaOrderByWithRelationInput | VisualMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisualMedias.
     */
    cursor?: VisualMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMedias.
     */
    skip?: number
    distinct?: VisualMediaScalarFieldEnum | VisualMediaScalarFieldEnum[]
  }


  /**
   * VisualMedia create
   */
  export type VisualMediaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * The data needed to create a VisualMedia.
     */
    data: XOR<VisualMediaCreateInput, VisualMediaUncheckedCreateInput>
  }


  /**
   * VisualMedia update
   */
  export type VisualMediaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * The data needed to update a VisualMedia.
     */
    data: XOR<VisualMediaUpdateInput, VisualMediaUncheckedUpdateInput>
    /**
     * Choose, which VisualMedia to update.
     */
    where: VisualMediaWhereUniqueInput
  }


  /**
   * VisualMedia updateMany
   */
  export type VisualMediaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VisualMedias.
     */
    data: XOR<VisualMediaUpdateManyMutationInput, VisualMediaUncheckedUpdateManyInput>
    /**
     * Filter which VisualMedias to update
     */
    where?: VisualMediaWhereInput
  }


  /**
   * VisualMedia upsert
   */
  export type VisualMediaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * The filter to search for the VisualMedia to update in case it exists.
     */
    where: VisualMediaWhereUniqueInput
    /**
     * In case the VisualMedia found by the `where` argument doesn't exist, create a new VisualMedia with this data.
     */
    create: XOR<VisualMediaCreateInput, VisualMediaUncheckedCreateInput>
    /**
     * In case the VisualMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisualMediaUpdateInput, VisualMediaUncheckedUpdateInput>
  }


  /**
   * VisualMedia delete
   */
  export type VisualMediaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
    /**
     * Filter which VisualMedia to delete.
     */
    where: VisualMediaWhereUniqueInput
  }


  /**
   * VisualMedia deleteMany
   */
  export type VisualMediaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisualMedias to delete
     */
    where?: VisualMediaWhereInput
  }


  /**
   * VisualMedia without action
   */
  export type VisualMediaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMedia
     */
    select?: VisualMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VisualMediaInclude<ExtArgs> | null
  }



  /**
   * Model Activity
   */


  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
  }

  export type ActivitySumAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
  }

  export type ActivityMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    type: string | null
    sourceId: number | null
    targetId: number | null
    sourceUserId: string | null
    targetUserId: string | null
    isNotificationActive: boolean | null
    isNotificationRead: boolean | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    type: string | null
    sourceId: number | null
    targetId: number | null
    sourceUserId: string | null
    targetUserId: string | null
    isNotificationActive: boolean | null
    isNotificationRead: boolean | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    createdAt: number
    type: number
    sourceId: number
    targetId: number
    sourceUserId: number
    targetUserId: number
    isNotificationActive: number
    isNotificationRead: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
  }

  export type ActivitySumAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    sourceId?: true
    targetId?: true
    sourceUserId?: true
    targetUserId?: true
    isNotificationActive?: true
    isNotificationRead?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    sourceId?: true
    targetId?: true
    sourceUserId?: true
    targetUserId?: true
    isNotificationActive?: true
    isNotificationRead?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    sourceId?: true
    targetId?: true
    sourceUserId?: true
    targetUserId?: true
    isNotificationActive?: true
    isNotificationRead?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }


  export type ActivityGroupByOutputType = {
    id: number
    createdAt: Date
    type: string
    sourceId: number
    targetId: number | null
    sourceUserId: string
    targetUserId: string
    isNotificationActive: boolean
    isNotificationRead: boolean
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    type?: boolean
    sourceId?: boolean
    targetId?: boolean
    sourceUserId?: boolean
    targetUserId?: boolean
    isNotificationActive?: boolean
    isNotificationRead?: boolean
    sourceUser?: boolean | UserArgs<ExtArgs>
    targetUser?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    id?: boolean
    createdAt?: boolean
    type?: boolean
    sourceId?: boolean
    targetId?: boolean
    sourceUserId?: boolean
    targetUserId?: boolean
    isNotificationActive?: boolean
    isNotificationRead?: boolean
  }

  export type ActivityInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sourceUser?: boolean | UserArgs<ExtArgs>
    targetUser?: boolean | UserArgs<ExtArgs>
  }


  type ActivityGetPayload<S extends boolean | null | undefined | ActivityArgs> = $Types.GetResult<ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ActivityFindManyArgs, 'select' | 'include'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Activity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActivityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
    **/
    create<T extends ActivityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
    **/
    delete<T extends ActivityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Types.GetResult<ActivityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sourceUser<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    targetUser<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Activity model
   */ 
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'Int'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly type: FieldRef<"Activity", 'String'>
    readonly sourceId: FieldRef<"Activity", 'Int'>
    readonly targetId: FieldRef<"Activity", 'Int'>
    readonly sourceUserId: FieldRef<"Activity", 'String'>
    readonly targetUserId: FieldRef<"Activity", 'String'>
    readonly isNotificationActive: FieldRef<"Activity", 'Boolean'>
    readonly isNotificationRead: FieldRef<"Activity", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }


  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
  }


  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }


  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
  }


  /**
   * Activity without action
   */
  export type ActivityArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
  }



  /**
   * Model ActivityType
   */


  export type AggregateActivityType = {
    _count: ActivityTypeCountAggregateOutputType | null
    _avg: ActivityTypeAvgAggregateOutputType | null
    _sum: ActivityTypeSumAggregateOutputType | null
    _min: ActivityTypeMinAggregateOutputType | null
    _max: ActivityTypeMaxAggregateOutputType | null
  }

  export type ActivityTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ActivityTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ActivityTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ActivityTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ActivityTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ActivityTypeAvgAggregateInputType = {
    id?: true
  }

  export type ActivityTypeSumAggregateInputType = {
    id?: true
  }

  export type ActivityTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ActivityTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ActivityTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ActivityTypeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityType to aggregate.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityTypes
    **/
    _count?: true | ActivityTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityTypeMaxAggregateInputType
  }

  export type GetActivityTypeAggregateType<T extends ActivityTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityType[P]>
      : GetScalarType<T[P], AggregateActivityType[P]>
  }




  export type ActivityTypeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ActivityTypeWhereInput
    orderBy?: ActivityTypeOrderByWithAggregationInput | ActivityTypeOrderByWithAggregationInput[]
    by: ActivityTypeScalarFieldEnum[] | ActivityTypeScalarFieldEnum
    having?: ActivityTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityTypeCountAggregateInputType | true
    _avg?: ActivityTypeAvgAggregateInputType
    _sum?: ActivityTypeSumAggregateInputType
    _min?: ActivityTypeMinAggregateInputType
    _max?: ActivityTypeMaxAggregateInputType
  }


  export type ActivityTypeGroupByOutputType = {
    id: number
    name: string
    _count: ActivityTypeCountAggregateOutputType | null
    _avg: ActivityTypeAvgAggregateOutputType | null
    _sum: ActivityTypeSumAggregateOutputType | null
    _min: ActivityTypeMinAggregateOutputType | null
    _max: ActivityTypeMaxAggregateOutputType | null
  }

  type GetActivityTypeGroupByPayload<T extends ActivityTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityTypeGroupByOutputType[P]>
        }
      >
    >


  export type ActivityTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["activityType"]>

  export type ActivityTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }


  type ActivityTypeGetPayload<S extends boolean | null | undefined | ActivityTypeArgs> = $Types.GetResult<ActivityTypePayload, S>

  type ActivityTypeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ActivityTypeFindManyArgs, 'select' | 'include'> & {
      select?: ActivityTypeCountAggregateInputType | true
    }

  export interface ActivityTypeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityType'], meta: { name: 'ActivityType' } }
    /**
     * Find zero or one ActivityType that matches the filter.
     * @param {ActivityTypeFindUniqueArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ActivityType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityTypeFindUniqueOrThrowArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActivityTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ActivityType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeFindFirstArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityTypeFindFirstArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ActivityType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeFindFirstOrThrowArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActivityTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ActivityTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityTypes
     * const activityTypes = await prisma.activityType.findMany()
     * 
     * // Get first 10 ActivityTypes
     * const activityTypes = await prisma.activityType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityTypeWithIdOnly = await prisma.activityType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActivityTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ActivityType.
     * @param {ActivityTypeCreateArgs} args - Arguments to create a ActivityType.
     * @example
     * // Create one ActivityType
     * const ActivityType = await prisma.activityType.create({
     *   data: {
     *     // ... data to create a ActivityType
     *   }
     * })
     * 
    **/
    create<T extends ActivityTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityTypeCreateArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a ActivityType.
     * @param {ActivityTypeDeleteArgs} args - Arguments to delete one ActivityType.
     * @example
     * // Delete one ActivityType
     * const ActivityType = await prisma.activityType.delete({
     *   where: {
     *     // ... filter to delete one ActivityType
     *   }
     * })
     * 
    **/
    delete<T extends ActivityTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityTypeDeleteArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ActivityType.
     * @param {ActivityTypeUpdateArgs} args - Arguments to update one ActivityType.
     * @example
     * // Update one ActivityType
     * const activityType = await prisma.activityType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityTypeUpdateArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ActivityTypes.
     * @param {ActivityTypeDeleteManyArgs} args - Arguments to filter ActivityTypes to delete.
     * @example
     * // Delete a few ActivityTypes
     * const { count } = await prisma.activityType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityTypes
     * const activityType = await prisma.activityType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityType.
     * @param {ActivityTypeUpsertArgs} args - Arguments to update or create a ActivityType.
     * @example
     * // Update or create a ActivityType
     * const activityType = await prisma.activityType.upsert({
     *   create: {
     *     // ... data to create a ActivityType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityType we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityTypeUpsertArgs<ExtArgs>>
    ): Prisma__ActivityTypeClient<$Types.GetResult<ActivityTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ActivityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeCountArgs} args - Arguments to filter ActivityTypes to count.
     * @example
     * // Count the number of ActivityTypes
     * const count = await prisma.activityType.count({
     *   where: {
     *     // ... the filter for the ActivityTypes we want to count
     *   }
     * })
    **/
    count<T extends ActivityTypeCountArgs>(
      args?: Subset<T, ActivityTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityTypeAggregateArgs>(args: Subset<T, ActivityTypeAggregateArgs>): Prisma.PrismaPromise<GetActivityTypeAggregateType<T>>

    /**
     * Group by ActivityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityTypeGroupByArgs['orderBy'] }
        : { orderBy?: ActivityTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityType model
   */
  readonly fields: ActivityTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActivityTypeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the ActivityType model
   */ 
  interface ActivityTypeFieldRefs {
    readonly id: FieldRef<"ActivityType", 'Int'>
    readonly name: FieldRef<"ActivityType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ActivityType findUnique
   */
  export type ActivityTypeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where: ActivityTypeWhereUniqueInput
  }


  /**
   * ActivityType findUniqueOrThrow
   */
  export type ActivityTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where: ActivityTypeWhereUniqueInput
  }


  /**
   * ActivityType findFirst
   */
  export type ActivityTypeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityTypes.
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityTypes.
     */
    distinct?: ActivityTypeScalarFieldEnum | ActivityTypeScalarFieldEnum[]
  }


  /**
   * ActivityType findFirstOrThrow
   */
  export type ActivityTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityTypes.
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityTypes.
     */
    distinct?: ActivityTypeScalarFieldEnum | ActivityTypeScalarFieldEnum[]
  }


  /**
   * ActivityType findMany
   */
  export type ActivityTypeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Filter, which ActivityTypes to fetch.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityTypes.
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    distinct?: ActivityTypeScalarFieldEnum | ActivityTypeScalarFieldEnum[]
  }


  /**
   * ActivityType create
   */
  export type ActivityTypeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * The data needed to create a ActivityType.
     */
    data: XOR<ActivityTypeCreateInput, ActivityTypeUncheckedCreateInput>
  }


  /**
   * ActivityType update
   */
  export type ActivityTypeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * The data needed to update a ActivityType.
     */
    data: XOR<ActivityTypeUpdateInput, ActivityTypeUncheckedUpdateInput>
    /**
     * Choose, which ActivityType to update.
     */
    where: ActivityTypeWhereUniqueInput
  }


  /**
   * ActivityType updateMany
   */
  export type ActivityTypeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityTypes.
     */
    data: XOR<ActivityTypeUpdateManyMutationInput, ActivityTypeUncheckedUpdateManyInput>
    /**
     * Filter which ActivityTypes to update
     */
    where?: ActivityTypeWhereInput
  }


  /**
   * ActivityType upsert
   */
  export type ActivityTypeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * The filter to search for the ActivityType to update in case it exists.
     */
    where: ActivityTypeWhereUniqueInput
    /**
     * In case the ActivityType found by the `where` argument doesn't exist, create a new ActivityType with this data.
     */
    create: XOR<ActivityTypeCreateInput, ActivityTypeUncheckedCreateInput>
    /**
     * In case the ActivityType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityTypeUpdateInput, ActivityTypeUncheckedUpdateInput>
  }


  /**
   * ActivityType delete
   */
  export type ActivityTypeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Filter which ActivityType to delete.
     */
    where: ActivityTypeWhereUniqueInput
  }


  /**
   * ActivityType deleteMany
   */
  export type ActivityTypeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityTypes to delete
     */
    where?: ActivityTypeWhereInput
  }


  /**
   * ActivityType without action
   */
  export type ActivityTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
  }



  /**
   * Model VisualMediaType
   */


  export type AggregateVisualMediaType = {
    _count: VisualMediaTypeCountAggregateOutputType | null
    _avg: VisualMediaTypeAvgAggregateOutputType | null
    _sum: VisualMediaTypeSumAggregateOutputType | null
    _min: VisualMediaTypeMinAggregateOutputType | null
    _max: VisualMediaTypeMaxAggregateOutputType | null
  }

  export type VisualMediaTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type VisualMediaTypeSumAggregateOutputType = {
    id: number | null
  }

  export type VisualMediaTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type VisualMediaTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type VisualMediaTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type VisualMediaTypeAvgAggregateInputType = {
    id?: true
  }

  export type VisualMediaTypeSumAggregateInputType = {
    id?: true
  }

  export type VisualMediaTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type VisualMediaTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type VisualMediaTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type VisualMediaTypeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisualMediaType to aggregate.
     */
    where?: VisualMediaTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMediaTypes to fetch.
     */
    orderBy?: VisualMediaTypeOrderByWithRelationInput | VisualMediaTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisualMediaTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMediaTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMediaTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisualMediaTypes
    **/
    _count?: true | VisualMediaTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisualMediaTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisualMediaTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisualMediaTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisualMediaTypeMaxAggregateInputType
  }

  export type GetVisualMediaTypeAggregateType<T extends VisualMediaTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateVisualMediaType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisualMediaType[P]>
      : GetScalarType<T[P], AggregateVisualMediaType[P]>
  }




  export type VisualMediaTypeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VisualMediaTypeWhereInput
    orderBy?: VisualMediaTypeOrderByWithAggregationInput | VisualMediaTypeOrderByWithAggregationInput[]
    by: VisualMediaTypeScalarFieldEnum[] | VisualMediaTypeScalarFieldEnum
    having?: VisualMediaTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisualMediaTypeCountAggregateInputType | true
    _avg?: VisualMediaTypeAvgAggregateInputType
    _sum?: VisualMediaTypeSumAggregateInputType
    _min?: VisualMediaTypeMinAggregateInputType
    _max?: VisualMediaTypeMaxAggregateInputType
  }


  export type VisualMediaTypeGroupByOutputType = {
    id: number
    name: string
    _count: VisualMediaTypeCountAggregateOutputType | null
    _avg: VisualMediaTypeAvgAggregateOutputType | null
    _sum: VisualMediaTypeSumAggregateOutputType | null
    _min: VisualMediaTypeMinAggregateOutputType | null
    _max: VisualMediaTypeMaxAggregateOutputType | null
  }

  type GetVisualMediaTypeGroupByPayload<T extends VisualMediaTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisualMediaTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisualMediaTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisualMediaTypeGroupByOutputType[P]>
            : GetScalarType<T[P], VisualMediaTypeGroupByOutputType[P]>
        }
      >
    >


  export type VisualMediaTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["visualMediaType"]>

  export type VisualMediaTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }


  type VisualMediaTypeGetPayload<S extends boolean | null | undefined | VisualMediaTypeArgs> = $Types.GetResult<VisualMediaTypePayload, S>

  type VisualMediaTypeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VisualMediaTypeFindManyArgs, 'select' | 'include'> & {
      select?: VisualMediaTypeCountAggregateInputType | true
    }

  export interface VisualMediaTypeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VisualMediaType'], meta: { name: 'VisualMediaType' } }
    /**
     * Find zero or one VisualMediaType that matches the filter.
     * @param {VisualMediaTypeFindUniqueArgs} args - Arguments to find a VisualMediaType
     * @example
     * // Get one VisualMediaType
     * const visualMediaType = await prisma.visualMediaType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VisualMediaTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VisualMediaType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VisualMediaTypeFindUniqueOrThrowArgs} args - Arguments to find a VisualMediaType
     * @example
     * // Get one VisualMediaType
     * const visualMediaType = await prisma.visualMediaType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VisualMediaTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VisualMediaType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeFindFirstArgs} args - Arguments to find a VisualMediaType
     * @example
     * // Get one VisualMediaType
     * const visualMediaType = await prisma.visualMediaType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VisualMediaTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaTypeFindFirstArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VisualMediaType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeFindFirstOrThrowArgs} args - Arguments to find a VisualMediaType
     * @example
     * // Get one VisualMediaType
     * const visualMediaType = await prisma.visualMediaType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VisualMediaTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VisualMediaTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisualMediaTypes
     * const visualMediaTypes = await prisma.visualMediaType.findMany()
     * 
     * // Get first 10 VisualMediaTypes
     * const visualMediaTypes = await prisma.visualMediaType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visualMediaTypeWithIdOnly = await prisma.visualMediaType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VisualMediaTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VisualMediaType.
     * @param {VisualMediaTypeCreateArgs} args - Arguments to create a VisualMediaType.
     * @example
     * // Create one VisualMediaType
     * const VisualMediaType = await prisma.visualMediaType.create({
     *   data: {
     *     // ... data to create a VisualMediaType
     *   }
     * })
     * 
    **/
    create<T extends VisualMediaTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaTypeCreateArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a VisualMediaType.
     * @param {VisualMediaTypeDeleteArgs} args - Arguments to delete one VisualMediaType.
     * @example
     * // Delete one VisualMediaType
     * const VisualMediaType = await prisma.visualMediaType.delete({
     *   where: {
     *     // ... filter to delete one VisualMediaType
     *   }
     * })
     * 
    **/
    delete<T extends VisualMediaTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaTypeDeleteArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VisualMediaType.
     * @param {VisualMediaTypeUpdateArgs} args - Arguments to update one VisualMediaType.
     * @example
     * // Update one VisualMediaType
     * const visualMediaType = await prisma.visualMediaType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VisualMediaTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaTypeUpdateArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VisualMediaTypes.
     * @param {VisualMediaTypeDeleteManyArgs} args - Arguments to filter VisualMediaTypes to delete.
     * @example
     * // Delete a few VisualMediaTypes
     * const { count } = await prisma.visualMediaType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VisualMediaTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VisualMediaTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisualMediaTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisualMediaTypes
     * const visualMediaType = await prisma.visualMediaType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VisualMediaTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisualMediaType.
     * @param {VisualMediaTypeUpsertArgs} args - Arguments to update or create a VisualMediaType.
     * @example
     * // Update or create a VisualMediaType
     * const visualMediaType = await prisma.visualMediaType.upsert({
     *   create: {
     *     // ... data to create a VisualMediaType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisualMediaType we want to update
     *   }
     * })
    **/
    upsert<T extends VisualMediaTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VisualMediaTypeUpsertArgs<ExtArgs>>
    ): Prisma__VisualMediaTypeClient<$Types.GetResult<VisualMediaTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VisualMediaTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeCountArgs} args - Arguments to filter VisualMediaTypes to count.
     * @example
     * // Count the number of VisualMediaTypes
     * const count = await prisma.visualMediaType.count({
     *   where: {
     *     // ... the filter for the VisualMediaTypes we want to count
     *   }
     * })
    **/
    count<T extends VisualMediaTypeCountArgs>(
      args?: Subset<T, VisualMediaTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisualMediaTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisualMediaType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisualMediaTypeAggregateArgs>(args: Subset<T, VisualMediaTypeAggregateArgs>): Prisma.PrismaPromise<GetVisualMediaTypeAggregateType<T>>

    /**
     * Group by VisualMediaType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisualMediaTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisualMediaTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisualMediaTypeGroupByArgs['orderBy'] }
        : { orderBy?: VisualMediaTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisualMediaTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisualMediaTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VisualMediaType model
   */
  readonly fields: VisualMediaTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VisualMediaType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VisualMediaTypeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the VisualMediaType model
   */ 
  interface VisualMediaTypeFieldRefs {
    readonly id: FieldRef<"VisualMediaType", 'Int'>
    readonly name: FieldRef<"VisualMediaType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * VisualMediaType findUnique
   */
  export type VisualMediaTypeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * Filter, which VisualMediaType to fetch.
     */
    where: VisualMediaTypeWhereUniqueInput
  }


  /**
   * VisualMediaType findUniqueOrThrow
   */
  export type VisualMediaTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * Filter, which VisualMediaType to fetch.
     */
    where: VisualMediaTypeWhereUniqueInput
  }


  /**
   * VisualMediaType findFirst
   */
  export type VisualMediaTypeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * Filter, which VisualMediaType to fetch.
     */
    where?: VisualMediaTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMediaTypes to fetch.
     */
    orderBy?: VisualMediaTypeOrderByWithRelationInput | VisualMediaTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisualMediaTypes.
     */
    cursor?: VisualMediaTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMediaTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMediaTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisualMediaTypes.
     */
    distinct?: VisualMediaTypeScalarFieldEnum | VisualMediaTypeScalarFieldEnum[]
  }


  /**
   * VisualMediaType findFirstOrThrow
   */
  export type VisualMediaTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * Filter, which VisualMediaType to fetch.
     */
    where?: VisualMediaTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMediaTypes to fetch.
     */
    orderBy?: VisualMediaTypeOrderByWithRelationInput | VisualMediaTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisualMediaTypes.
     */
    cursor?: VisualMediaTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMediaTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMediaTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisualMediaTypes.
     */
    distinct?: VisualMediaTypeScalarFieldEnum | VisualMediaTypeScalarFieldEnum[]
  }


  /**
   * VisualMediaType findMany
   */
  export type VisualMediaTypeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * Filter, which VisualMediaTypes to fetch.
     */
    where?: VisualMediaTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisualMediaTypes to fetch.
     */
    orderBy?: VisualMediaTypeOrderByWithRelationInput | VisualMediaTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisualMediaTypes.
     */
    cursor?: VisualMediaTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisualMediaTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisualMediaTypes.
     */
    skip?: number
    distinct?: VisualMediaTypeScalarFieldEnum | VisualMediaTypeScalarFieldEnum[]
  }


  /**
   * VisualMediaType create
   */
  export type VisualMediaTypeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * The data needed to create a VisualMediaType.
     */
    data: XOR<VisualMediaTypeCreateInput, VisualMediaTypeUncheckedCreateInput>
  }


  /**
   * VisualMediaType update
   */
  export type VisualMediaTypeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * The data needed to update a VisualMediaType.
     */
    data: XOR<VisualMediaTypeUpdateInput, VisualMediaTypeUncheckedUpdateInput>
    /**
     * Choose, which VisualMediaType to update.
     */
    where: VisualMediaTypeWhereUniqueInput
  }


  /**
   * VisualMediaType updateMany
   */
  export type VisualMediaTypeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VisualMediaTypes.
     */
    data: XOR<VisualMediaTypeUpdateManyMutationInput, VisualMediaTypeUncheckedUpdateManyInput>
    /**
     * Filter which VisualMediaTypes to update
     */
    where?: VisualMediaTypeWhereInput
  }


  /**
   * VisualMediaType upsert
   */
  export type VisualMediaTypeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * The filter to search for the VisualMediaType to update in case it exists.
     */
    where: VisualMediaTypeWhereUniqueInput
    /**
     * In case the VisualMediaType found by the `where` argument doesn't exist, create a new VisualMediaType with this data.
     */
    create: XOR<VisualMediaTypeCreateInput, VisualMediaTypeUncheckedCreateInput>
    /**
     * In case the VisualMediaType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisualMediaTypeUpdateInput, VisualMediaTypeUncheckedUpdateInput>
  }


  /**
   * VisualMediaType delete
   */
  export type VisualMediaTypeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
    /**
     * Filter which VisualMediaType to delete.
     */
    where: VisualMediaTypeWhereUniqueInput
  }


  /**
   * VisualMediaType deleteMany
   */
  export type VisualMediaTypeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisualMediaTypes to delete
     */
    where?: VisualMediaTypeWhereInput
  }


  /**
   * VisualMediaType without action
   */
  export type VisualMediaTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisualMediaType
     */
    select?: VisualMediaTypeSelect<ExtArgs> | null
  }



  /**
   * Model Gender
   */


  export type AggregateGender = {
    _count: GenderCountAggregateOutputType | null
    _avg: GenderAvgAggregateOutputType | null
    _sum: GenderSumAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  export type GenderAvgAggregateOutputType = {
    id: number | null
  }

  export type GenderSumAggregateOutputType = {
    id: number | null
  }

  export type GenderMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenderMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenderCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GenderAvgAggregateInputType = {
    id?: true
  }

  export type GenderSumAggregateInputType = {
    id?: true
  }

  export type GenderMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenderMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenderCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GenderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gender to aggregate.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genders
    **/
    _count?: true | GenderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenderMaxAggregateInputType
  }

  export type GetGenderAggregateType<T extends GenderAggregateArgs> = {
        [P in keyof T & keyof AggregateGender]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGender[P]>
      : GetScalarType<T[P], AggregateGender[P]>
  }




  export type GenderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GenderWhereInput
    orderBy?: GenderOrderByWithAggregationInput | GenderOrderByWithAggregationInput[]
    by: GenderScalarFieldEnum[] | GenderScalarFieldEnum
    having?: GenderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenderCountAggregateInputType | true
    _avg?: GenderAvgAggregateInputType
    _sum?: GenderSumAggregateInputType
    _min?: GenderMinAggregateInputType
    _max?: GenderMaxAggregateInputType
  }


  export type GenderGroupByOutputType = {
    id: number
    name: string
    _count: GenderCountAggregateOutputType | null
    _avg: GenderAvgAggregateOutputType | null
    _sum: GenderSumAggregateOutputType | null
    _min: GenderMinAggregateOutputType | null
    _max: GenderMaxAggregateOutputType | null
  }

  type GetGenderGroupByPayload<T extends GenderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenderGroupByOutputType[P]>
            : GetScalarType<T[P], GenderGroupByOutputType[P]>
        }
      >
    >


  export type GenderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["gender"]>

  export type GenderSelectScalar = {
    id?: boolean
    name?: boolean
  }


  type GenderGetPayload<S extends boolean | null | undefined | GenderArgs> = $Types.GetResult<GenderPayload, S>

  type GenderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GenderFindManyArgs, 'select' | 'include'> & {
      select?: GenderCountAggregateInputType | true
    }

  export interface GenderDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gender'], meta: { name: 'Gender' } }
    /**
     * Find zero or one Gender that matches the filter.
     * @param {GenderFindUniqueArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GenderFindUniqueArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Gender that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GenderFindUniqueOrThrowArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GenderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GenderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Gender that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindFirstArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GenderFindFirstArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Gender that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindFirstOrThrowArgs} args - Arguments to find a Gender
     * @example
     * // Get one Gender
     * const gender = await prisma.gender.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GenderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GenderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Genders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genders
     * const genders = await prisma.gender.findMany()
     * 
     * // Get first 10 Genders
     * const genders = await prisma.gender.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genderWithIdOnly = await prisma.gender.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GenderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GenderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GenderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Gender.
     * @param {GenderCreateArgs} args - Arguments to create a Gender.
     * @example
     * // Create one Gender
     * const Gender = await prisma.gender.create({
     *   data: {
     *     // ... data to create a Gender
     *   }
     * })
     * 
    **/
    create<T extends GenderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GenderCreateArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Gender.
     * @param {GenderDeleteArgs} args - Arguments to delete one Gender.
     * @example
     * // Delete one Gender
     * const Gender = await prisma.gender.delete({
     *   where: {
     *     // ... filter to delete one Gender
     *   }
     * })
     * 
    **/
    delete<T extends GenderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GenderDeleteArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Gender.
     * @param {GenderUpdateArgs} args - Arguments to update one Gender.
     * @example
     * // Update one Gender
     * const gender = await prisma.gender.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GenderUpdateArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Genders.
     * @param {GenderDeleteManyArgs} args - Arguments to filter Genders to delete.
     * @example
     * // Delete a few Genders
     * const { count } = await prisma.gender.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GenderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genders
     * const gender = await prisma.gender.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GenderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gender.
     * @param {GenderUpsertArgs} args - Arguments to update or create a Gender.
     * @example
     * // Update or create a Gender
     * const gender = await prisma.gender.upsert({
     *   create: {
     *     // ... data to create a Gender
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gender we want to update
     *   }
     * })
    **/
    upsert<T extends GenderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GenderUpsertArgs<ExtArgs>>
    ): Prisma__GenderClient<$Types.GetResult<GenderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Genders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderCountArgs} args - Arguments to filter Genders to count.
     * @example
     * // Count the number of Genders
     * const count = await prisma.gender.count({
     *   where: {
     *     // ... the filter for the Genders we want to count
     *   }
     * })
    **/
    count<T extends GenderCountArgs>(
      args?: Subset<T, GenderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenderAggregateArgs>(args: Subset<T, GenderAggregateArgs>): Prisma.PrismaPromise<GetGenderAggregateType<T>>

    /**
     * Group by Gender.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenderGroupByArgs['orderBy'] }
        : { orderBy?: GenderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gender model
   */
  readonly fields: GenderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gender.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Gender model
   */ 
  interface GenderFieldRefs {
    readonly id: FieldRef<"Gender", 'Int'>
    readonly name: FieldRef<"Gender", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Gender findUnique
   */
  export type GenderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where: GenderWhereUniqueInput
  }


  /**
   * Gender findUniqueOrThrow
   */
  export type GenderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where: GenderWhereUniqueInput
  }


  /**
   * Gender findFirst
   */
  export type GenderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genders.
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genders.
     */
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }


  /**
   * Gender findFirstOrThrow
   */
  export type GenderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Filter, which Gender to fetch.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genders.
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genders.
     */
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }


  /**
   * Gender findMany
   */
  export type GenderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Filter, which Genders to fetch.
     */
    where?: GenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genders to fetch.
     */
    orderBy?: GenderOrderByWithRelationInput | GenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genders.
     */
    cursor?: GenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genders.
     */
    skip?: number
    distinct?: GenderScalarFieldEnum | GenderScalarFieldEnum[]
  }


  /**
   * Gender create
   */
  export type GenderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * The data needed to create a Gender.
     */
    data: XOR<GenderCreateInput, GenderUncheckedCreateInput>
  }


  /**
   * Gender update
   */
  export type GenderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * The data needed to update a Gender.
     */
    data: XOR<GenderUpdateInput, GenderUncheckedUpdateInput>
    /**
     * Choose, which Gender to update.
     */
    where: GenderWhereUniqueInput
  }


  /**
   * Gender updateMany
   */
  export type GenderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Genders.
     */
    data: XOR<GenderUpdateManyMutationInput, GenderUncheckedUpdateManyInput>
    /**
     * Filter which Genders to update
     */
    where?: GenderWhereInput
  }


  /**
   * Gender upsert
   */
  export type GenderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * The filter to search for the Gender to update in case it exists.
     */
    where: GenderWhereUniqueInput
    /**
     * In case the Gender found by the `where` argument doesn't exist, create a new Gender with this data.
     */
    create: XOR<GenderCreateInput, GenderUncheckedCreateInput>
    /**
     * In case the Gender was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenderUpdateInput, GenderUncheckedUpdateInput>
  }


  /**
   * Gender delete
   */
  export type GenderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
    /**
     * Filter which Gender to delete.
     */
    where: GenderWhereUniqueInput
  }


  /**
   * Gender deleteMany
   */
  export type GenderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genders to delete
     */
    where?: GenderWhereInput
  }


  /**
   * Gender without action
   */
  export type GenderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gender
     */
    select?: GenderSelect<ExtArgs> | null
  }



  /**
   * Model RelationshipStatus
   */


  export type AggregateRelationshipStatus = {
    _count: RelationshipStatusCountAggregateOutputType | null
    _avg: RelationshipStatusAvgAggregateOutputType | null
    _sum: RelationshipStatusSumAggregateOutputType | null
    _min: RelationshipStatusMinAggregateOutputType | null
    _max: RelationshipStatusMaxAggregateOutputType | null
  }

  export type RelationshipStatusAvgAggregateOutputType = {
    id: number | null
  }

  export type RelationshipStatusSumAggregateOutputType = {
    id: number | null
  }

  export type RelationshipStatusMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RelationshipStatusMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RelationshipStatusCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RelationshipStatusAvgAggregateInputType = {
    id?: true
  }

  export type RelationshipStatusSumAggregateInputType = {
    id?: true
  }

  export type RelationshipStatusMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RelationshipStatusMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RelationshipStatusCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RelationshipStatusAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelationshipStatus to aggregate.
     */
    where?: RelationshipStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipStatuses to fetch.
     */
    orderBy?: RelationshipStatusOrderByWithRelationInput | RelationshipStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelationshipStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelationshipStatuses
    **/
    _count?: true | RelationshipStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelationshipStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelationshipStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationshipStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationshipStatusMaxAggregateInputType
  }

  export type GetRelationshipStatusAggregateType<T extends RelationshipStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateRelationshipStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelationshipStatus[P]>
      : GetScalarType<T[P], AggregateRelationshipStatus[P]>
  }




  export type RelationshipStatusGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RelationshipStatusWhereInput
    orderBy?: RelationshipStatusOrderByWithAggregationInput | RelationshipStatusOrderByWithAggregationInput[]
    by: RelationshipStatusScalarFieldEnum[] | RelationshipStatusScalarFieldEnum
    having?: RelationshipStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationshipStatusCountAggregateInputType | true
    _avg?: RelationshipStatusAvgAggregateInputType
    _sum?: RelationshipStatusSumAggregateInputType
    _min?: RelationshipStatusMinAggregateInputType
    _max?: RelationshipStatusMaxAggregateInputType
  }


  export type RelationshipStatusGroupByOutputType = {
    id: number
    name: string
    _count: RelationshipStatusCountAggregateOutputType | null
    _avg: RelationshipStatusAvgAggregateOutputType | null
    _sum: RelationshipStatusSumAggregateOutputType | null
    _min: RelationshipStatusMinAggregateOutputType | null
    _max: RelationshipStatusMaxAggregateOutputType | null
  }

  type GetRelationshipStatusGroupByPayload<T extends RelationshipStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelationshipStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationshipStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationshipStatusGroupByOutputType[P]>
            : GetScalarType<T[P], RelationshipStatusGroupByOutputType[P]>
        }
      >
    >


  export type RelationshipStatusSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["relationshipStatus"]>

  export type RelationshipStatusSelectScalar = {
    id?: boolean
    name?: boolean
  }


  type RelationshipStatusGetPayload<S extends boolean | null | undefined | RelationshipStatusArgs> = $Types.GetResult<RelationshipStatusPayload, S>

  type RelationshipStatusCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RelationshipStatusFindManyArgs, 'select' | 'include'> & {
      select?: RelationshipStatusCountAggregateInputType | true
    }

  export interface RelationshipStatusDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RelationshipStatus'], meta: { name: 'RelationshipStatus' } }
    /**
     * Find zero or one RelationshipStatus that matches the filter.
     * @param {RelationshipStatusFindUniqueArgs} args - Arguments to find a RelationshipStatus
     * @example
     * // Get one RelationshipStatus
     * const relationshipStatus = await prisma.relationshipStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RelationshipStatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RelationshipStatusFindUniqueArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RelationshipStatus that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RelationshipStatusFindUniqueOrThrowArgs} args - Arguments to find a RelationshipStatus
     * @example
     * // Get one RelationshipStatus
     * const relationshipStatus = await prisma.relationshipStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RelationshipStatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RelationshipStatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RelationshipStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusFindFirstArgs} args - Arguments to find a RelationshipStatus
     * @example
     * // Get one RelationshipStatus
     * const relationshipStatus = await prisma.relationshipStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RelationshipStatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RelationshipStatusFindFirstArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RelationshipStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusFindFirstOrThrowArgs} args - Arguments to find a RelationshipStatus
     * @example
     * // Get one RelationshipStatus
     * const relationshipStatus = await prisma.relationshipStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RelationshipStatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RelationshipStatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RelationshipStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelationshipStatuses
     * const relationshipStatuses = await prisma.relationshipStatus.findMany()
     * 
     * // Get first 10 RelationshipStatuses
     * const relationshipStatuses = await prisma.relationshipStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relationshipStatusWithIdOnly = await prisma.relationshipStatus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RelationshipStatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RelationshipStatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RelationshipStatus.
     * @param {RelationshipStatusCreateArgs} args - Arguments to create a RelationshipStatus.
     * @example
     * // Create one RelationshipStatus
     * const RelationshipStatus = await prisma.relationshipStatus.create({
     *   data: {
     *     // ... data to create a RelationshipStatus
     *   }
     * })
     * 
    **/
    create<T extends RelationshipStatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RelationshipStatusCreateArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a RelationshipStatus.
     * @param {RelationshipStatusDeleteArgs} args - Arguments to delete one RelationshipStatus.
     * @example
     * // Delete one RelationshipStatus
     * const RelationshipStatus = await prisma.relationshipStatus.delete({
     *   where: {
     *     // ... filter to delete one RelationshipStatus
     *   }
     * })
     * 
    **/
    delete<T extends RelationshipStatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RelationshipStatusDeleteArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RelationshipStatus.
     * @param {RelationshipStatusUpdateArgs} args - Arguments to update one RelationshipStatus.
     * @example
     * // Update one RelationshipStatus
     * const relationshipStatus = await prisma.relationshipStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RelationshipStatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RelationshipStatusUpdateArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RelationshipStatuses.
     * @param {RelationshipStatusDeleteManyArgs} args - Arguments to filter RelationshipStatuses to delete.
     * @example
     * // Delete a few RelationshipStatuses
     * const { count } = await prisma.relationshipStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RelationshipStatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RelationshipStatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelationshipStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelationshipStatuses
     * const relationshipStatus = await prisma.relationshipStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RelationshipStatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RelationshipStatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RelationshipStatus.
     * @param {RelationshipStatusUpsertArgs} args - Arguments to update or create a RelationshipStatus.
     * @example
     * // Update or create a RelationshipStatus
     * const relationshipStatus = await prisma.relationshipStatus.upsert({
     *   create: {
     *     // ... data to create a RelationshipStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelationshipStatus we want to update
     *   }
     * })
    **/
    upsert<T extends RelationshipStatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RelationshipStatusUpsertArgs<ExtArgs>>
    ): Prisma__RelationshipStatusClient<$Types.GetResult<RelationshipStatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RelationshipStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusCountArgs} args - Arguments to filter RelationshipStatuses to count.
     * @example
     * // Count the number of RelationshipStatuses
     * const count = await prisma.relationshipStatus.count({
     *   where: {
     *     // ... the filter for the RelationshipStatuses we want to count
     *   }
     * })
    **/
    count<T extends RelationshipStatusCountArgs>(
      args?: Subset<T, RelationshipStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationshipStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelationshipStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationshipStatusAggregateArgs>(args: Subset<T, RelationshipStatusAggregateArgs>): Prisma.PrismaPromise<GetRelationshipStatusAggregateType<T>>

    /**
     * Group by RelationshipStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationshipStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationshipStatusGroupByArgs['orderBy'] }
        : { orderBy?: RelationshipStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationshipStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationshipStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RelationshipStatus model
   */
  readonly fields: RelationshipStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RelationshipStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RelationshipStatusClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the RelationshipStatus model
   */ 
  interface RelationshipStatusFieldRefs {
    readonly id: FieldRef<"RelationshipStatus", 'Int'>
    readonly name: FieldRef<"RelationshipStatus", 'String'>
  }
    

  // Custom InputTypes

  /**
   * RelationshipStatus findUnique
   */
  export type RelationshipStatusFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipStatus to fetch.
     */
    where: RelationshipStatusWhereUniqueInput
  }


  /**
   * RelationshipStatus findUniqueOrThrow
   */
  export type RelationshipStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipStatus to fetch.
     */
    where: RelationshipStatusWhereUniqueInput
  }


  /**
   * RelationshipStatus findFirst
   */
  export type RelationshipStatusFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipStatus to fetch.
     */
    where?: RelationshipStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipStatuses to fetch.
     */
    orderBy?: RelationshipStatusOrderByWithRelationInput | RelationshipStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelationshipStatuses.
     */
    cursor?: RelationshipStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelationshipStatuses.
     */
    distinct?: RelationshipStatusScalarFieldEnum | RelationshipStatusScalarFieldEnum[]
  }


  /**
   * RelationshipStatus findFirstOrThrow
   */
  export type RelationshipStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipStatus to fetch.
     */
    where?: RelationshipStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipStatuses to fetch.
     */
    orderBy?: RelationshipStatusOrderByWithRelationInput | RelationshipStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelationshipStatuses.
     */
    cursor?: RelationshipStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelationshipStatuses.
     */
    distinct?: RelationshipStatusScalarFieldEnum | RelationshipStatusScalarFieldEnum[]
  }


  /**
   * RelationshipStatus findMany
   */
  export type RelationshipStatusFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * Filter, which RelationshipStatuses to fetch.
     */
    where?: RelationshipStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationshipStatuses to fetch.
     */
    orderBy?: RelationshipStatusOrderByWithRelationInput | RelationshipStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelationshipStatuses.
     */
    cursor?: RelationshipStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationshipStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationshipStatuses.
     */
    skip?: number
    distinct?: RelationshipStatusScalarFieldEnum | RelationshipStatusScalarFieldEnum[]
  }


  /**
   * RelationshipStatus create
   */
  export type RelationshipStatusCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * The data needed to create a RelationshipStatus.
     */
    data: XOR<RelationshipStatusCreateInput, RelationshipStatusUncheckedCreateInput>
  }


  /**
   * RelationshipStatus update
   */
  export type RelationshipStatusUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * The data needed to update a RelationshipStatus.
     */
    data: XOR<RelationshipStatusUpdateInput, RelationshipStatusUncheckedUpdateInput>
    /**
     * Choose, which RelationshipStatus to update.
     */
    where: RelationshipStatusWhereUniqueInput
  }


  /**
   * RelationshipStatus updateMany
   */
  export type RelationshipStatusUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RelationshipStatuses.
     */
    data: XOR<RelationshipStatusUpdateManyMutationInput, RelationshipStatusUncheckedUpdateManyInput>
    /**
     * Filter which RelationshipStatuses to update
     */
    where?: RelationshipStatusWhereInput
  }


  /**
   * RelationshipStatus upsert
   */
  export type RelationshipStatusUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * The filter to search for the RelationshipStatus to update in case it exists.
     */
    where: RelationshipStatusWhereUniqueInput
    /**
     * In case the RelationshipStatus found by the `where` argument doesn't exist, create a new RelationshipStatus with this data.
     */
    create: XOR<RelationshipStatusCreateInput, RelationshipStatusUncheckedCreateInput>
    /**
     * In case the RelationshipStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelationshipStatusUpdateInput, RelationshipStatusUncheckedUpdateInput>
  }


  /**
   * RelationshipStatus delete
   */
  export type RelationshipStatusDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
    /**
     * Filter which RelationshipStatus to delete.
     */
    where: RelationshipStatusWhereUniqueInput
  }


  /**
   * RelationshipStatus deleteMany
   */
  export type RelationshipStatusDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelationshipStatuses to delete
     */
    where?: RelationshipStatusWhereInput
  }


  /**
   * RelationshipStatus without action
   */
  export type RelationshipStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipStatus
     */
    select?: RelationshipStatusSelect<ExtArgs> | null
  }



  /**
   * Model Conversation
   */


  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationMinAggregateOutputType = {
    id: string | null
    participant1Id: string | null
    participant2Id: string | null
    createdAt: Date | null
    lastMessageAt: Date | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: string | null
    participant1Id: string | null
    participant2Id: string | null
    createdAt: Date | null
    lastMessageAt: Date | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    participant1Id: number
    participant2Id: number
    createdAt: number
    lastMessageAt: number
    _all: number
  }


  export type ConversationMinAggregateInputType = {
    id?: true
    participant1Id?: true
    participant2Id?: true
    createdAt?: true
    lastMessageAt?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    participant1Id?: true
    participant2Id?: true
    createdAt?: true
    lastMessageAt?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    participant1Id?: true
    participant2Id?: true
    createdAt?: true
    lastMessageAt?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }


  export type ConversationGroupByOutputType = {
    id: string
    participant1Id: string
    participant2Id: string
    createdAt: Date
    lastMessageAt: Date
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    participant1Id?: boolean
    participant2Id?: boolean
    createdAt?: boolean
    lastMessageAt?: boolean
    participant1?: boolean | UserArgs<ExtArgs>
    participant2?: boolean | UserArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectScalar = {
    id?: boolean
    participant1Id?: boolean
    participant2Id?: boolean
    createdAt?: boolean
    lastMessageAt?: boolean
  }

  export type ConversationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    participant1?: boolean | UserArgs<ExtArgs>
    participant2?: boolean | UserArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeArgs<ExtArgs>
  }


  type ConversationGetPayload<S extends boolean | null | undefined | ConversationArgs> = $Types.GetResult<ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ConversationFindManyArgs, 'select' | 'include'> & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConversationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Conversation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConversationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConversationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
    **/
    create<T extends ConversationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
    **/
    delete<T extends ConversationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConversationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConversationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConversationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
    **/
    upsert<T extends ConversationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>
    ): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    participant1<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    participant2<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    messages<T extends Conversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Conversation model
   */ 
  interface ConversationFieldRefs {
    readonly id: FieldRef<"Conversation", 'String'>
    readonly participant1Id: FieldRef<"Conversation", 'String'>
    readonly participant2Id: FieldRef<"Conversation", 'String'>
    readonly createdAt: FieldRef<"Conversation", 'DateTime'>
    readonly lastMessageAt: FieldRef<"Conversation", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }


  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }


  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
  }


  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }


  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
  }


  /**
   * Conversation.messages
   */
  export type Conversation$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Conversation without action
   */
  export type ConversationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConversationInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    redPacketAmount: number | null
    taskPostId: number | null
    taskFinalAmount: number | null
  }

  export type MessageSumAggregateOutputType = {
    redPacketAmount: number | null
    taskPostId: number | null
    taskFinalAmount: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    content: string | null
    conversationId: string | null
    senderId: string | null
    createdAt: Date | null
    isRead: boolean | null
    type: string | null
    redPacketAmount: number | null
    redPacketMessage: string | null
    redPacketStatus: string | null
    redPacketClaimedAt: Date | null
    taskPostId: number | null
    taskFinalAmount: number | null
    taskCompletionStatus: string | null
    isAIResponse: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    content: string | null
    conversationId: string | null
    senderId: string | null
    createdAt: Date | null
    isRead: boolean | null
    type: string | null
    redPacketAmount: number | null
    redPacketMessage: string | null
    redPacketStatus: string | null
    redPacketClaimedAt: Date | null
    taskPostId: number | null
    taskFinalAmount: number | null
    taskCompletionStatus: string | null
    isAIResponse: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    conversationId: number
    senderId: number
    createdAt: number
    isRead: number
    type: number
    redPacketAmount: number
    redPacketMessage: number
    redPacketStatus: number
    redPacketClaimedAt: number
    taskPostId: number
    taskFinalAmount: number
    taskCompletionStatus: number
    isAIResponse: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    redPacketAmount?: true
    taskPostId?: true
    taskFinalAmount?: true
  }

  export type MessageSumAggregateInputType = {
    redPacketAmount?: true
    taskPostId?: true
    taskFinalAmount?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    content?: true
    conversationId?: true
    senderId?: true
    createdAt?: true
    isRead?: true
    type?: true
    redPacketAmount?: true
    redPacketMessage?: true
    redPacketStatus?: true
    redPacketClaimedAt?: true
    taskPostId?: true
    taskFinalAmount?: true
    taskCompletionStatus?: true
    isAIResponse?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    content?: true
    conversationId?: true
    senderId?: true
    createdAt?: true
    isRead?: true
    type?: true
    redPacketAmount?: true
    redPacketMessage?: true
    redPacketStatus?: true
    redPacketClaimedAt?: true
    taskPostId?: true
    taskFinalAmount?: true
    taskCompletionStatus?: true
    isAIResponse?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    conversationId?: true
    senderId?: true
    createdAt?: true
    isRead?: true
    type?: true
    redPacketAmount?: true
    redPacketMessage?: true
    redPacketStatus?: true
    redPacketClaimedAt?: true
    taskPostId?: true
    taskFinalAmount?: true
    taskCompletionStatus?: true
    isAIResponse?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: string
    content: string
    conversationId: string
    senderId: string
    createdAt: Date
    isRead: boolean
    type: string
    redPacketAmount: number | null
    redPacketMessage: string | null
    redPacketStatus: string | null
    redPacketClaimedAt: Date | null
    taskPostId: number | null
    taskFinalAmount: number | null
    taskCompletionStatus: string | null
    isAIResponse: boolean
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    conversationId?: boolean
    senderId?: boolean
    createdAt?: boolean
    isRead?: boolean
    type?: boolean
    redPacketAmount?: boolean
    redPacketMessage?: boolean
    redPacketStatus?: boolean
    redPacketClaimedAt?: boolean
    taskPostId?: boolean
    taskFinalAmount?: boolean
    taskCompletionStatus?: boolean
    isAIResponse?: boolean
    conversation?: boolean | ConversationArgs<ExtArgs>
    sender?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    conversationId?: boolean
    senderId?: boolean
    createdAt?: boolean
    isRead?: boolean
    type?: boolean
    redPacketAmount?: boolean
    redPacketMessage?: boolean
    redPacketStatus?: boolean
    redPacketClaimedAt?: boolean
    taskPostId?: boolean
    taskFinalAmount?: boolean
    taskCompletionStatus?: boolean
    isAIResponse?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationArgs<ExtArgs>
    sender?: boolean | UserArgs<ExtArgs>
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> = $Types.GetResult<MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    conversation<T extends ConversationArgs<ExtArgs> = {}>(args?: Subset<T, ConversationArgs<ExtArgs>>): Prisma__ConversationClient<$Types.GetResult<ConversationPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    sender<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly conversationId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly isRead: FieldRef<"Message", 'Boolean'>
    readonly type: FieldRef<"Message", 'String'>
    readonly redPacketAmount: FieldRef<"Message", 'Float'>
    readonly redPacketMessage: FieldRef<"Message", 'String'>
    readonly redPacketStatus: FieldRef<"Message", 'String'>
    readonly redPacketClaimedAt: FieldRef<"Message", 'DateTime'>
    readonly taskPostId: FieldRef<"Message", 'Int'>
    readonly taskFinalAmount: FieldRef<"Message", 'Float'>
    readonly taskCompletionStatus: FieldRef<"Message", 'String'>
    readonly isAIResponse: FieldRef<"Message", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model WalletTransaction
   */


  export type AggregateWalletTransaction = {
    _count: WalletTransactionCountAggregateOutputType | null
    _avg: WalletTransactionAvgAggregateOutputType | null
    _sum: WalletTransactionSumAggregateOutputType | null
    _min: WalletTransactionMinAggregateOutputType | null
    _max: WalletTransactionMaxAggregateOutputType | null
  }

  export type WalletTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type WalletTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type WalletTransactionMinAggregateOutputType = {
    id: string | null
    type: string | null
    amount: number | null
    status: string | null
    description: string | null
    fromUserId: string | null
    toUserId: string | null
    txHash: string | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type WalletTransactionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    amount: number | null
    status: string | null
    description: string | null
    fromUserId: string | null
    toUserId: string | null
    txHash: string | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type WalletTransactionCountAggregateOutputType = {
    id: number
    type: number
    amount: number
    status: number
    description: number
    fromUserId: number
    toUserId: number
    txHash: number
    createdAt: number
    completedAt: number
    _all: number
  }


  export type WalletTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type WalletTransactionSumAggregateInputType = {
    amount?: true
  }

  export type WalletTransactionMinAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    status?: true
    description?: true
    fromUserId?: true
    toUserId?: true
    txHash?: true
    createdAt?: true
    completedAt?: true
  }

  export type WalletTransactionMaxAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    status?: true
    description?: true
    fromUserId?: true
    toUserId?: true
    txHash?: true
    createdAt?: true
    completedAt?: true
  }

  export type WalletTransactionCountAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    status?: true
    description?: true
    fromUserId?: true
    toUserId?: true
    txHash?: true
    createdAt?: true
    completedAt?: true
    _all?: true
  }

  export type WalletTransactionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletTransaction to aggregate.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WalletTransactions
    **/
    _count?: true | WalletTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletTransactionMaxAggregateInputType
  }

  export type GetWalletTransactionAggregateType<T extends WalletTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateWalletTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalletTransaction[P]>
      : GetScalarType<T[P], AggregateWalletTransaction[P]>
  }




  export type WalletTransactionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithAggregationInput | WalletTransactionOrderByWithAggregationInput[]
    by: WalletTransactionScalarFieldEnum[] | WalletTransactionScalarFieldEnum
    having?: WalletTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletTransactionCountAggregateInputType | true
    _avg?: WalletTransactionAvgAggregateInputType
    _sum?: WalletTransactionSumAggregateInputType
    _min?: WalletTransactionMinAggregateInputType
    _max?: WalletTransactionMaxAggregateInputType
  }


  export type WalletTransactionGroupByOutputType = {
    id: string
    type: string
    amount: number
    status: string
    description: string | null
    fromUserId: string | null
    toUserId: string | null
    txHash: string | null
    createdAt: Date
    completedAt: Date | null
    _count: WalletTransactionCountAggregateOutputType | null
    _avg: WalletTransactionAvgAggregateOutputType | null
    _sum: WalletTransactionSumAggregateOutputType | null
    _min: WalletTransactionMinAggregateOutputType | null
    _max: WalletTransactionMaxAggregateOutputType | null
  }

  type GetWalletTransactionGroupByPayload<T extends WalletTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
        }
      >
    >


  export type WalletTransactionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    status?: boolean
    description?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    txHash?: boolean
    createdAt?: boolean
    completedAt?: boolean
    fromUser?: boolean | WalletTransaction$fromUserArgs<ExtArgs>
    toUser?: boolean | WalletTransaction$toUserArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectScalar = {
    id?: boolean
    type?: boolean
    amount?: boolean
    status?: boolean
    description?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    txHash?: boolean
    createdAt?: boolean
    completedAt?: boolean
  }

  export type WalletTransactionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    fromUser?: boolean | WalletTransaction$fromUserArgs<ExtArgs>
    toUser?: boolean | WalletTransaction$toUserArgs<ExtArgs>
  }


  type WalletTransactionGetPayload<S extends boolean | null | undefined | WalletTransactionArgs> = $Types.GetResult<WalletTransactionPayload, S>

  type WalletTransactionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WalletTransactionFindManyArgs, 'select' | 'include'> & {
      select?: WalletTransactionCountAggregateInputType | true
    }

  export interface WalletTransactionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletTransaction'], meta: { name: 'WalletTransaction' } }
    /**
     * Find zero or one WalletTransaction that matches the filter.
     * @param {WalletTransactionFindUniqueArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WalletTransactionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WalletTransactionFindUniqueArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WalletTransaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WalletTransactionFindUniqueOrThrowArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WalletTransactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletTransactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WalletTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindFirstArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WalletTransactionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletTransactionFindFirstArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WalletTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindFirstOrThrowArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WalletTransactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletTransactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WalletTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WalletTransactions
     * const walletTransactions = await prisma.walletTransaction.findMany()
     * 
     * // Get first 10 WalletTransactions
     * const walletTransactions = await prisma.walletTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WalletTransactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletTransactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WalletTransaction.
     * @param {WalletTransactionCreateArgs} args - Arguments to create a WalletTransaction.
     * @example
     * // Create one WalletTransaction
     * const WalletTransaction = await prisma.walletTransaction.create({
     *   data: {
     *     // ... data to create a WalletTransaction
     *   }
     * })
     * 
    **/
    create<T extends WalletTransactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletTransactionCreateArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a WalletTransaction.
     * @param {WalletTransactionDeleteArgs} args - Arguments to delete one WalletTransaction.
     * @example
     * // Delete one WalletTransaction
     * const WalletTransaction = await prisma.walletTransaction.delete({
     *   where: {
     *     // ... filter to delete one WalletTransaction
     *   }
     * })
     * 
    **/
    delete<T extends WalletTransactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WalletTransactionDeleteArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WalletTransaction.
     * @param {WalletTransactionUpdateArgs} args - Arguments to update one WalletTransaction.
     * @example
     * // Update one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WalletTransactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletTransactionUpdateArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WalletTransactions.
     * @param {WalletTransactionDeleteManyArgs} args - Arguments to filter WalletTransactions to delete.
     * @example
     * // Delete a few WalletTransactions
     * const { count } = await prisma.walletTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WalletTransactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletTransactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WalletTransactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WalletTransactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WalletTransaction.
     * @param {WalletTransactionUpsertArgs} args - Arguments to update or create a WalletTransaction.
     * @example
     * // Update or create a WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.upsert({
     *   create: {
     *     // ... data to create a WalletTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WalletTransaction we want to update
     *   }
     * })
    **/
    upsert<T extends WalletTransactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WalletTransactionUpsertArgs<ExtArgs>>
    ): Prisma__WalletTransactionClient<$Types.GetResult<WalletTransactionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WalletTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionCountArgs} args - Arguments to filter WalletTransactions to count.
     * @example
     * // Count the number of WalletTransactions
     * const count = await prisma.walletTransaction.count({
     *   where: {
     *     // ... the filter for the WalletTransactions we want to count
     *   }
     * })
    **/
    count<T extends WalletTransactionCountArgs>(
      args?: Subset<T, WalletTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WalletTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletTransactionAggregateArgs>(args: Subset<T, WalletTransactionAggregateArgs>): Prisma.PrismaPromise<GetWalletTransactionAggregateType<T>>

    /**
     * Group by WalletTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletTransactionGroupByArgs['orderBy'] }
        : { orderBy?: WalletTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WalletTransaction model
   */
  readonly fields: WalletTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WalletTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WalletTransactionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    fromUser<T extends WalletTransaction$fromUserArgs<ExtArgs> = {}>(args?: Subset<T, WalletTransaction$fromUserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    toUser<T extends WalletTransaction$toUserArgs<ExtArgs> = {}>(args?: Subset<T, WalletTransaction$toUserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the WalletTransaction model
   */ 
  interface WalletTransactionFieldRefs {
    readonly id: FieldRef<"WalletTransaction", 'String'>
    readonly type: FieldRef<"WalletTransaction", 'String'>
    readonly amount: FieldRef<"WalletTransaction", 'Float'>
    readonly status: FieldRef<"WalletTransaction", 'String'>
    readonly description: FieldRef<"WalletTransaction", 'String'>
    readonly fromUserId: FieldRef<"WalletTransaction", 'String'>
    readonly toUserId: FieldRef<"WalletTransaction", 'String'>
    readonly txHash: FieldRef<"WalletTransaction", 'String'>
    readonly createdAt: FieldRef<"WalletTransaction", 'DateTime'>
    readonly completedAt: FieldRef<"WalletTransaction", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * WalletTransaction findUnique
   */
  export type WalletTransactionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where: WalletTransactionWhereUniqueInput
  }


  /**
   * WalletTransaction findUniqueOrThrow
   */
  export type WalletTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where: WalletTransactionWhereUniqueInput
  }


  /**
   * WalletTransaction findFirst
   */
  export type WalletTransactionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletTransactions.
     */
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }


  /**
   * WalletTransaction findFirstOrThrow
   */
  export type WalletTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletTransactions.
     */
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }


  /**
   * WalletTransaction findMany
   */
  export type WalletTransactionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransactions to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }


  /**
   * WalletTransaction create
   */
  export type WalletTransactionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a WalletTransaction.
     */
    data: XOR<WalletTransactionCreateInput, WalletTransactionUncheckedCreateInput>
  }


  /**
   * WalletTransaction update
   */
  export type WalletTransactionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a WalletTransaction.
     */
    data: XOR<WalletTransactionUpdateInput, WalletTransactionUncheckedUpdateInput>
    /**
     * Choose, which WalletTransaction to update.
     */
    where: WalletTransactionWhereUniqueInput
  }


  /**
   * WalletTransaction updateMany
   */
  export type WalletTransactionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WalletTransactions.
     */
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyInput>
    /**
     * Filter which WalletTransactions to update
     */
    where?: WalletTransactionWhereInput
  }


  /**
   * WalletTransaction upsert
   */
  export type WalletTransactionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the WalletTransaction to update in case it exists.
     */
    where: WalletTransactionWhereUniqueInput
    /**
     * In case the WalletTransaction found by the `where` argument doesn't exist, create a new WalletTransaction with this data.
     */
    create: XOR<WalletTransactionCreateInput, WalletTransactionUncheckedCreateInput>
    /**
     * In case the WalletTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletTransactionUpdateInput, WalletTransactionUncheckedUpdateInput>
  }


  /**
   * WalletTransaction delete
   */
  export type WalletTransactionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter which WalletTransaction to delete.
     */
    where: WalletTransactionWhereUniqueInput
  }


  /**
   * WalletTransaction deleteMany
   */
  export type WalletTransactionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletTransactions to delete
     */
    where?: WalletTransactionWhereInput
  }


  /**
   * WalletTransaction.fromUser
   */
  export type WalletTransaction$fromUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * WalletTransaction.toUser
   */
  export type WalletTransaction$toUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * WalletTransaction without action
   */
  export type WalletTransactionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletTransactionInclude<ExtArgs> | null
  }



  /**
   * Model AIProfile
   */


  export type AggregateAIProfile = {
    _count: AIProfileCountAggregateOutputType | null
    _avg: AIProfileAvgAggregateOutputType | null
    _sum: AIProfileSumAggregateOutputType | null
    _min: AIProfileMinAggregateOutputType | null
    _max: AIProfileMaxAggregateOutputType | null
  }

  export type AIProfileAvgAggregateOutputType = {
    temperature: number | null
    maxTokens: number | null
    topP: number | null
  }

  export type AIProfileSumAggregateOutputType = {
    temperature: number | null
    maxTokens: number | null
    topP: number | null
  }

  export type AIProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    llmProvider: string | null
    llmModel: string | null
    temperature: number | null
    maxTokens: number | null
    topP: number | null
    systemPrompt: string | null
    roleTemplate: string | null
    contextPrompts: string | null
    activeVoiceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    llmProvider: string | null
    llmModel: string | null
    temperature: number | null
    maxTokens: number | null
    topP: number | null
    systemPrompt: string | null
    roleTemplate: string | null
    contextPrompts: string | null
    activeVoiceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIProfileCountAggregateOutputType = {
    id: number
    userId: number
    llmProvider: number
    llmModel: number
    temperature: number
    maxTokens: number
    topP: number
    systemPrompt: number
    roleTemplate: number
    contextPrompts: number
    activeVoiceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AIProfileAvgAggregateInputType = {
    temperature?: true
    maxTokens?: true
    topP?: true
  }

  export type AIProfileSumAggregateInputType = {
    temperature?: true
    maxTokens?: true
    topP?: true
  }

  export type AIProfileMinAggregateInputType = {
    id?: true
    userId?: true
    llmProvider?: true
    llmModel?: true
    temperature?: true
    maxTokens?: true
    topP?: true
    systemPrompt?: true
    roleTemplate?: true
    contextPrompts?: true
    activeVoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    llmProvider?: true
    llmModel?: true
    temperature?: true
    maxTokens?: true
    topP?: true
    systemPrompt?: true
    roleTemplate?: true
    contextPrompts?: true
    activeVoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIProfileCountAggregateInputType = {
    id?: true
    userId?: true
    llmProvider?: true
    llmModel?: true
    temperature?: true
    maxTokens?: true
    topP?: true
    systemPrompt?: true
    roleTemplate?: true
    contextPrompts?: true
    activeVoiceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AIProfileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIProfile to aggregate.
     */
    where?: AIProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProfiles to fetch.
     */
    orderBy?: AIProfileOrderByWithRelationInput | AIProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIProfiles
    **/
    _count?: true | AIProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIProfileMaxAggregateInputType
  }

  export type GetAIProfileAggregateType<T extends AIProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateAIProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIProfile[P]>
      : GetScalarType<T[P], AggregateAIProfile[P]>
  }




  export type AIProfileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AIProfileWhereInput
    orderBy?: AIProfileOrderByWithAggregationInput | AIProfileOrderByWithAggregationInput[]
    by: AIProfileScalarFieldEnum[] | AIProfileScalarFieldEnum
    having?: AIProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIProfileCountAggregateInputType | true
    _avg?: AIProfileAvgAggregateInputType
    _sum?: AIProfileSumAggregateInputType
    _min?: AIProfileMinAggregateInputType
    _max?: AIProfileMaxAggregateInputType
  }


  export type AIProfileGroupByOutputType = {
    id: string
    userId: string
    llmProvider: string
    llmModel: string
    temperature: number
    maxTokens: number
    topP: number
    systemPrompt: string | null
    roleTemplate: string
    contextPrompts: string | null
    activeVoiceId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AIProfileCountAggregateOutputType | null
    _avg: AIProfileAvgAggregateOutputType | null
    _sum: AIProfileSumAggregateOutputType | null
    _min: AIProfileMinAggregateOutputType | null
    _max: AIProfileMaxAggregateOutputType | null
  }

  type GetAIProfileGroupByPayload<T extends AIProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIProfileGroupByOutputType[P]>
            : GetScalarType<T[P], AIProfileGroupByOutputType[P]>
        }
      >
    >


  export type AIProfileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    llmProvider?: boolean
    llmModel?: boolean
    temperature?: boolean
    maxTokens?: boolean
    topP?: boolean
    systemPrompt?: boolean
    roleTemplate?: boolean
    contextPrompts?: boolean
    activeVoiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    voiceTrainings?: boolean | AIProfile$voiceTrainingsArgs<ExtArgs>
    _count?: boolean | AIProfileCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["aIProfile"]>

  export type AIProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    llmProvider?: boolean
    llmModel?: boolean
    temperature?: boolean
    maxTokens?: boolean
    topP?: boolean
    systemPrompt?: boolean
    roleTemplate?: boolean
    contextPrompts?: boolean
    activeVoiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AIProfileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    voiceTrainings?: boolean | AIProfile$voiceTrainingsArgs<ExtArgs>
    _count?: boolean | AIProfileCountOutputTypeArgs<ExtArgs>
  }


  type AIProfileGetPayload<S extends boolean | null | undefined | AIProfileArgs> = $Types.GetResult<AIProfilePayload, S>

  type AIProfileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AIProfileFindManyArgs, 'select' | 'include'> & {
      select?: AIProfileCountAggregateInputType | true
    }

  export interface AIProfileDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIProfile'], meta: { name: 'AIProfile' } }
    /**
     * Find zero or one AIProfile that matches the filter.
     * @param {AIProfileFindUniqueArgs} args - Arguments to find a AIProfile
     * @example
     * // Get one AIProfile
     * const aIProfile = await prisma.aIProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AIProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AIProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AIProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AIProfileFindUniqueOrThrowArgs} args - Arguments to find a AIProfile
     * @example
     * // Get one AIProfile
     * const aIProfile = await prisma.aIProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AIProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AIProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileFindFirstArgs} args - Arguments to find a AIProfile
     * @example
     * // Get one AIProfile
     * const aIProfile = await prisma.aIProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AIProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProfileFindFirstArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AIProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileFindFirstOrThrowArgs} args - Arguments to find a AIProfile
     * @example
     * // Get one AIProfile
     * const aIProfile = await prisma.aIProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AIProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AIProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIProfiles
     * const aIProfiles = await prisma.aIProfile.findMany()
     * 
     * // Get first 10 AIProfiles
     * const aIProfiles = await prisma.aIProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIProfileWithIdOnly = await prisma.aIProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AIProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AIProfile.
     * @param {AIProfileCreateArgs} args - Arguments to create a AIProfile.
     * @example
     * // Create one AIProfile
     * const AIProfile = await prisma.aIProfile.create({
     *   data: {
     *     // ... data to create a AIProfile
     *   }
     * })
     * 
    **/
    create<T extends AIProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AIProfileCreateArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a AIProfile.
     * @param {AIProfileDeleteArgs} args - Arguments to delete one AIProfile.
     * @example
     * // Delete one AIProfile
     * const AIProfile = await prisma.aIProfile.delete({
     *   where: {
     *     // ... filter to delete one AIProfile
     *   }
     * })
     * 
    **/
    delete<T extends AIProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AIProfileDeleteArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AIProfile.
     * @param {AIProfileUpdateArgs} args - Arguments to update one AIProfile.
     * @example
     * // Update one AIProfile
     * const aIProfile = await prisma.aIProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AIProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AIProfileUpdateArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AIProfiles.
     * @param {AIProfileDeleteManyArgs} args - Arguments to filter AIProfiles to delete.
     * @example
     * // Delete a few AIProfiles
     * const { count } = await prisma.aIProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AIProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIProfiles
     * const aIProfile = await prisma.aIProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AIProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AIProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIProfile.
     * @param {AIProfileUpsertArgs} args - Arguments to update or create a AIProfile.
     * @example
     * // Update or create a AIProfile
     * const aIProfile = await prisma.aIProfile.upsert({
     *   create: {
     *     // ... data to create a AIProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIProfile we want to update
     *   }
     * })
    **/
    upsert<T extends AIProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AIProfileUpsertArgs<ExtArgs>>
    ): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AIProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileCountArgs} args - Arguments to filter AIProfiles to count.
     * @example
     * // Count the number of AIProfiles
     * const count = await prisma.aIProfile.count({
     *   where: {
     *     // ... the filter for the AIProfiles we want to count
     *   }
     * })
    **/
    count<T extends AIProfileCountArgs>(
      args?: Subset<T, AIProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIProfileAggregateArgs>(args: Subset<T, AIProfileAggregateArgs>): Prisma.PrismaPromise<GetAIProfileAggregateType<T>>

    /**
     * Group by AIProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIProfileGroupByArgs['orderBy'] }
        : { orderBy?: AIProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIProfile model
   */
  readonly fields: AIProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AIProfileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    voiceTrainings<T extends AIProfile$voiceTrainingsArgs<ExtArgs> = {}>(args?: Subset<T, AIProfile$voiceTrainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the AIProfile model
   */ 
  interface AIProfileFieldRefs {
    readonly id: FieldRef<"AIProfile", 'String'>
    readonly userId: FieldRef<"AIProfile", 'String'>
    readonly llmProvider: FieldRef<"AIProfile", 'String'>
    readonly llmModel: FieldRef<"AIProfile", 'String'>
    readonly temperature: FieldRef<"AIProfile", 'Float'>
    readonly maxTokens: FieldRef<"AIProfile", 'Int'>
    readonly topP: FieldRef<"AIProfile", 'Float'>
    readonly systemPrompt: FieldRef<"AIProfile", 'String'>
    readonly roleTemplate: FieldRef<"AIProfile", 'String'>
    readonly contextPrompts: FieldRef<"AIProfile", 'String'>
    readonly activeVoiceId: FieldRef<"AIProfile", 'String'>
    readonly createdAt: FieldRef<"AIProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"AIProfile", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AIProfile findUnique
   */
  export type AIProfileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * Filter, which AIProfile to fetch.
     */
    where: AIProfileWhereUniqueInput
  }


  /**
   * AIProfile findUniqueOrThrow
   */
  export type AIProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * Filter, which AIProfile to fetch.
     */
    where: AIProfileWhereUniqueInput
  }


  /**
   * AIProfile findFirst
   */
  export type AIProfileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * Filter, which AIProfile to fetch.
     */
    where?: AIProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProfiles to fetch.
     */
    orderBy?: AIProfileOrderByWithRelationInput | AIProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIProfiles.
     */
    cursor?: AIProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIProfiles.
     */
    distinct?: AIProfileScalarFieldEnum | AIProfileScalarFieldEnum[]
  }


  /**
   * AIProfile findFirstOrThrow
   */
  export type AIProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * Filter, which AIProfile to fetch.
     */
    where?: AIProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProfiles to fetch.
     */
    orderBy?: AIProfileOrderByWithRelationInput | AIProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIProfiles.
     */
    cursor?: AIProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIProfiles.
     */
    distinct?: AIProfileScalarFieldEnum | AIProfileScalarFieldEnum[]
  }


  /**
   * AIProfile findMany
   */
  export type AIProfileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * Filter, which AIProfiles to fetch.
     */
    where?: AIProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIProfiles to fetch.
     */
    orderBy?: AIProfileOrderByWithRelationInput | AIProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIProfiles.
     */
    cursor?: AIProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIProfiles.
     */
    skip?: number
    distinct?: AIProfileScalarFieldEnum | AIProfileScalarFieldEnum[]
  }


  /**
   * AIProfile create
   */
  export type AIProfileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a AIProfile.
     */
    data: XOR<AIProfileCreateInput, AIProfileUncheckedCreateInput>
  }


  /**
   * AIProfile update
   */
  export type AIProfileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a AIProfile.
     */
    data: XOR<AIProfileUpdateInput, AIProfileUncheckedUpdateInput>
    /**
     * Choose, which AIProfile to update.
     */
    where: AIProfileWhereUniqueInput
  }


  /**
   * AIProfile updateMany
   */
  export type AIProfileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIProfiles.
     */
    data: XOR<AIProfileUpdateManyMutationInput, AIProfileUncheckedUpdateManyInput>
    /**
     * Filter which AIProfiles to update
     */
    where?: AIProfileWhereInput
  }


  /**
   * AIProfile upsert
   */
  export type AIProfileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the AIProfile to update in case it exists.
     */
    where: AIProfileWhereUniqueInput
    /**
     * In case the AIProfile found by the `where` argument doesn't exist, create a new AIProfile with this data.
     */
    create: XOR<AIProfileCreateInput, AIProfileUncheckedCreateInput>
    /**
     * In case the AIProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIProfileUpdateInput, AIProfileUncheckedUpdateInput>
  }


  /**
   * AIProfile delete
   */
  export type AIProfileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
    /**
     * Filter which AIProfile to delete.
     */
    where: AIProfileWhereUniqueInput
  }


  /**
   * AIProfile deleteMany
   */
  export type AIProfileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIProfiles to delete
     */
    where?: AIProfileWhereInput
  }


  /**
   * AIProfile.voiceTrainings
   */
  export type AIProfile$voiceTrainingsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    where?: VoiceTrainingWhereInput
    orderBy?: VoiceTrainingOrderByWithRelationInput | VoiceTrainingOrderByWithRelationInput[]
    cursor?: VoiceTrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoiceTrainingScalarFieldEnum | VoiceTrainingScalarFieldEnum[]
  }


  /**
   * AIProfile without action
   */
  export type AIProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIProfile
     */
    select?: AIProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIProfileInclude<ExtArgs> | null
  }



  /**
   * Model AIMemory
   */


  export type AggregateAIMemory = {
    _count: AIMemoryCountAggregateOutputType | null
    _avg: AIMemoryAvgAggregateOutputType | null
    _sum: AIMemorySumAggregateOutputType | null
    _min: AIMemoryMinAggregateOutputType | null
    _max: AIMemoryMaxAggregateOutputType | null
  }

  export type AIMemoryAvgAggregateOutputType = {
    score: number | null
  }

  export type AIMemorySumAggregateOutputType = {
    score: number | null
  }

  export type AIMemoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    category: string | null
    title: string | null
    content: string | null
    tags: string | null
    score: number | null
    metadata: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIMemoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    category: string | null
    title: string | null
    content: string | null
    tags: string | null
    score: number | null
    metadata: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AIMemoryCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    category: number
    title: number
    content: number
    tags: number
    score: number
    metadata: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AIMemoryAvgAggregateInputType = {
    score?: true
  }

  export type AIMemorySumAggregateInputType = {
    score?: true
  }

  export type AIMemoryMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    category?: true
    title?: true
    content?: true
    tags?: true
    score?: true
    metadata?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIMemoryMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    category?: true
    title?: true
    content?: true
    tags?: true
    score?: true
    metadata?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AIMemoryCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    category?: true
    title?: true
    content?: true
    tags?: true
    score?: true
    metadata?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AIMemoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIMemory to aggregate.
     */
    where?: AIMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIMemories to fetch.
     */
    orderBy?: AIMemoryOrderByWithRelationInput | AIMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIMemories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIMemories
    **/
    _count?: true | AIMemoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIMemoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIMemorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIMemoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIMemoryMaxAggregateInputType
  }

  export type GetAIMemoryAggregateType<T extends AIMemoryAggregateArgs> = {
        [P in keyof T & keyof AggregateAIMemory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIMemory[P]>
      : GetScalarType<T[P], AggregateAIMemory[P]>
  }




  export type AIMemoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AIMemoryWhereInput
    orderBy?: AIMemoryOrderByWithAggregationInput | AIMemoryOrderByWithAggregationInput[]
    by: AIMemoryScalarFieldEnum[] | AIMemoryScalarFieldEnum
    having?: AIMemoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIMemoryCountAggregateInputType | true
    _avg?: AIMemoryAvgAggregateInputType
    _sum?: AIMemorySumAggregateInputType
    _min?: AIMemoryMinAggregateInputType
    _max?: AIMemoryMaxAggregateInputType
  }


  export type AIMemoryGroupByOutputType = {
    id: string
    userId: string
    type: string
    category: string
    title: string
    content: string
    tags: string
    score: number
    metadata: string | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AIMemoryCountAggregateOutputType | null
    _avg: AIMemoryAvgAggregateOutputType | null
    _sum: AIMemorySumAggregateOutputType | null
    _min: AIMemoryMinAggregateOutputType | null
    _max: AIMemoryMaxAggregateOutputType | null
  }

  type GetAIMemoryGroupByPayload<T extends AIMemoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIMemoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIMemoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIMemoryGroupByOutputType[P]>
            : GetScalarType<T[P], AIMemoryGroupByOutputType[P]>
        }
      >
    >


  export type AIMemorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    category?: boolean
    title?: boolean
    content?: boolean
    tags?: boolean
    score?: boolean
    metadata?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["aIMemory"]>

  export type AIMemorySelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    category?: boolean
    title?: boolean
    content?: boolean
    tags?: boolean
    score?: boolean
    metadata?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AIMemoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type AIMemoryGetPayload<S extends boolean | null | undefined | AIMemoryArgs> = $Types.GetResult<AIMemoryPayload, S>

  type AIMemoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AIMemoryFindManyArgs, 'select' | 'include'> & {
      select?: AIMemoryCountAggregateInputType | true
    }

  export interface AIMemoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIMemory'], meta: { name: 'AIMemory' } }
    /**
     * Find zero or one AIMemory that matches the filter.
     * @param {AIMemoryFindUniqueArgs} args - Arguments to find a AIMemory
     * @example
     * // Get one AIMemory
     * const aIMemory = await prisma.aIMemory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AIMemoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AIMemoryFindUniqueArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AIMemory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AIMemoryFindUniqueOrThrowArgs} args - Arguments to find a AIMemory
     * @example
     * // Get one AIMemory
     * const aIMemory = await prisma.aIMemory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AIMemoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AIMemoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AIMemory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryFindFirstArgs} args - Arguments to find a AIMemory
     * @example
     * // Get one AIMemory
     * const aIMemory = await prisma.aIMemory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AIMemoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AIMemoryFindFirstArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AIMemory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryFindFirstOrThrowArgs} args - Arguments to find a AIMemory
     * @example
     * // Get one AIMemory
     * const aIMemory = await prisma.aIMemory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AIMemoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AIMemoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AIMemories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIMemories
     * const aIMemories = await prisma.aIMemory.findMany()
     * 
     * // Get first 10 AIMemories
     * const aIMemories = await prisma.aIMemory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIMemoryWithIdOnly = await prisma.aIMemory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AIMemoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIMemoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AIMemory.
     * @param {AIMemoryCreateArgs} args - Arguments to create a AIMemory.
     * @example
     * // Create one AIMemory
     * const AIMemory = await prisma.aIMemory.create({
     *   data: {
     *     // ... data to create a AIMemory
     *   }
     * })
     * 
    **/
    create<T extends AIMemoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AIMemoryCreateArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a AIMemory.
     * @param {AIMemoryDeleteArgs} args - Arguments to delete one AIMemory.
     * @example
     * // Delete one AIMemory
     * const AIMemory = await prisma.aIMemory.delete({
     *   where: {
     *     // ... filter to delete one AIMemory
     *   }
     * })
     * 
    **/
    delete<T extends AIMemoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AIMemoryDeleteArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AIMemory.
     * @param {AIMemoryUpdateArgs} args - Arguments to update one AIMemory.
     * @example
     * // Update one AIMemory
     * const aIMemory = await prisma.aIMemory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AIMemoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AIMemoryUpdateArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AIMemories.
     * @param {AIMemoryDeleteManyArgs} args - Arguments to filter AIMemories to delete.
     * @example
     * // Delete a few AIMemories
     * const { count } = await prisma.aIMemory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AIMemoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AIMemoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIMemories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIMemories
     * const aIMemory = await prisma.aIMemory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AIMemoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AIMemoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AIMemory.
     * @param {AIMemoryUpsertArgs} args - Arguments to update or create a AIMemory.
     * @example
     * // Update or create a AIMemory
     * const aIMemory = await prisma.aIMemory.upsert({
     *   create: {
     *     // ... data to create a AIMemory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIMemory we want to update
     *   }
     * })
    **/
    upsert<T extends AIMemoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AIMemoryUpsertArgs<ExtArgs>>
    ): Prisma__AIMemoryClient<$Types.GetResult<AIMemoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AIMemories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryCountArgs} args - Arguments to filter AIMemories to count.
     * @example
     * // Count the number of AIMemories
     * const count = await prisma.aIMemory.count({
     *   where: {
     *     // ... the filter for the AIMemories we want to count
     *   }
     * })
    **/
    count<T extends AIMemoryCountArgs>(
      args?: Subset<T, AIMemoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIMemoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIMemory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIMemoryAggregateArgs>(args: Subset<T, AIMemoryAggregateArgs>): Prisma.PrismaPromise<GetAIMemoryAggregateType<T>>

    /**
     * Group by AIMemory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIMemoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIMemoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIMemoryGroupByArgs['orderBy'] }
        : { orderBy?: AIMemoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIMemoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIMemoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIMemory model
   */
  readonly fields: AIMemoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIMemory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AIMemoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the AIMemory model
   */ 
  interface AIMemoryFieldRefs {
    readonly id: FieldRef<"AIMemory", 'String'>
    readonly userId: FieldRef<"AIMemory", 'String'>
    readonly type: FieldRef<"AIMemory", 'String'>
    readonly category: FieldRef<"AIMemory", 'String'>
    readonly title: FieldRef<"AIMemory", 'String'>
    readonly content: FieldRef<"AIMemory", 'String'>
    readonly tags: FieldRef<"AIMemory", 'String'>
    readonly score: FieldRef<"AIMemory", 'Float'>
    readonly metadata: FieldRef<"AIMemory", 'String'>
    readonly expiresAt: FieldRef<"AIMemory", 'DateTime'>
    readonly createdAt: FieldRef<"AIMemory", 'DateTime'>
    readonly updatedAt: FieldRef<"AIMemory", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AIMemory findUnique
   */
  export type AIMemoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * Filter, which AIMemory to fetch.
     */
    where: AIMemoryWhereUniqueInput
  }


  /**
   * AIMemory findUniqueOrThrow
   */
  export type AIMemoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * Filter, which AIMemory to fetch.
     */
    where: AIMemoryWhereUniqueInput
  }


  /**
   * AIMemory findFirst
   */
  export type AIMemoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * Filter, which AIMemory to fetch.
     */
    where?: AIMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIMemories to fetch.
     */
    orderBy?: AIMemoryOrderByWithRelationInput | AIMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIMemories.
     */
    cursor?: AIMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIMemories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIMemories.
     */
    distinct?: AIMemoryScalarFieldEnum | AIMemoryScalarFieldEnum[]
  }


  /**
   * AIMemory findFirstOrThrow
   */
  export type AIMemoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * Filter, which AIMemory to fetch.
     */
    where?: AIMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIMemories to fetch.
     */
    orderBy?: AIMemoryOrderByWithRelationInput | AIMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIMemories.
     */
    cursor?: AIMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIMemories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIMemories.
     */
    distinct?: AIMemoryScalarFieldEnum | AIMemoryScalarFieldEnum[]
  }


  /**
   * AIMemory findMany
   */
  export type AIMemoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * Filter, which AIMemories to fetch.
     */
    where?: AIMemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIMemories to fetch.
     */
    orderBy?: AIMemoryOrderByWithRelationInput | AIMemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIMemories.
     */
    cursor?: AIMemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIMemories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIMemories.
     */
    skip?: number
    distinct?: AIMemoryScalarFieldEnum | AIMemoryScalarFieldEnum[]
  }


  /**
   * AIMemory create
   */
  export type AIMemoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * The data needed to create a AIMemory.
     */
    data: XOR<AIMemoryCreateInput, AIMemoryUncheckedCreateInput>
  }


  /**
   * AIMemory update
   */
  export type AIMemoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * The data needed to update a AIMemory.
     */
    data: XOR<AIMemoryUpdateInput, AIMemoryUncheckedUpdateInput>
    /**
     * Choose, which AIMemory to update.
     */
    where: AIMemoryWhereUniqueInput
  }


  /**
   * AIMemory updateMany
   */
  export type AIMemoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIMemories.
     */
    data: XOR<AIMemoryUpdateManyMutationInput, AIMemoryUncheckedUpdateManyInput>
    /**
     * Filter which AIMemories to update
     */
    where?: AIMemoryWhereInput
  }


  /**
   * AIMemory upsert
   */
  export type AIMemoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * The filter to search for the AIMemory to update in case it exists.
     */
    where: AIMemoryWhereUniqueInput
    /**
     * In case the AIMemory found by the `where` argument doesn't exist, create a new AIMemory with this data.
     */
    create: XOR<AIMemoryCreateInput, AIMemoryUncheckedCreateInput>
    /**
     * In case the AIMemory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIMemoryUpdateInput, AIMemoryUncheckedUpdateInput>
  }


  /**
   * AIMemory delete
   */
  export type AIMemoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
    /**
     * Filter which AIMemory to delete.
     */
    where: AIMemoryWhereUniqueInput
  }


  /**
   * AIMemory deleteMany
   */
  export type AIMemoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIMemories to delete
     */
    where?: AIMemoryWhereInput
  }


  /**
   * AIMemory without action
   */
  export type AIMemoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIMemory
     */
    select?: AIMemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AIMemoryInclude<ExtArgs> | null
  }



  /**
   * Model VoiceTraining
   */


  export type AggregateVoiceTraining = {
    _count: VoiceTrainingCountAggregateOutputType | null
    _avg: VoiceTrainingAvgAggregateOutputType | null
    _sum: VoiceTrainingSumAggregateOutputType | null
    _min: VoiceTrainingMinAggregateOutputType | null
    _max: VoiceTrainingMaxAggregateOutputType | null
  }

  export type VoiceTrainingAvgAggregateOutputType = {
    progress: number | null
    sampleCount: number | null
    duration: number | null
    accuracy: number | null
  }

  export type VoiceTrainingSumAggregateOutputType = {
    progress: number | null
    sampleCount: number | null
    duration: number | null
    accuracy: number | null
  }

  export type VoiceTrainingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    profileId: string | null
    name: string | null
    version: string | null
    status: string | null
    progress: number | null
    sampleKeys: string | null
    modelKey: string | null
    sampleCount: number | null
    duration: number | null
    accuracy: number | null
    trainingStartedAt: Date | null
    trainingCompletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VoiceTrainingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    profileId: string | null
    name: string | null
    version: string | null
    status: string | null
    progress: number | null
    sampleKeys: string | null
    modelKey: string | null
    sampleCount: number | null
    duration: number | null
    accuracy: number | null
    trainingStartedAt: Date | null
    trainingCompletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VoiceTrainingCountAggregateOutputType = {
    id: number
    userId: number
    profileId: number
    name: number
    version: number
    status: number
    progress: number
    sampleKeys: number
    modelKey: number
    sampleCount: number
    duration: number
    accuracy: number
    trainingStartedAt: number
    trainingCompletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VoiceTrainingAvgAggregateInputType = {
    progress?: true
    sampleCount?: true
    duration?: true
    accuracy?: true
  }

  export type VoiceTrainingSumAggregateInputType = {
    progress?: true
    sampleCount?: true
    duration?: true
    accuracy?: true
  }

  export type VoiceTrainingMinAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    name?: true
    version?: true
    status?: true
    progress?: true
    sampleKeys?: true
    modelKey?: true
    sampleCount?: true
    duration?: true
    accuracy?: true
    trainingStartedAt?: true
    trainingCompletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VoiceTrainingMaxAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    name?: true
    version?: true
    status?: true
    progress?: true
    sampleKeys?: true
    modelKey?: true
    sampleCount?: true
    duration?: true
    accuracy?: true
    trainingStartedAt?: true
    trainingCompletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VoiceTrainingCountAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    name?: true
    version?: true
    status?: true
    progress?: true
    sampleKeys?: true
    modelKey?: true
    sampleCount?: true
    duration?: true
    accuracy?: true
    trainingStartedAt?: true
    trainingCompletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VoiceTrainingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoiceTraining to aggregate.
     */
    where?: VoiceTrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceTrainings to fetch.
     */
    orderBy?: VoiceTrainingOrderByWithRelationInput | VoiceTrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoiceTrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceTrainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceTrainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoiceTrainings
    **/
    _count?: true | VoiceTrainingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoiceTrainingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoiceTrainingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoiceTrainingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoiceTrainingMaxAggregateInputType
  }

  export type GetVoiceTrainingAggregateType<T extends VoiceTrainingAggregateArgs> = {
        [P in keyof T & keyof AggregateVoiceTraining]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoiceTraining[P]>
      : GetScalarType<T[P], AggregateVoiceTraining[P]>
  }




  export type VoiceTrainingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VoiceTrainingWhereInput
    orderBy?: VoiceTrainingOrderByWithAggregationInput | VoiceTrainingOrderByWithAggregationInput[]
    by: VoiceTrainingScalarFieldEnum[] | VoiceTrainingScalarFieldEnum
    having?: VoiceTrainingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoiceTrainingCountAggregateInputType | true
    _avg?: VoiceTrainingAvgAggregateInputType
    _sum?: VoiceTrainingSumAggregateInputType
    _min?: VoiceTrainingMinAggregateInputType
    _max?: VoiceTrainingMaxAggregateInputType
  }


  export type VoiceTrainingGroupByOutputType = {
    id: string
    userId: string
    profileId: string
    name: string
    version: string
    status: string
    progress: number
    sampleKeys: string
    modelKey: string | null
    sampleCount: number
    duration: number
    accuracy: number | null
    trainingStartedAt: Date | null
    trainingCompletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: VoiceTrainingCountAggregateOutputType | null
    _avg: VoiceTrainingAvgAggregateOutputType | null
    _sum: VoiceTrainingSumAggregateOutputType | null
    _min: VoiceTrainingMinAggregateOutputType | null
    _max: VoiceTrainingMaxAggregateOutputType | null
  }

  type GetVoiceTrainingGroupByPayload<T extends VoiceTrainingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoiceTrainingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoiceTrainingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoiceTrainingGroupByOutputType[P]>
            : GetScalarType<T[P], VoiceTrainingGroupByOutputType[P]>
        }
      >
    >


  export type VoiceTrainingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    profileId?: boolean
    name?: boolean
    version?: boolean
    status?: boolean
    progress?: boolean
    sampleKeys?: boolean
    modelKey?: boolean
    sampleCount?: boolean
    duration?: boolean
    accuracy?: boolean
    trainingStartedAt?: boolean
    trainingCompletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | AIProfileArgs<ExtArgs>
  }, ExtArgs["result"]["voiceTraining"]>

  export type VoiceTrainingSelectScalar = {
    id?: boolean
    userId?: boolean
    profileId?: boolean
    name?: boolean
    version?: boolean
    status?: boolean
    progress?: boolean
    sampleKeys?: boolean
    modelKey?: boolean
    sampleCount?: boolean
    duration?: boolean
    accuracy?: boolean
    trainingStartedAt?: boolean
    trainingCompletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VoiceTrainingInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    profile?: boolean | AIProfileArgs<ExtArgs>
  }


  type VoiceTrainingGetPayload<S extends boolean | null | undefined | VoiceTrainingArgs> = $Types.GetResult<VoiceTrainingPayload, S>

  type VoiceTrainingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VoiceTrainingFindManyArgs, 'select' | 'include'> & {
      select?: VoiceTrainingCountAggregateInputType | true
    }

  export interface VoiceTrainingDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoiceTraining'], meta: { name: 'VoiceTraining' } }
    /**
     * Find zero or one VoiceTraining that matches the filter.
     * @param {VoiceTrainingFindUniqueArgs} args - Arguments to find a VoiceTraining
     * @example
     * // Get one VoiceTraining
     * const voiceTraining = await prisma.voiceTraining.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoiceTrainingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VoiceTrainingFindUniqueArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VoiceTraining that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VoiceTrainingFindUniqueOrThrowArgs} args - Arguments to find a VoiceTraining
     * @example
     * // Get one VoiceTraining
     * const voiceTraining = await prisma.voiceTraining.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VoiceTrainingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VoiceTrainingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VoiceTraining that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingFindFirstArgs} args - Arguments to find a VoiceTraining
     * @example
     * // Get one VoiceTraining
     * const voiceTraining = await prisma.voiceTraining.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoiceTrainingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VoiceTrainingFindFirstArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VoiceTraining that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingFindFirstOrThrowArgs} args - Arguments to find a VoiceTraining
     * @example
     * // Get one VoiceTraining
     * const voiceTraining = await prisma.voiceTraining.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VoiceTrainingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VoiceTrainingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VoiceTrainings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoiceTrainings
     * const voiceTrainings = await prisma.voiceTraining.findMany()
     * 
     * // Get first 10 VoiceTrainings
     * const voiceTrainings = await prisma.voiceTraining.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voiceTrainingWithIdOnly = await prisma.voiceTraining.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VoiceTrainingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoiceTrainingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VoiceTraining.
     * @param {VoiceTrainingCreateArgs} args - Arguments to create a VoiceTraining.
     * @example
     * // Create one VoiceTraining
     * const VoiceTraining = await prisma.voiceTraining.create({
     *   data: {
     *     // ... data to create a VoiceTraining
     *   }
     * })
     * 
    **/
    create<T extends VoiceTrainingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VoiceTrainingCreateArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a VoiceTraining.
     * @param {VoiceTrainingDeleteArgs} args - Arguments to delete one VoiceTraining.
     * @example
     * // Delete one VoiceTraining
     * const VoiceTraining = await prisma.voiceTraining.delete({
     *   where: {
     *     // ... filter to delete one VoiceTraining
     *   }
     * })
     * 
    **/
    delete<T extends VoiceTrainingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VoiceTrainingDeleteArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VoiceTraining.
     * @param {VoiceTrainingUpdateArgs} args - Arguments to update one VoiceTraining.
     * @example
     * // Update one VoiceTraining
     * const voiceTraining = await prisma.voiceTraining.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoiceTrainingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VoiceTrainingUpdateArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VoiceTrainings.
     * @param {VoiceTrainingDeleteManyArgs} args - Arguments to filter VoiceTrainings to delete.
     * @example
     * // Delete a few VoiceTrainings
     * const { count } = await prisma.voiceTraining.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoiceTrainingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VoiceTrainingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoiceTrainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoiceTrainings
     * const voiceTraining = await prisma.voiceTraining.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoiceTrainingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VoiceTrainingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VoiceTraining.
     * @param {VoiceTrainingUpsertArgs} args - Arguments to update or create a VoiceTraining.
     * @example
     * // Update or create a VoiceTraining
     * const voiceTraining = await prisma.voiceTraining.upsert({
     *   create: {
     *     // ... data to create a VoiceTraining
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoiceTraining we want to update
     *   }
     * })
    **/
    upsert<T extends VoiceTrainingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VoiceTrainingUpsertArgs<ExtArgs>>
    ): Prisma__VoiceTrainingClient<$Types.GetResult<VoiceTrainingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VoiceTrainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingCountArgs} args - Arguments to filter VoiceTrainings to count.
     * @example
     * // Count the number of VoiceTrainings
     * const count = await prisma.voiceTraining.count({
     *   where: {
     *     // ... the filter for the VoiceTrainings we want to count
     *   }
     * })
    **/
    count<T extends VoiceTrainingCountArgs>(
      args?: Subset<T, VoiceTrainingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoiceTrainingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoiceTraining.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoiceTrainingAggregateArgs>(args: Subset<T, VoiceTrainingAggregateArgs>): Prisma.PrismaPromise<GetVoiceTrainingAggregateType<T>>

    /**
     * Group by VoiceTraining.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoiceTrainingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoiceTrainingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoiceTrainingGroupByArgs['orderBy'] }
        : { orderBy?: VoiceTrainingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoiceTrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoiceTrainingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoiceTraining model
   */
  readonly fields: VoiceTrainingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoiceTraining.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoiceTrainingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    profile<T extends AIProfileArgs<ExtArgs> = {}>(args?: Subset<T, AIProfileArgs<ExtArgs>>): Prisma__AIProfileClient<$Types.GetResult<AIProfilePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the VoiceTraining model
   */ 
  interface VoiceTrainingFieldRefs {
    readonly id: FieldRef<"VoiceTraining", 'String'>
    readonly userId: FieldRef<"VoiceTraining", 'String'>
    readonly profileId: FieldRef<"VoiceTraining", 'String'>
    readonly name: FieldRef<"VoiceTraining", 'String'>
    readonly version: FieldRef<"VoiceTraining", 'String'>
    readonly status: FieldRef<"VoiceTraining", 'String'>
    readonly progress: FieldRef<"VoiceTraining", 'Int'>
    readonly sampleKeys: FieldRef<"VoiceTraining", 'String'>
    readonly modelKey: FieldRef<"VoiceTraining", 'String'>
    readonly sampleCount: FieldRef<"VoiceTraining", 'Int'>
    readonly duration: FieldRef<"VoiceTraining", 'Int'>
    readonly accuracy: FieldRef<"VoiceTraining", 'Float'>
    readonly trainingStartedAt: FieldRef<"VoiceTraining", 'DateTime'>
    readonly trainingCompletedAt: FieldRef<"VoiceTraining", 'DateTime'>
    readonly createdAt: FieldRef<"VoiceTraining", 'DateTime'>
    readonly updatedAt: FieldRef<"VoiceTraining", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * VoiceTraining findUnique
   */
  export type VoiceTrainingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * Filter, which VoiceTraining to fetch.
     */
    where: VoiceTrainingWhereUniqueInput
  }


  /**
   * VoiceTraining findUniqueOrThrow
   */
  export type VoiceTrainingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * Filter, which VoiceTraining to fetch.
     */
    where: VoiceTrainingWhereUniqueInput
  }


  /**
   * VoiceTraining findFirst
   */
  export type VoiceTrainingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * Filter, which VoiceTraining to fetch.
     */
    where?: VoiceTrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceTrainings to fetch.
     */
    orderBy?: VoiceTrainingOrderByWithRelationInput | VoiceTrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoiceTrainings.
     */
    cursor?: VoiceTrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceTrainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceTrainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoiceTrainings.
     */
    distinct?: VoiceTrainingScalarFieldEnum | VoiceTrainingScalarFieldEnum[]
  }


  /**
   * VoiceTraining findFirstOrThrow
   */
  export type VoiceTrainingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * Filter, which VoiceTraining to fetch.
     */
    where?: VoiceTrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceTrainings to fetch.
     */
    orderBy?: VoiceTrainingOrderByWithRelationInput | VoiceTrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoiceTrainings.
     */
    cursor?: VoiceTrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceTrainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceTrainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoiceTrainings.
     */
    distinct?: VoiceTrainingScalarFieldEnum | VoiceTrainingScalarFieldEnum[]
  }


  /**
   * VoiceTraining findMany
   */
  export type VoiceTrainingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * Filter, which VoiceTrainings to fetch.
     */
    where?: VoiceTrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoiceTrainings to fetch.
     */
    orderBy?: VoiceTrainingOrderByWithRelationInput | VoiceTrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoiceTrainings.
     */
    cursor?: VoiceTrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoiceTrainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoiceTrainings.
     */
    skip?: number
    distinct?: VoiceTrainingScalarFieldEnum | VoiceTrainingScalarFieldEnum[]
  }


  /**
   * VoiceTraining create
   */
  export type VoiceTrainingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * The data needed to create a VoiceTraining.
     */
    data: XOR<VoiceTrainingCreateInput, VoiceTrainingUncheckedCreateInput>
  }


  /**
   * VoiceTraining update
   */
  export type VoiceTrainingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * The data needed to update a VoiceTraining.
     */
    data: XOR<VoiceTrainingUpdateInput, VoiceTrainingUncheckedUpdateInput>
    /**
     * Choose, which VoiceTraining to update.
     */
    where: VoiceTrainingWhereUniqueInput
  }


  /**
   * VoiceTraining updateMany
   */
  export type VoiceTrainingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoiceTrainings.
     */
    data: XOR<VoiceTrainingUpdateManyMutationInput, VoiceTrainingUncheckedUpdateManyInput>
    /**
     * Filter which VoiceTrainings to update
     */
    where?: VoiceTrainingWhereInput
  }


  /**
   * VoiceTraining upsert
   */
  export type VoiceTrainingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * The filter to search for the VoiceTraining to update in case it exists.
     */
    where: VoiceTrainingWhereUniqueInput
    /**
     * In case the VoiceTraining found by the `where` argument doesn't exist, create a new VoiceTraining with this data.
     */
    create: XOR<VoiceTrainingCreateInput, VoiceTrainingUncheckedCreateInput>
    /**
     * In case the VoiceTraining was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoiceTrainingUpdateInput, VoiceTrainingUncheckedUpdateInput>
  }


  /**
   * VoiceTraining delete
   */
  export type VoiceTrainingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
    /**
     * Filter which VoiceTraining to delete.
     */
    where: VoiceTrainingWhereUniqueInput
  }


  /**
   * VoiceTraining deleteMany
   */
  export type VoiceTrainingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoiceTrainings to delete
     */
    where?: VoiceTrainingWhereInput
  }


  /**
   * VoiceTraining without action
   */
  export type VoiceTrainingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoiceTraining
     */
    select?: VoiceTrainingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VoiceTrainingInclude<ExtArgs> | null
  }



  /**
   * Model FacegateDevice
   */


  export type AggregateFacegateDevice = {
    _count: FacegateDeviceCountAggregateOutputType | null
    _avg: FacegateDeviceAvgAggregateOutputType | null
    _sum: FacegateDeviceSumAggregateOutputType | null
    _min: FacegateDeviceMinAggregateOutputType | null
    _max: FacegateDeviceMaxAggregateOutputType | null
  }

  export type FacegateDeviceAvgAggregateOutputType = {
    relaySlots: number | null
    lastSeenTs: number | null
    status: number | null
  }

  export type FacegateDeviceSumAggregateOutputType = {
    relaySlots: number | null
    lastSeenTs: bigint | null
    status: number | null
  }

  export type FacegateDeviceMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    prodType: string | null
    prodName: string | null
    relaySlots: number | null
    lastSeenTs: bigint | null
    fwVersion: string | null
    status: number | null
    online: boolean | null
    tz: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegateDeviceMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    prodType: string | null
    prodName: string | null
    relaySlots: number | null
    lastSeenTs: bigint | null
    fwVersion: string | null
    status: number | null
    online: boolean | null
    tz: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegateDeviceCountAggregateOutputType = {
    id: number
    deviceId: number
    prodType: number
    prodName: number
    relaySlots: number
    lastSeenTs: number
    fwVersion: number
    status: number
    online: number
    tz: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacegateDeviceAvgAggregateInputType = {
    relaySlots?: true
    lastSeenTs?: true
    status?: true
  }

  export type FacegateDeviceSumAggregateInputType = {
    relaySlots?: true
    lastSeenTs?: true
    status?: true
  }

  export type FacegateDeviceMinAggregateInputType = {
    id?: true
    deviceId?: true
    prodType?: true
    prodName?: true
    relaySlots?: true
    lastSeenTs?: true
    fwVersion?: true
    status?: true
    online?: true
    tz?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegateDeviceMaxAggregateInputType = {
    id?: true
    deviceId?: true
    prodType?: true
    prodName?: true
    relaySlots?: true
    lastSeenTs?: true
    fwVersion?: true
    status?: true
    online?: true
    tz?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegateDeviceCountAggregateInputType = {
    id?: true
    deviceId?: true
    prodType?: true
    prodName?: true
    relaySlots?: true
    lastSeenTs?: true
    fwVersion?: true
    status?: true
    online?: true
    tz?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacegateDeviceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateDevice to aggregate.
     */
    where?: FacegateDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateDevices to fetch.
     */
    orderBy?: FacegateDeviceOrderByWithRelationInput | FacegateDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegateDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegateDevices
    **/
    _count?: true | FacegateDeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacegateDeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacegateDeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegateDeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegateDeviceMaxAggregateInputType
  }

  export type GetFacegateDeviceAggregateType<T extends FacegateDeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegateDevice[P]>
      : GetScalarType<T[P], AggregateFacegateDevice[P]>
  }




  export type FacegateDeviceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateDeviceWhereInput
    orderBy?: FacegateDeviceOrderByWithAggregationInput | FacegateDeviceOrderByWithAggregationInput[]
    by: FacegateDeviceScalarFieldEnum[] | FacegateDeviceScalarFieldEnum
    having?: FacegateDeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegateDeviceCountAggregateInputType | true
    _avg?: FacegateDeviceAvgAggregateInputType
    _sum?: FacegateDeviceSumAggregateInputType
    _min?: FacegateDeviceMinAggregateInputType
    _max?: FacegateDeviceMaxAggregateInputType
  }


  export type FacegateDeviceGroupByOutputType = {
    id: string
    deviceId: string
    prodType: string | null
    prodName: string | null
    relaySlots: number
    lastSeenTs: bigint | null
    fwVersion: string | null
    status: number
    online: boolean
    tz: string | null
    createdAt: Date
    updatedAt: Date
    _count: FacegateDeviceCountAggregateOutputType | null
    _avg: FacegateDeviceAvgAggregateOutputType | null
    _sum: FacegateDeviceSumAggregateOutputType | null
    _min: FacegateDeviceMinAggregateOutputType | null
    _max: FacegateDeviceMaxAggregateOutputType | null
  }

  type GetFacegateDeviceGroupByPayload<T extends FacegateDeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegateDeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegateDeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegateDeviceGroupByOutputType[P]>
            : GetScalarType<T[P], FacegateDeviceGroupByOutputType[P]>
        }
      >
    >


  export type FacegateDeviceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    prodType?: boolean
    prodName?: boolean
    relaySlots?: boolean
    lastSeenTs?: boolean
    fwVersion?: boolean
    status?: boolean
    online?: boolean
    tz?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    records?: boolean | FacegateDevice$recordsArgs<ExtArgs>
    scheduleTargets?: boolean | FacegateDevice$scheduleTargetsArgs<ExtArgs>
    jobs?: boolean | FacegateDevice$jobsArgs<ExtArgs>
    _count?: boolean | FacegateDeviceCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["facegateDevice"]>

  export type FacegateDeviceSelectScalar = {
    id?: boolean
    deviceId?: boolean
    prodType?: boolean
    prodName?: boolean
    relaySlots?: boolean
    lastSeenTs?: boolean
    fwVersion?: boolean
    status?: boolean
    online?: boolean
    tz?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FacegateDeviceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    records?: boolean | FacegateDevice$recordsArgs<ExtArgs>
    scheduleTargets?: boolean | FacegateDevice$scheduleTargetsArgs<ExtArgs>
    jobs?: boolean | FacegateDevice$jobsArgs<ExtArgs>
    _count?: boolean | FacegateDeviceCountOutputTypeArgs<ExtArgs>
  }


  type FacegateDeviceGetPayload<S extends boolean | null | undefined | FacegateDeviceArgs> = $Types.GetResult<FacegateDevicePayload, S>

  type FacegateDeviceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegateDeviceFindManyArgs, 'select' | 'include'> & {
      select?: FacegateDeviceCountAggregateInputType | true
    }

  export interface FacegateDeviceDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegateDevice'], meta: { name: 'FacegateDevice' } }
    /**
     * Find zero or one FacegateDevice that matches the filter.
     * @param {FacegateDeviceFindUniqueArgs} args - Arguments to find a FacegateDevice
     * @example
     * // Get one FacegateDevice
     * const facegateDevice = await prisma.facegateDevice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegateDeviceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateDeviceFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegateDevice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegateDeviceFindUniqueOrThrowArgs} args - Arguments to find a FacegateDevice
     * @example
     * // Get one FacegateDevice
     * const facegateDevice = await prisma.facegateDevice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegateDeviceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateDeviceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegateDevice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceFindFirstArgs} args - Arguments to find a FacegateDevice
     * @example
     * // Get one FacegateDevice
     * const facegateDevice = await prisma.facegateDevice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegateDeviceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateDeviceFindFirstArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegateDevice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceFindFirstOrThrowArgs} args - Arguments to find a FacegateDevice
     * @example
     * // Get one FacegateDevice
     * const facegateDevice = await prisma.facegateDevice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegateDeviceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateDeviceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegateDevices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegateDevices
     * const facegateDevices = await prisma.facegateDevice.findMany()
     * 
     * // Get first 10 FacegateDevices
     * const facegateDevices = await prisma.facegateDevice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegateDeviceWithIdOnly = await prisma.facegateDevice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegateDeviceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateDeviceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegateDevice.
     * @param {FacegateDeviceCreateArgs} args - Arguments to create a FacegateDevice.
     * @example
     * // Create one FacegateDevice
     * const FacegateDevice = await prisma.facegateDevice.create({
     *   data: {
     *     // ... data to create a FacegateDevice
     *   }
     * })
     * 
    **/
    create<T extends FacegateDeviceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateDeviceCreateArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegateDevice.
     * @param {FacegateDeviceDeleteArgs} args - Arguments to delete one FacegateDevice.
     * @example
     * // Delete one FacegateDevice
     * const FacegateDevice = await prisma.facegateDevice.delete({
     *   where: {
     *     // ... filter to delete one FacegateDevice
     *   }
     * })
     * 
    **/
    delete<T extends FacegateDeviceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateDeviceDeleteArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegateDevice.
     * @param {FacegateDeviceUpdateArgs} args - Arguments to update one FacegateDevice.
     * @example
     * // Update one FacegateDevice
     * const facegateDevice = await prisma.facegateDevice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegateDeviceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateDeviceUpdateArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegateDevices.
     * @param {FacegateDeviceDeleteManyArgs} args - Arguments to filter FacegateDevices to delete.
     * @example
     * // Delete a few FacegateDevices
     * const { count } = await prisma.facegateDevice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegateDeviceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateDeviceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegateDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegateDevices
     * const facegateDevice = await prisma.facegateDevice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegateDeviceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateDeviceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegateDevice.
     * @param {FacegateDeviceUpsertArgs} args - Arguments to update or create a FacegateDevice.
     * @example
     * // Update or create a FacegateDevice
     * const facegateDevice = await prisma.facegateDevice.upsert({
     *   create: {
     *     // ... data to create a FacegateDevice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegateDevice we want to update
     *   }
     * })
    **/
    upsert<T extends FacegateDeviceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateDeviceUpsertArgs<ExtArgs>>
    ): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegateDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceCountArgs} args - Arguments to filter FacegateDevices to count.
     * @example
     * // Count the number of FacegateDevices
     * const count = await prisma.facegateDevice.count({
     *   where: {
     *     // ... the filter for the FacegateDevices we want to count
     *   }
     * })
    **/
    count<T extends FacegateDeviceCountArgs>(
      args?: Subset<T, FacegateDeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegateDeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegateDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegateDeviceAggregateArgs>(args: Subset<T, FacegateDeviceAggregateArgs>): Prisma.PrismaPromise<GetFacegateDeviceAggregateType<T>>

    /**
     * Group by FacegateDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateDeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegateDeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegateDeviceGroupByArgs['orderBy'] }
        : { orderBy?: FacegateDeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegateDeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegateDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegateDevice model
   */
  readonly fields: FacegateDeviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegateDevice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegateDeviceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    records<T extends FacegateDevice$recordsArgs<ExtArgs> = {}>(args?: Subset<T, FacegateDevice$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findMany'>| Null>;

    scheduleTargets<T extends FacegateDevice$scheduleTargetsArgs<ExtArgs> = {}>(args?: Subset<T, FacegateDevice$scheduleTargetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findMany'>| Null>;

    jobs<T extends FacegateDevice$jobsArgs<ExtArgs> = {}>(args?: Subset<T, FacegateDevice$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegateDevice model
   */ 
  interface FacegateDeviceFieldRefs {
    readonly id: FieldRef<"FacegateDevice", 'String'>
    readonly deviceId: FieldRef<"FacegateDevice", 'String'>
    readonly prodType: FieldRef<"FacegateDevice", 'String'>
    readonly prodName: FieldRef<"FacegateDevice", 'String'>
    readonly relaySlots: FieldRef<"FacegateDevice", 'Int'>
    readonly lastSeenTs: FieldRef<"FacegateDevice", 'BigInt'>
    readonly fwVersion: FieldRef<"FacegateDevice", 'String'>
    readonly status: FieldRef<"FacegateDevice", 'Int'>
    readonly online: FieldRef<"FacegateDevice", 'Boolean'>
    readonly tz: FieldRef<"FacegateDevice", 'String'>
    readonly createdAt: FieldRef<"FacegateDevice", 'DateTime'>
    readonly updatedAt: FieldRef<"FacegateDevice", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FacegateDevice findUnique
   */
  export type FacegateDeviceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * Filter, which FacegateDevice to fetch.
     */
    where: FacegateDeviceWhereUniqueInput
  }


  /**
   * FacegateDevice findUniqueOrThrow
   */
  export type FacegateDeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * Filter, which FacegateDevice to fetch.
     */
    where: FacegateDeviceWhereUniqueInput
  }


  /**
   * FacegateDevice findFirst
   */
  export type FacegateDeviceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * Filter, which FacegateDevice to fetch.
     */
    where?: FacegateDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateDevices to fetch.
     */
    orderBy?: FacegateDeviceOrderByWithRelationInput | FacegateDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateDevices.
     */
    cursor?: FacegateDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateDevices.
     */
    distinct?: FacegateDeviceScalarFieldEnum | FacegateDeviceScalarFieldEnum[]
  }


  /**
   * FacegateDevice findFirstOrThrow
   */
  export type FacegateDeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * Filter, which FacegateDevice to fetch.
     */
    where?: FacegateDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateDevices to fetch.
     */
    orderBy?: FacegateDeviceOrderByWithRelationInput | FacegateDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateDevices.
     */
    cursor?: FacegateDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateDevices.
     */
    distinct?: FacegateDeviceScalarFieldEnum | FacegateDeviceScalarFieldEnum[]
  }


  /**
   * FacegateDevice findMany
   */
  export type FacegateDeviceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * Filter, which FacegateDevices to fetch.
     */
    where?: FacegateDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateDevices to fetch.
     */
    orderBy?: FacegateDeviceOrderByWithRelationInput | FacegateDeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegateDevices.
     */
    cursor?: FacegateDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateDevices.
     */
    skip?: number
    distinct?: FacegateDeviceScalarFieldEnum | FacegateDeviceScalarFieldEnum[]
  }


  /**
   * FacegateDevice create
   */
  export type FacegateDeviceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegateDevice.
     */
    data: XOR<FacegateDeviceCreateInput, FacegateDeviceUncheckedCreateInput>
  }


  /**
   * FacegateDevice update
   */
  export type FacegateDeviceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegateDevice.
     */
    data: XOR<FacegateDeviceUpdateInput, FacegateDeviceUncheckedUpdateInput>
    /**
     * Choose, which FacegateDevice to update.
     */
    where: FacegateDeviceWhereUniqueInput
  }


  /**
   * FacegateDevice updateMany
   */
  export type FacegateDeviceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegateDevices.
     */
    data: XOR<FacegateDeviceUpdateManyMutationInput, FacegateDeviceUncheckedUpdateManyInput>
    /**
     * Filter which FacegateDevices to update
     */
    where?: FacegateDeviceWhereInput
  }


  /**
   * FacegateDevice upsert
   */
  export type FacegateDeviceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegateDevice to update in case it exists.
     */
    where: FacegateDeviceWhereUniqueInput
    /**
     * In case the FacegateDevice found by the `where` argument doesn't exist, create a new FacegateDevice with this data.
     */
    create: XOR<FacegateDeviceCreateInput, FacegateDeviceUncheckedCreateInput>
    /**
     * In case the FacegateDevice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegateDeviceUpdateInput, FacegateDeviceUncheckedUpdateInput>
  }


  /**
   * FacegateDevice delete
   */
  export type FacegateDeviceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
    /**
     * Filter which FacegateDevice to delete.
     */
    where: FacegateDeviceWhereUniqueInput
  }


  /**
   * FacegateDevice deleteMany
   */
  export type FacegateDeviceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateDevices to delete
     */
    where?: FacegateDeviceWhereInput
  }


  /**
   * FacegateDevice.records
   */
  export type FacegateDevice$recordsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    where?: FacegateRecordWhereInput
    orderBy?: FacegateRecordOrderByWithRelationInput | FacegateRecordOrderByWithRelationInput[]
    cursor?: FacegateRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateRecordScalarFieldEnum | FacegateRecordScalarFieldEnum[]
  }


  /**
   * FacegateDevice.scheduleTargets
   */
  export type FacegateDevice$scheduleTargetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    where?: FacegateScheduleTargetWhereInput
    orderBy?: FacegateScheduleTargetOrderByWithRelationInput | FacegateScheduleTargetOrderByWithRelationInput[]
    cursor?: FacegateScheduleTargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateScheduleTargetScalarFieldEnum | FacegateScheduleTargetScalarFieldEnum[]
  }


  /**
   * FacegateDevice.jobs
   */
  export type FacegateDevice$jobsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    where?: FacegateJobWhereInput
    orderBy?: FacegateJobOrderByWithRelationInput | FacegateJobOrderByWithRelationInput[]
    cursor?: FacegateJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateJobScalarFieldEnum | FacegateJobScalarFieldEnum[]
  }


  /**
   * FacegateDevice without action
   */
  export type FacegateDeviceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateDevice
     */
    select?: FacegateDeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateDeviceInclude<ExtArgs> | null
  }



  /**
   * Model FacegatePerson
   */


  export type AggregateFacegatePerson = {
    _count: FacegatePersonCountAggregateOutputType | null
    _avg: FacegatePersonAvgAggregateOutputType | null
    _sum: FacegatePersonSumAggregateOutputType | null
    _min: FacegatePersonMinAggregateOutputType | null
    _max: FacegatePersonMaxAggregateOutputType | null
  }

  export type FacegatePersonAvgAggregateOutputType = {
    syncStatus: number | null
  }

  export type FacegatePersonSumAggregateOutputType = {
    syncStatus: number | null
  }

  export type FacegatePersonMinAggregateOutputType = {
    id: string | null
    userId: string | null
    phone: string | null
    personName: string | null
    localImagePath: string | null
    imageChecksum: string | null
    icCardId: string | null
    idCardNo: string | null
    memberLevel: string | null
    memberExpiry: Date | null
    isApeLord: boolean | null
    passPlans: string | null
    syncStatus: number | null
    extInfo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegatePersonMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    phone: string | null
    personName: string | null
    localImagePath: string | null
    imageChecksum: string | null
    icCardId: string | null
    idCardNo: string | null
    memberLevel: string | null
    memberExpiry: Date | null
    isApeLord: boolean | null
    passPlans: string | null
    syncStatus: number | null
    extInfo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegatePersonCountAggregateOutputType = {
    id: number
    userId: number
    phone: number
    personName: number
    localImagePath: number
    imageChecksum: number
    icCardId: number
    idCardNo: number
    memberLevel: number
    memberExpiry: number
    isApeLord: number
    passPlans: number
    syncStatus: number
    extInfo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacegatePersonAvgAggregateInputType = {
    syncStatus?: true
  }

  export type FacegatePersonSumAggregateInputType = {
    syncStatus?: true
  }

  export type FacegatePersonMinAggregateInputType = {
    id?: true
    userId?: true
    phone?: true
    personName?: true
    localImagePath?: true
    imageChecksum?: true
    icCardId?: true
    idCardNo?: true
    memberLevel?: true
    memberExpiry?: true
    isApeLord?: true
    passPlans?: true
    syncStatus?: true
    extInfo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegatePersonMaxAggregateInputType = {
    id?: true
    userId?: true
    phone?: true
    personName?: true
    localImagePath?: true
    imageChecksum?: true
    icCardId?: true
    idCardNo?: true
    memberLevel?: true
    memberExpiry?: true
    isApeLord?: true
    passPlans?: true
    syncStatus?: true
    extInfo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegatePersonCountAggregateInputType = {
    id?: true
    userId?: true
    phone?: true
    personName?: true
    localImagePath?: true
    imageChecksum?: true
    icCardId?: true
    idCardNo?: true
    memberLevel?: true
    memberExpiry?: true
    isApeLord?: true
    passPlans?: true
    syncStatus?: true
    extInfo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacegatePersonAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegatePerson to aggregate.
     */
    where?: FacegatePersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegatePeople to fetch.
     */
    orderBy?: FacegatePersonOrderByWithRelationInput | FacegatePersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegatePersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegatePeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegatePeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegatePeople
    **/
    _count?: true | FacegatePersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacegatePersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacegatePersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegatePersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegatePersonMaxAggregateInputType
  }

  export type GetFacegatePersonAggregateType<T extends FacegatePersonAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegatePerson[P]>
      : GetScalarType<T[P], AggregateFacegatePerson[P]>
  }




  export type FacegatePersonGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegatePersonWhereInput
    orderBy?: FacegatePersonOrderByWithAggregationInput | FacegatePersonOrderByWithAggregationInput[]
    by: FacegatePersonScalarFieldEnum[] | FacegatePersonScalarFieldEnum
    having?: FacegatePersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegatePersonCountAggregateInputType | true
    _avg?: FacegatePersonAvgAggregateInputType
    _sum?: FacegatePersonSumAggregateInputType
    _min?: FacegatePersonMinAggregateInputType
    _max?: FacegatePersonMaxAggregateInputType
  }


  export type FacegatePersonGroupByOutputType = {
    id: string
    userId: string | null
    phone: string
    personName: string
    localImagePath: string | null
    imageChecksum: string | null
    icCardId: string | null
    idCardNo: string | null
    memberLevel: string | null
    memberExpiry: Date | null
    isApeLord: boolean
    passPlans: string | null
    syncStatus: number
    extInfo: string | null
    createdAt: Date
    updatedAt: Date
    _count: FacegatePersonCountAggregateOutputType | null
    _avg: FacegatePersonAvgAggregateOutputType | null
    _sum: FacegatePersonSumAggregateOutputType | null
    _min: FacegatePersonMinAggregateOutputType | null
    _max: FacegatePersonMaxAggregateOutputType | null
  }

  type GetFacegatePersonGroupByPayload<T extends FacegatePersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegatePersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegatePersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegatePersonGroupByOutputType[P]>
            : GetScalarType<T[P], FacegatePersonGroupByOutputType[P]>
        }
      >
    >


  export type FacegatePersonSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    phone?: boolean
    personName?: boolean
    localImagePath?: boolean
    imageChecksum?: boolean
    icCardId?: boolean
    idCardNo?: boolean
    memberLevel?: boolean
    memberExpiry?: boolean
    isApeLord?: boolean
    passPlans?: boolean
    syncStatus?: boolean
    extInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | FacegatePerson$userArgs<ExtArgs>
    records?: boolean | FacegatePerson$recordsArgs<ExtArgs>
    _count?: boolean | FacegatePersonCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["facegatePerson"]>

  export type FacegatePersonSelectScalar = {
    id?: boolean
    userId?: boolean
    phone?: boolean
    personName?: boolean
    localImagePath?: boolean
    imageChecksum?: boolean
    icCardId?: boolean
    idCardNo?: boolean
    memberLevel?: boolean
    memberExpiry?: boolean
    isApeLord?: boolean
    passPlans?: boolean
    syncStatus?: boolean
    extInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FacegatePersonInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | FacegatePerson$userArgs<ExtArgs>
    records?: boolean | FacegatePerson$recordsArgs<ExtArgs>
    _count?: boolean | FacegatePersonCountOutputTypeArgs<ExtArgs>
  }


  type FacegatePersonGetPayload<S extends boolean | null | undefined | FacegatePersonArgs> = $Types.GetResult<FacegatePersonPayload, S>

  type FacegatePersonCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegatePersonFindManyArgs, 'select' | 'include'> & {
      select?: FacegatePersonCountAggregateInputType | true
    }

  export interface FacegatePersonDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegatePerson'], meta: { name: 'FacegatePerson' } }
    /**
     * Find zero or one FacegatePerson that matches the filter.
     * @param {FacegatePersonFindUniqueArgs} args - Arguments to find a FacegatePerson
     * @example
     * // Get one FacegatePerson
     * const facegatePerson = await prisma.facegatePerson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegatePersonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegatePersonFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegatePerson that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegatePersonFindUniqueOrThrowArgs} args - Arguments to find a FacegatePerson
     * @example
     * // Get one FacegatePerson
     * const facegatePerson = await prisma.facegatePerson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegatePersonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegatePersonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegatePerson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonFindFirstArgs} args - Arguments to find a FacegatePerson
     * @example
     * // Get one FacegatePerson
     * const facegatePerson = await prisma.facegatePerson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegatePersonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegatePersonFindFirstArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegatePerson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonFindFirstOrThrowArgs} args - Arguments to find a FacegatePerson
     * @example
     * // Get one FacegatePerson
     * const facegatePerson = await prisma.facegatePerson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegatePersonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegatePersonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegatePeople that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegatePeople
     * const facegatePeople = await prisma.facegatePerson.findMany()
     * 
     * // Get first 10 FacegatePeople
     * const facegatePeople = await prisma.facegatePerson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegatePersonWithIdOnly = await prisma.facegatePerson.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegatePersonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegatePersonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegatePerson.
     * @param {FacegatePersonCreateArgs} args - Arguments to create a FacegatePerson.
     * @example
     * // Create one FacegatePerson
     * const FacegatePerson = await prisma.facegatePerson.create({
     *   data: {
     *     // ... data to create a FacegatePerson
     *   }
     * })
     * 
    **/
    create<T extends FacegatePersonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegatePersonCreateArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegatePerson.
     * @param {FacegatePersonDeleteArgs} args - Arguments to delete one FacegatePerson.
     * @example
     * // Delete one FacegatePerson
     * const FacegatePerson = await prisma.facegatePerson.delete({
     *   where: {
     *     // ... filter to delete one FacegatePerson
     *   }
     * })
     * 
    **/
    delete<T extends FacegatePersonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegatePersonDeleteArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegatePerson.
     * @param {FacegatePersonUpdateArgs} args - Arguments to update one FacegatePerson.
     * @example
     * // Update one FacegatePerson
     * const facegatePerson = await prisma.facegatePerson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegatePersonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegatePersonUpdateArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegatePeople.
     * @param {FacegatePersonDeleteManyArgs} args - Arguments to filter FacegatePeople to delete.
     * @example
     * // Delete a few FacegatePeople
     * const { count } = await prisma.facegatePerson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegatePersonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegatePersonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegatePeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegatePeople
     * const facegatePerson = await prisma.facegatePerson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegatePersonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegatePersonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegatePerson.
     * @param {FacegatePersonUpsertArgs} args - Arguments to update or create a FacegatePerson.
     * @example
     * // Update or create a FacegatePerson
     * const facegatePerson = await prisma.facegatePerson.upsert({
     *   create: {
     *     // ... data to create a FacegatePerson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegatePerson we want to update
     *   }
     * })
    **/
    upsert<T extends FacegatePersonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegatePersonUpsertArgs<ExtArgs>>
    ): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegatePeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonCountArgs} args - Arguments to filter FacegatePeople to count.
     * @example
     * // Count the number of FacegatePeople
     * const count = await prisma.facegatePerson.count({
     *   where: {
     *     // ... the filter for the FacegatePeople we want to count
     *   }
     * })
    **/
    count<T extends FacegatePersonCountArgs>(
      args?: Subset<T, FacegatePersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegatePersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegatePerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegatePersonAggregateArgs>(args: Subset<T, FacegatePersonAggregateArgs>): Prisma.PrismaPromise<GetFacegatePersonAggregateType<T>>

    /**
     * Group by FacegatePerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegatePersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegatePersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegatePersonGroupByArgs['orderBy'] }
        : { orderBy?: FacegatePersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegatePersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegatePersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegatePerson model
   */
  readonly fields: FacegatePersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegatePerson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegatePersonClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends FacegatePerson$userArgs<ExtArgs> = {}>(args?: Subset<T, FacegatePerson$userArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    records<T extends FacegatePerson$recordsArgs<ExtArgs> = {}>(args?: Subset<T, FacegatePerson$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegatePerson model
   */ 
  interface FacegatePersonFieldRefs {
    readonly id: FieldRef<"FacegatePerson", 'String'>
    readonly userId: FieldRef<"FacegatePerson", 'String'>
    readonly phone: FieldRef<"FacegatePerson", 'String'>
    readonly personName: FieldRef<"FacegatePerson", 'String'>
    readonly localImagePath: FieldRef<"FacegatePerson", 'String'>
    readonly imageChecksum: FieldRef<"FacegatePerson", 'String'>
    readonly icCardId: FieldRef<"FacegatePerson", 'String'>
    readonly idCardNo: FieldRef<"FacegatePerson", 'String'>
    readonly memberLevel: FieldRef<"FacegatePerson", 'String'>
    readonly memberExpiry: FieldRef<"FacegatePerson", 'DateTime'>
    readonly isApeLord: FieldRef<"FacegatePerson", 'Boolean'>
    readonly passPlans: FieldRef<"FacegatePerson", 'String'>
    readonly syncStatus: FieldRef<"FacegatePerson", 'Int'>
    readonly extInfo: FieldRef<"FacegatePerson", 'String'>
    readonly createdAt: FieldRef<"FacegatePerson", 'DateTime'>
    readonly updatedAt: FieldRef<"FacegatePerson", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FacegatePerson findUnique
   */
  export type FacegatePersonFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * Filter, which FacegatePerson to fetch.
     */
    where: FacegatePersonWhereUniqueInput
  }


  /**
   * FacegatePerson findUniqueOrThrow
   */
  export type FacegatePersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * Filter, which FacegatePerson to fetch.
     */
    where: FacegatePersonWhereUniqueInput
  }


  /**
   * FacegatePerson findFirst
   */
  export type FacegatePersonFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * Filter, which FacegatePerson to fetch.
     */
    where?: FacegatePersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegatePeople to fetch.
     */
    orderBy?: FacegatePersonOrderByWithRelationInput | FacegatePersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegatePeople.
     */
    cursor?: FacegatePersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegatePeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegatePeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegatePeople.
     */
    distinct?: FacegatePersonScalarFieldEnum | FacegatePersonScalarFieldEnum[]
  }


  /**
   * FacegatePerson findFirstOrThrow
   */
  export type FacegatePersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * Filter, which FacegatePerson to fetch.
     */
    where?: FacegatePersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegatePeople to fetch.
     */
    orderBy?: FacegatePersonOrderByWithRelationInput | FacegatePersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegatePeople.
     */
    cursor?: FacegatePersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegatePeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegatePeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegatePeople.
     */
    distinct?: FacegatePersonScalarFieldEnum | FacegatePersonScalarFieldEnum[]
  }


  /**
   * FacegatePerson findMany
   */
  export type FacegatePersonFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * Filter, which FacegatePeople to fetch.
     */
    where?: FacegatePersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegatePeople to fetch.
     */
    orderBy?: FacegatePersonOrderByWithRelationInput | FacegatePersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegatePeople.
     */
    cursor?: FacegatePersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegatePeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegatePeople.
     */
    skip?: number
    distinct?: FacegatePersonScalarFieldEnum | FacegatePersonScalarFieldEnum[]
  }


  /**
   * FacegatePerson create
   */
  export type FacegatePersonCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegatePerson.
     */
    data: XOR<FacegatePersonCreateInput, FacegatePersonUncheckedCreateInput>
  }


  /**
   * FacegatePerson update
   */
  export type FacegatePersonUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegatePerson.
     */
    data: XOR<FacegatePersonUpdateInput, FacegatePersonUncheckedUpdateInput>
    /**
     * Choose, which FacegatePerson to update.
     */
    where: FacegatePersonWhereUniqueInput
  }


  /**
   * FacegatePerson updateMany
   */
  export type FacegatePersonUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegatePeople.
     */
    data: XOR<FacegatePersonUpdateManyMutationInput, FacegatePersonUncheckedUpdateManyInput>
    /**
     * Filter which FacegatePeople to update
     */
    where?: FacegatePersonWhereInput
  }


  /**
   * FacegatePerson upsert
   */
  export type FacegatePersonUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegatePerson to update in case it exists.
     */
    where: FacegatePersonWhereUniqueInput
    /**
     * In case the FacegatePerson found by the `where` argument doesn't exist, create a new FacegatePerson with this data.
     */
    create: XOR<FacegatePersonCreateInput, FacegatePersonUncheckedCreateInput>
    /**
     * In case the FacegatePerson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegatePersonUpdateInput, FacegatePersonUncheckedUpdateInput>
  }


  /**
   * FacegatePerson delete
   */
  export type FacegatePersonDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    /**
     * Filter which FacegatePerson to delete.
     */
    where: FacegatePersonWhereUniqueInput
  }


  /**
   * FacegatePerson deleteMany
   */
  export type FacegatePersonDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegatePeople to delete
     */
    where?: FacegatePersonWhereInput
  }


  /**
   * FacegatePerson.user
   */
  export type FacegatePerson$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * FacegatePerson.records
   */
  export type FacegatePerson$recordsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    where?: FacegateRecordWhereInput
    orderBy?: FacegateRecordOrderByWithRelationInput | FacegateRecordOrderByWithRelationInput[]
    cursor?: FacegateRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateRecordScalarFieldEnum | FacegateRecordScalarFieldEnum[]
  }


  /**
   * FacegatePerson without action
   */
  export type FacegatePersonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
  }



  /**
   * Model FacegateRecord
   */


  export type AggregateFacegateRecord = {
    _count: FacegateRecordCountAggregateOutputType | null
    _avg: FacegateRecordAvgAggregateOutputType | null
    _sum: FacegateRecordSumAggregateOutputType | null
    _min: FacegateRecordMinAggregateOutputType | null
    _max: FacegateRecordMaxAggregateOutputType | null
  }

  export type FacegateRecordAvgAggregateOutputType = {
    recordId: number | null
    recordTime: number | null
    recordType: number | null
    recordPass: number | null
    similarity: number | null
    temperature: number | null
  }

  export type FacegateRecordSumAggregateOutputType = {
    recordId: bigint | null
    recordTime: bigint | null
    recordType: number | null
    recordPass: number | null
    similarity: number | null
    temperature: number | null
  }

  export type FacegateRecordMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    recordId: bigint | null
    personPhone: string | null
    recordTime: bigint | null
    recordType: number | null
    recordPass: number | null
    similarity: number | null
    temperature: number | null
    qrcode: string | null
    healthCodeColor: string | null
    recordPicUrl: string | null
    idCardPicUrl: string | null
    raw: string | null
    createdAt: Date | null
  }

  export type FacegateRecordMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    recordId: bigint | null
    personPhone: string | null
    recordTime: bigint | null
    recordType: number | null
    recordPass: number | null
    similarity: number | null
    temperature: number | null
    qrcode: string | null
    healthCodeColor: string | null
    recordPicUrl: string | null
    idCardPicUrl: string | null
    raw: string | null
    createdAt: Date | null
  }

  export type FacegateRecordCountAggregateOutputType = {
    id: number
    deviceId: number
    recordId: number
    personPhone: number
    recordTime: number
    recordType: number
    recordPass: number
    similarity: number
    temperature: number
    qrcode: number
    healthCodeColor: number
    recordPicUrl: number
    idCardPicUrl: number
    raw: number
    createdAt: number
    _all: number
  }


  export type FacegateRecordAvgAggregateInputType = {
    recordId?: true
    recordTime?: true
    recordType?: true
    recordPass?: true
    similarity?: true
    temperature?: true
  }

  export type FacegateRecordSumAggregateInputType = {
    recordId?: true
    recordTime?: true
    recordType?: true
    recordPass?: true
    similarity?: true
    temperature?: true
  }

  export type FacegateRecordMinAggregateInputType = {
    id?: true
    deviceId?: true
    recordId?: true
    personPhone?: true
    recordTime?: true
    recordType?: true
    recordPass?: true
    similarity?: true
    temperature?: true
    qrcode?: true
    healthCodeColor?: true
    recordPicUrl?: true
    idCardPicUrl?: true
    raw?: true
    createdAt?: true
  }

  export type FacegateRecordMaxAggregateInputType = {
    id?: true
    deviceId?: true
    recordId?: true
    personPhone?: true
    recordTime?: true
    recordType?: true
    recordPass?: true
    similarity?: true
    temperature?: true
    qrcode?: true
    healthCodeColor?: true
    recordPicUrl?: true
    idCardPicUrl?: true
    raw?: true
    createdAt?: true
  }

  export type FacegateRecordCountAggregateInputType = {
    id?: true
    deviceId?: true
    recordId?: true
    personPhone?: true
    recordTime?: true
    recordType?: true
    recordPass?: true
    similarity?: true
    temperature?: true
    qrcode?: true
    healthCodeColor?: true
    recordPicUrl?: true
    idCardPicUrl?: true
    raw?: true
    createdAt?: true
    _all?: true
  }

  export type FacegateRecordAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateRecord to aggregate.
     */
    where?: FacegateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateRecords to fetch.
     */
    orderBy?: FacegateRecordOrderByWithRelationInput | FacegateRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegateRecords
    **/
    _count?: true | FacegateRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacegateRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacegateRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegateRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegateRecordMaxAggregateInputType
  }

  export type GetFacegateRecordAggregateType<T extends FacegateRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegateRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegateRecord[P]>
      : GetScalarType<T[P], AggregateFacegateRecord[P]>
  }




  export type FacegateRecordGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateRecordWhereInput
    orderBy?: FacegateRecordOrderByWithAggregationInput | FacegateRecordOrderByWithAggregationInput[]
    by: FacegateRecordScalarFieldEnum[] | FacegateRecordScalarFieldEnum
    having?: FacegateRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegateRecordCountAggregateInputType | true
    _avg?: FacegateRecordAvgAggregateInputType
    _sum?: FacegateRecordSumAggregateInputType
    _min?: FacegateRecordMinAggregateInputType
    _max?: FacegateRecordMaxAggregateInputType
  }


  export type FacegateRecordGroupByOutputType = {
    id: string
    deviceId: string
    recordId: bigint
    personPhone: string | null
    recordTime: bigint
    recordType: number
    recordPass: number
    similarity: number | null
    temperature: number | null
    qrcode: string | null
    healthCodeColor: string | null
    recordPicUrl: string | null
    idCardPicUrl: string | null
    raw: string | null
    createdAt: Date
    _count: FacegateRecordCountAggregateOutputType | null
    _avg: FacegateRecordAvgAggregateOutputType | null
    _sum: FacegateRecordSumAggregateOutputType | null
    _min: FacegateRecordMinAggregateOutputType | null
    _max: FacegateRecordMaxAggregateOutputType | null
  }

  type GetFacegateRecordGroupByPayload<T extends FacegateRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegateRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegateRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegateRecordGroupByOutputType[P]>
            : GetScalarType<T[P], FacegateRecordGroupByOutputType[P]>
        }
      >
    >


  export type FacegateRecordSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    recordId?: boolean
    personPhone?: boolean
    recordTime?: boolean
    recordType?: boolean
    recordPass?: boolean
    similarity?: boolean
    temperature?: boolean
    qrcode?: boolean
    healthCodeColor?: boolean
    recordPicUrl?: boolean
    idCardPicUrl?: boolean
    raw?: boolean
    createdAt?: boolean
    device?: boolean | FacegateDeviceArgs<ExtArgs>
    person?: boolean | FacegateRecord$personArgs<ExtArgs>
  }, ExtArgs["result"]["facegateRecord"]>

  export type FacegateRecordSelectScalar = {
    id?: boolean
    deviceId?: boolean
    recordId?: boolean
    personPhone?: boolean
    recordTime?: boolean
    recordType?: boolean
    recordPass?: boolean
    similarity?: boolean
    temperature?: boolean
    qrcode?: boolean
    healthCodeColor?: boolean
    recordPicUrl?: boolean
    idCardPicUrl?: boolean
    raw?: boolean
    createdAt?: boolean
  }

  export type FacegateRecordInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    device?: boolean | FacegateDeviceArgs<ExtArgs>
    person?: boolean | FacegateRecord$personArgs<ExtArgs>
  }


  type FacegateRecordGetPayload<S extends boolean | null | undefined | FacegateRecordArgs> = $Types.GetResult<FacegateRecordPayload, S>

  type FacegateRecordCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegateRecordFindManyArgs, 'select' | 'include'> & {
      select?: FacegateRecordCountAggregateInputType | true
    }

  export interface FacegateRecordDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegateRecord'], meta: { name: 'FacegateRecord' } }
    /**
     * Find zero or one FacegateRecord that matches the filter.
     * @param {FacegateRecordFindUniqueArgs} args - Arguments to find a FacegateRecord
     * @example
     * // Get one FacegateRecord
     * const facegateRecord = await prisma.facegateRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegateRecordFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateRecordFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegateRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegateRecordFindUniqueOrThrowArgs} args - Arguments to find a FacegateRecord
     * @example
     * // Get one FacegateRecord
     * const facegateRecord = await prisma.facegateRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegateRecordFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateRecordFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegateRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordFindFirstArgs} args - Arguments to find a FacegateRecord
     * @example
     * // Get one FacegateRecord
     * const facegateRecord = await prisma.facegateRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegateRecordFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateRecordFindFirstArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegateRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordFindFirstOrThrowArgs} args - Arguments to find a FacegateRecord
     * @example
     * // Get one FacegateRecord
     * const facegateRecord = await prisma.facegateRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegateRecordFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateRecordFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegateRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegateRecords
     * const facegateRecords = await prisma.facegateRecord.findMany()
     * 
     * // Get first 10 FacegateRecords
     * const facegateRecords = await prisma.facegateRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegateRecordWithIdOnly = await prisma.facegateRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegateRecordFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateRecordFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegateRecord.
     * @param {FacegateRecordCreateArgs} args - Arguments to create a FacegateRecord.
     * @example
     * // Create one FacegateRecord
     * const FacegateRecord = await prisma.facegateRecord.create({
     *   data: {
     *     // ... data to create a FacegateRecord
     *   }
     * })
     * 
    **/
    create<T extends FacegateRecordCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateRecordCreateArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegateRecord.
     * @param {FacegateRecordDeleteArgs} args - Arguments to delete one FacegateRecord.
     * @example
     * // Delete one FacegateRecord
     * const FacegateRecord = await prisma.facegateRecord.delete({
     *   where: {
     *     // ... filter to delete one FacegateRecord
     *   }
     * })
     * 
    **/
    delete<T extends FacegateRecordDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateRecordDeleteArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegateRecord.
     * @param {FacegateRecordUpdateArgs} args - Arguments to update one FacegateRecord.
     * @example
     * // Update one FacegateRecord
     * const facegateRecord = await prisma.facegateRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegateRecordUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateRecordUpdateArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegateRecords.
     * @param {FacegateRecordDeleteManyArgs} args - Arguments to filter FacegateRecords to delete.
     * @example
     * // Delete a few FacegateRecords
     * const { count } = await prisma.facegateRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegateRecordDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateRecordDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegateRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegateRecords
     * const facegateRecord = await prisma.facegateRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegateRecordUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateRecordUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegateRecord.
     * @param {FacegateRecordUpsertArgs} args - Arguments to update or create a FacegateRecord.
     * @example
     * // Update or create a FacegateRecord
     * const facegateRecord = await prisma.facegateRecord.upsert({
     *   create: {
     *     // ... data to create a FacegateRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegateRecord we want to update
     *   }
     * })
    **/
    upsert<T extends FacegateRecordUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateRecordUpsertArgs<ExtArgs>>
    ): Prisma__FacegateRecordClient<$Types.GetResult<FacegateRecordPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegateRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordCountArgs} args - Arguments to filter FacegateRecords to count.
     * @example
     * // Count the number of FacegateRecords
     * const count = await prisma.facegateRecord.count({
     *   where: {
     *     // ... the filter for the FacegateRecords we want to count
     *   }
     * })
    **/
    count<T extends FacegateRecordCountArgs>(
      args?: Subset<T, FacegateRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegateRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegateRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegateRecordAggregateArgs>(args: Subset<T, FacegateRecordAggregateArgs>): Prisma.PrismaPromise<GetFacegateRecordAggregateType<T>>

    /**
     * Group by FacegateRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegateRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegateRecordGroupByArgs['orderBy'] }
        : { orderBy?: FacegateRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegateRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegateRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegateRecord model
   */
  readonly fields: FacegateRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegateRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegateRecordClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    device<T extends FacegateDeviceArgs<ExtArgs> = {}>(args?: Subset<T, FacegateDeviceArgs<ExtArgs>>): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    person<T extends FacegateRecord$personArgs<ExtArgs> = {}>(args?: Subset<T, FacegateRecord$personArgs<ExtArgs>>): Prisma__FacegatePersonClient<$Types.GetResult<FacegatePersonPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegateRecord model
   */ 
  interface FacegateRecordFieldRefs {
    readonly id: FieldRef<"FacegateRecord", 'String'>
    readonly deviceId: FieldRef<"FacegateRecord", 'String'>
    readonly recordId: FieldRef<"FacegateRecord", 'BigInt'>
    readonly personPhone: FieldRef<"FacegateRecord", 'String'>
    readonly recordTime: FieldRef<"FacegateRecord", 'BigInt'>
    readonly recordType: FieldRef<"FacegateRecord", 'Int'>
    readonly recordPass: FieldRef<"FacegateRecord", 'Int'>
    readonly similarity: FieldRef<"FacegateRecord", 'Float'>
    readonly temperature: FieldRef<"FacegateRecord", 'Float'>
    readonly qrcode: FieldRef<"FacegateRecord", 'String'>
    readonly healthCodeColor: FieldRef<"FacegateRecord", 'String'>
    readonly recordPicUrl: FieldRef<"FacegateRecord", 'String'>
    readonly idCardPicUrl: FieldRef<"FacegateRecord", 'String'>
    readonly raw: FieldRef<"FacegateRecord", 'String'>
    readonly createdAt: FieldRef<"FacegateRecord", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FacegateRecord findUnique
   */
  export type FacegateRecordFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * Filter, which FacegateRecord to fetch.
     */
    where: FacegateRecordWhereUniqueInput
  }


  /**
   * FacegateRecord findUniqueOrThrow
   */
  export type FacegateRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * Filter, which FacegateRecord to fetch.
     */
    where: FacegateRecordWhereUniqueInput
  }


  /**
   * FacegateRecord findFirst
   */
  export type FacegateRecordFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * Filter, which FacegateRecord to fetch.
     */
    where?: FacegateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateRecords to fetch.
     */
    orderBy?: FacegateRecordOrderByWithRelationInput | FacegateRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateRecords.
     */
    cursor?: FacegateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateRecords.
     */
    distinct?: FacegateRecordScalarFieldEnum | FacegateRecordScalarFieldEnum[]
  }


  /**
   * FacegateRecord findFirstOrThrow
   */
  export type FacegateRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * Filter, which FacegateRecord to fetch.
     */
    where?: FacegateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateRecords to fetch.
     */
    orderBy?: FacegateRecordOrderByWithRelationInput | FacegateRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateRecords.
     */
    cursor?: FacegateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateRecords.
     */
    distinct?: FacegateRecordScalarFieldEnum | FacegateRecordScalarFieldEnum[]
  }


  /**
   * FacegateRecord findMany
   */
  export type FacegateRecordFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * Filter, which FacegateRecords to fetch.
     */
    where?: FacegateRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateRecords to fetch.
     */
    orderBy?: FacegateRecordOrderByWithRelationInput | FacegateRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegateRecords.
     */
    cursor?: FacegateRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateRecords.
     */
    skip?: number
    distinct?: FacegateRecordScalarFieldEnum | FacegateRecordScalarFieldEnum[]
  }


  /**
   * FacegateRecord create
   */
  export type FacegateRecordCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegateRecord.
     */
    data: XOR<FacegateRecordCreateInput, FacegateRecordUncheckedCreateInput>
  }


  /**
   * FacegateRecord update
   */
  export type FacegateRecordUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegateRecord.
     */
    data: XOR<FacegateRecordUpdateInput, FacegateRecordUncheckedUpdateInput>
    /**
     * Choose, which FacegateRecord to update.
     */
    where: FacegateRecordWhereUniqueInput
  }


  /**
   * FacegateRecord updateMany
   */
  export type FacegateRecordUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegateRecords.
     */
    data: XOR<FacegateRecordUpdateManyMutationInput, FacegateRecordUncheckedUpdateManyInput>
    /**
     * Filter which FacegateRecords to update
     */
    where?: FacegateRecordWhereInput
  }


  /**
   * FacegateRecord upsert
   */
  export type FacegateRecordUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegateRecord to update in case it exists.
     */
    where: FacegateRecordWhereUniqueInput
    /**
     * In case the FacegateRecord found by the `where` argument doesn't exist, create a new FacegateRecord with this data.
     */
    create: XOR<FacegateRecordCreateInput, FacegateRecordUncheckedCreateInput>
    /**
     * In case the FacegateRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegateRecordUpdateInput, FacegateRecordUncheckedUpdateInput>
  }


  /**
   * FacegateRecord delete
   */
  export type FacegateRecordDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
    /**
     * Filter which FacegateRecord to delete.
     */
    where: FacegateRecordWhereUniqueInput
  }


  /**
   * FacegateRecord deleteMany
   */
  export type FacegateRecordDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateRecords to delete
     */
    where?: FacegateRecordWhereInput
  }


  /**
   * FacegateRecord.person
   */
  export type FacegateRecord$personArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegatePerson
     */
    select?: FacegatePersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegatePersonInclude<ExtArgs> | null
    where?: FacegatePersonWhereInput
  }


  /**
   * FacegateRecord without action
   */
  export type FacegateRecordArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateRecord
     */
    select?: FacegateRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateRecordInclude<ExtArgs> | null
  }



  /**
   * Model FacegateSchedule
   */


  export type AggregateFacegateSchedule = {
    _count: FacegateScheduleCountAggregateOutputType | null
    _avg: FacegateScheduleAvgAggregateOutputType | null
    _sum: FacegateScheduleSumAggregateOutputType | null
    _min: FacegateScheduleMinAggregateOutputType | null
    _max: FacegateScheduleMaxAggregateOutputType | null
  }

  export type FacegateScheduleAvgAggregateOutputType = {
    status: number | null
  }

  export type FacegateScheduleSumAggregateOutputType = {
    status: number | null
  }

  export type FacegateScheduleMinAggregateOutputType = {
    id: string | null
    userPhone: string | null
    imageId: string | null
    payloadType: string | null
    startAt: Date | null
    endAt: Date | null
    cron: string | null
    status: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegateScheduleMaxAggregateOutputType = {
    id: string | null
    userPhone: string | null
    imageId: string | null
    payloadType: string | null
    startAt: Date | null
    endAt: Date | null
    cron: string | null
    status: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegateScheduleCountAggregateOutputType = {
    id: number
    userPhone: number
    imageId: number
    payloadType: number
    startAt: number
    endAt: number
    cron: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacegateScheduleAvgAggregateInputType = {
    status?: true
  }

  export type FacegateScheduleSumAggregateInputType = {
    status?: true
  }

  export type FacegateScheduleMinAggregateInputType = {
    id?: true
    userPhone?: true
    imageId?: true
    payloadType?: true
    startAt?: true
    endAt?: true
    cron?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegateScheduleMaxAggregateInputType = {
    id?: true
    userPhone?: true
    imageId?: true
    payloadType?: true
    startAt?: true
    endAt?: true
    cron?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegateScheduleCountAggregateInputType = {
    id?: true
    userPhone?: true
    imageId?: true
    payloadType?: true
    startAt?: true
    endAt?: true
    cron?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacegateScheduleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateSchedule to aggregate.
     */
    where?: FacegateScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateSchedules to fetch.
     */
    orderBy?: FacegateScheduleOrderByWithRelationInput | FacegateScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegateScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegateSchedules
    **/
    _count?: true | FacegateScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacegateScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacegateScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegateScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegateScheduleMaxAggregateInputType
  }

  export type GetFacegateScheduleAggregateType<T extends FacegateScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegateSchedule[P]>
      : GetScalarType<T[P], AggregateFacegateSchedule[P]>
  }




  export type FacegateScheduleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateScheduleWhereInput
    orderBy?: FacegateScheduleOrderByWithAggregationInput | FacegateScheduleOrderByWithAggregationInput[]
    by: FacegateScheduleScalarFieldEnum[] | FacegateScheduleScalarFieldEnum
    having?: FacegateScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegateScheduleCountAggregateInputType | true
    _avg?: FacegateScheduleAvgAggregateInputType
    _sum?: FacegateScheduleSumAggregateInputType
    _min?: FacegateScheduleMinAggregateInputType
    _max?: FacegateScheduleMaxAggregateInputType
  }


  export type FacegateScheduleGroupByOutputType = {
    id: string
    userPhone: string
    imageId: string | null
    payloadType: string
    startAt: Date
    endAt: Date | null
    cron: string | null
    status: number
    createdAt: Date
    updatedAt: Date
    _count: FacegateScheduleCountAggregateOutputType | null
    _avg: FacegateScheduleAvgAggregateOutputType | null
    _sum: FacegateScheduleSumAggregateOutputType | null
    _min: FacegateScheduleMinAggregateOutputType | null
    _max: FacegateScheduleMaxAggregateOutputType | null
  }

  type GetFacegateScheduleGroupByPayload<T extends FacegateScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegateScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegateScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegateScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], FacegateScheduleGroupByOutputType[P]>
        }
      >
    >


  export type FacegateScheduleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userPhone?: boolean
    imageId?: boolean
    payloadType?: boolean
    startAt?: boolean
    endAt?: boolean
    cron?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean | FacegateSchedule$imageArgs<ExtArgs>
    targets?: boolean | FacegateSchedule$targetsArgs<ExtArgs>
    jobs?: boolean | FacegateSchedule$jobsArgs<ExtArgs>
    _count?: boolean | FacegateScheduleCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["facegateSchedule"]>

  export type FacegateScheduleSelectScalar = {
    id?: boolean
    userPhone?: boolean
    imageId?: boolean
    payloadType?: boolean
    startAt?: boolean
    endAt?: boolean
    cron?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FacegateScheduleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    image?: boolean | FacegateSchedule$imageArgs<ExtArgs>
    targets?: boolean | FacegateSchedule$targetsArgs<ExtArgs>
    jobs?: boolean | FacegateSchedule$jobsArgs<ExtArgs>
    _count?: boolean | FacegateScheduleCountOutputTypeArgs<ExtArgs>
  }


  type FacegateScheduleGetPayload<S extends boolean | null | undefined | FacegateScheduleArgs> = $Types.GetResult<FacegateSchedulePayload, S>

  type FacegateScheduleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegateScheduleFindManyArgs, 'select' | 'include'> & {
      select?: FacegateScheduleCountAggregateInputType | true
    }

  export interface FacegateScheduleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegateSchedule'], meta: { name: 'FacegateSchedule' } }
    /**
     * Find zero or one FacegateSchedule that matches the filter.
     * @param {FacegateScheduleFindUniqueArgs} args - Arguments to find a FacegateSchedule
     * @example
     * // Get one FacegateSchedule
     * const facegateSchedule = await prisma.facegateSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegateScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegateSchedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegateScheduleFindUniqueOrThrowArgs} args - Arguments to find a FacegateSchedule
     * @example
     * // Get one FacegateSchedule
     * const facegateSchedule = await prisma.facegateSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegateScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegateSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleFindFirstArgs} args - Arguments to find a FacegateSchedule
     * @example
     * // Get one FacegateSchedule
     * const facegateSchedule = await prisma.facegateSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegateScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegateSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleFindFirstOrThrowArgs} args - Arguments to find a FacegateSchedule
     * @example
     * // Get one FacegateSchedule
     * const facegateSchedule = await prisma.facegateSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegateScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegateSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegateSchedules
     * const facegateSchedules = await prisma.facegateSchedule.findMany()
     * 
     * // Get first 10 FacegateSchedules
     * const facegateSchedules = await prisma.facegateSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegateScheduleWithIdOnly = await prisma.facegateSchedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegateScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegateSchedule.
     * @param {FacegateScheduleCreateArgs} args - Arguments to create a FacegateSchedule.
     * @example
     * // Create one FacegateSchedule
     * const FacegateSchedule = await prisma.facegateSchedule.create({
     *   data: {
     *     // ... data to create a FacegateSchedule
     *   }
     * })
     * 
    **/
    create<T extends FacegateScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleCreateArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegateSchedule.
     * @param {FacegateScheduleDeleteArgs} args - Arguments to delete one FacegateSchedule.
     * @example
     * // Delete one FacegateSchedule
     * const FacegateSchedule = await prisma.facegateSchedule.delete({
     *   where: {
     *     // ... filter to delete one FacegateSchedule
     *   }
     * })
     * 
    **/
    delete<T extends FacegateScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleDeleteArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegateSchedule.
     * @param {FacegateScheduleUpdateArgs} args - Arguments to update one FacegateSchedule.
     * @example
     * // Update one FacegateSchedule
     * const facegateSchedule = await prisma.facegateSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegateScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleUpdateArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegateSchedules.
     * @param {FacegateScheduleDeleteManyArgs} args - Arguments to filter FacegateSchedules to delete.
     * @example
     * // Delete a few FacegateSchedules
     * const { count } = await prisma.facegateSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegateScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegateSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegateSchedules
     * const facegateSchedule = await prisma.facegateSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegateScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegateSchedule.
     * @param {FacegateScheduleUpsertArgs} args - Arguments to update or create a FacegateSchedule.
     * @example
     * // Update or create a FacegateSchedule
     * const facegateSchedule = await prisma.facegateSchedule.upsert({
     *   create: {
     *     // ... data to create a FacegateSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegateSchedule we want to update
     *   }
     * })
    **/
    upsert<T extends FacegateScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleUpsertArgs<ExtArgs>>
    ): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegateSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleCountArgs} args - Arguments to filter FacegateSchedules to count.
     * @example
     * // Count the number of FacegateSchedules
     * const count = await prisma.facegateSchedule.count({
     *   where: {
     *     // ... the filter for the FacegateSchedules we want to count
     *   }
     * })
    **/
    count<T extends FacegateScheduleCountArgs>(
      args?: Subset<T, FacegateScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegateScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegateSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegateScheduleAggregateArgs>(args: Subset<T, FacegateScheduleAggregateArgs>): Prisma.PrismaPromise<GetFacegateScheduleAggregateType<T>>

    /**
     * Group by FacegateSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegateScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegateScheduleGroupByArgs['orderBy'] }
        : { orderBy?: FacegateScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegateScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegateScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegateSchedule model
   */
  readonly fields: FacegateScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegateSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegateScheduleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    image<T extends FacegateSchedule$imageArgs<ExtArgs> = {}>(args?: Subset<T, FacegateSchedule$imageArgs<ExtArgs>>): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    targets<T extends FacegateSchedule$targetsArgs<ExtArgs> = {}>(args?: Subset<T, FacegateSchedule$targetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findMany'>| Null>;

    jobs<T extends FacegateSchedule$jobsArgs<ExtArgs> = {}>(args?: Subset<T, FacegateSchedule$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegateSchedule model
   */ 
  interface FacegateScheduleFieldRefs {
    readonly id: FieldRef<"FacegateSchedule", 'String'>
    readonly userPhone: FieldRef<"FacegateSchedule", 'String'>
    readonly imageId: FieldRef<"FacegateSchedule", 'String'>
    readonly payloadType: FieldRef<"FacegateSchedule", 'String'>
    readonly startAt: FieldRef<"FacegateSchedule", 'DateTime'>
    readonly endAt: FieldRef<"FacegateSchedule", 'DateTime'>
    readonly cron: FieldRef<"FacegateSchedule", 'String'>
    readonly status: FieldRef<"FacegateSchedule", 'Int'>
    readonly createdAt: FieldRef<"FacegateSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"FacegateSchedule", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FacegateSchedule findUnique
   */
  export type FacegateScheduleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * Filter, which FacegateSchedule to fetch.
     */
    where: FacegateScheduleWhereUniqueInput
  }


  /**
   * FacegateSchedule findUniqueOrThrow
   */
  export type FacegateScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * Filter, which FacegateSchedule to fetch.
     */
    where: FacegateScheduleWhereUniqueInput
  }


  /**
   * FacegateSchedule findFirst
   */
  export type FacegateScheduleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * Filter, which FacegateSchedule to fetch.
     */
    where?: FacegateScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateSchedules to fetch.
     */
    orderBy?: FacegateScheduleOrderByWithRelationInput | FacegateScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateSchedules.
     */
    cursor?: FacegateScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateSchedules.
     */
    distinct?: FacegateScheduleScalarFieldEnum | FacegateScheduleScalarFieldEnum[]
  }


  /**
   * FacegateSchedule findFirstOrThrow
   */
  export type FacegateScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * Filter, which FacegateSchedule to fetch.
     */
    where?: FacegateScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateSchedules to fetch.
     */
    orderBy?: FacegateScheduleOrderByWithRelationInput | FacegateScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateSchedules.
     */
    cursor?: FacegateScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateSchedules.
     */
    distinct?: FacegateScheduleScalarFieldEnum | FacegateScheduleScalarFieldEnum[]
  }


  /**
   * FacegateSchedule findMany
   */
  export type FacegateScheduleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * Filter, which FacegateSchedules to fetch.
     */
    where?: FacegateScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateSchedules to fetch.
     */
    orderBy?: FacegateScheduleOrderByWithRelationInput | FacegateScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegateSchedules.
     */
    cursor?: FacegateScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateSchedules.
     */
    skip?: number
    distinct?: FacegateScheduleScalarFieldEnum | FacegateScheduleScalarFieldEnum[]
  }


  /**
   * FacegateSchedule create
   */
  export type FacegateScheduleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegateSchedule.
     */
    data: XOR<FacegateScheduleCreateInput, FacegateScheduleUncheckedCreateInput>
  }


  /**
   * FacegateSchedule update
   */
  export type FacegateScheduleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegateSchedule.
     */
    data: XOR<FacegateScheduleUpdateInput, FacegateScheduleUncheckedUpdateInput>
    /**
     * Choose, which FacegateSchedule to update.
     */
    where: FacegateScheduleWhereUniqueInput
  }


  /**
   * FacegateSchedule updateMany
   */
  export type FacegateScheduleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegateSchedules.
     */
    data: XOR<FacegateScheduleUpdateManyMutationInput, FacegateScheduleUncheckedUpdateManyInput>
    /**
     * Filter which FacegateSchedules to update
     */
    where?: FacegateScheduleWhereInput
  }


  /**
   * FacegateSchedule upsert
   */
  export type FacegateScheduleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegateSchedule to update in case it exists.
     */
    where: FacegateScheduleWhereUniqueInput
    /**
     * In case the FacegateSchedule found by the `where` argument doesn't exist, create a new FacegateSchedule with this data.
     */
    create: XOR<FacegateScheduleCreateInput, FacegateScheduleUncheckedCreateInput>
    /**
     * In case the FacegateSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegateScheduleUpdateInput, FacegateScheduleUncheckedUpdateInput>
  }


  /**
   * FacegateSchedule delete
   */
  export type FacegateScheduleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    /**
     * Filter which FacegateSchedule to delete.
     */
    where: FacegateScheduleWhereUniqueInput
  }


  /**
   * FacegateSchedule deleteMany
   */
  export type FacegateScheduleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateSchedules to delete
     */
    where?: FacegateScheduleWhereInput
  }


  /**
   * FacegateSchedule.image
   */
  export type FacegateSchedule$imageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    where?: FacegateImageWhereInput
  }


  /**
   * FacegateSchedule.targets
   */
  export type FacegateSchedule$targetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    where?: FacegateScheduleTargetWhereInput
    orderBy?: FacegateScheduleTargetOrderByWithRelationInput | FacegateScheduleTargetOrderByWithRelationInput[]
    cursor?: FacegateScheduleTargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateScheduleTargetScalarFieldEnum | FacegateScheduleTargetScalarFieldEnum[]
  }


  /**
   * FacegateSchedule.jobs
   */
  export type FacegateSchedule$jobsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    where?: FacegateJobWhereInput
    orderBy?: FacegateJobOrderByWithRelationInput | FacegateJobOrderByWithRelationInput[]
    cursor?: FacegateJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateJobScalarFieldEnum | FacegateJobScalarFieldEnum[]
  }


  /**
   * FacegateSchedule without action
   */
  export type FacegateScheduleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
  }



  /**
   * Model FacegateImage
   */


  export type AggregateFacegateImage = {
    _count: FacegateImageCountAggregateOutputType | null
    _min: FacegateImageMinAggregateOutputType | null
    _max: FacegateImageMaxAggregateOutputType | null
  }

  export type FacegateImageMinAggregateOutputType = {
    id: string | null
    userPhone: string | null
    localPath: string | null
    fileName: string | null
    url: string | null
    createdAt: Date | null
  }

  export type FacegateImageMaxAggregateOutputType = {
    id: string | null
    userPhone: string | null
    localPath: string | null
    fileName: string | null
    url: string | null
    createdAt: Date | null
  }

  export type FacegateImageCountAggregateOutputType = {
    id: number
    userPhone: number
    localPath: number
    fileName: number
    url: number
    createdAt: number
    _all: number
  }


  export type FacegateImageMinAggregateInputType = {
    id?: true
    userPhone?: true
    localPath?: true
    fileName?: true
    url?: true
    createdAt?: true
  }

  export type FacegateImageMaxAggregateInputType = {
    id?: true
    userPhone?: true
    localPath?: true
    fileName?: true
    url?: true
    createdAt?: true
  }

  export type FacegateImageCountAggregateInputType = {
    id?: true
    userPhone?: true
    localPath?: true
    fileName?: true
    url?: true
    createdAt?: true
    _all?: true
  }

  export type FacegateImageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateImage to aggregate.
     */
    where?: FacegateImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateImages to fetch.
     */
    orderBy?: FacegateImageOrderByWithRelationInput | FacegateImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegateImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegateImages
    **/
    _count?: true | FacegateImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegateImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegateImageMaxAggregateInputType
  }

  export type GetFacegateImageAggregateType<T extends FacegateImageAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegateImage[P]>
      : GetScalarType<T[P], AggregateFacegateImage[P]>
  }




  export type FacegateImageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateImageWhereInput
    orderBy?: FacegateImageOrderByWithAggregationInput | FacegateImageOrderByWithAggregationInput[]
    by: FacegateImageScalarFieldEnum[] | FacegateImageScalarFieldEnum
    having?: FacegateImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegateImageCountAggregateInputType | true
    _min?: FacegateImageMinAggregateInputType
    _max?: FacegateImageMaxAggregateInputType
  }


  export type FacegateImageGroupByOutputType = {
    id: string
    userPhone: string
    localPath: string
    fileName: string
    url: string | null
    createdAt: Date
    _count: FacegateImageCountAggregateOutputType | null
    _min: FacegateImageMinAggregateOutputType | null
    _max: FacegateImageMaxAggregateOutputType | null
  }

  type GetFacegateImageGroupByPayload<T extends FacegateImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegateImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegateImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegateImageGroupByOutputType[P]>
            : GetScalarType<T[P], FacegateImageGroupByOutputType[P]>
        }
      >
    >


  export type FacegateImageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userPhone?: boolean
    localPath?: boolean
    fileName?: boolean
    url?: boolean
    createdAt?: boolean
    schedules?: boolean | FacegateImage$schedulesArgs<ExtArgs>
    _count?: boolean | FacegateImageCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["facegateImage"]>

  export type FacegateImageSelectScalar = {
    id?: boolean
    userPhone?: boolean
    localPath?: boolean
    fileName?: boolean
    url?: boolean
    createdAt?: boolean
  }

  export type FacegateImageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    schedules?: boolean | FacegateImage$schedulesArgs<ExtArgs>
    _count?: boolean | FacegateImageCountOutputTypeArgs<ExtArgs>
  }


  type FacegateImageGetPayload<S extends boolean | null | undefined | FacegateImageArgs> = $Types.GetResult<FacegateImagePayload, S>

  type FacegateImageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegateImageFindManyArgs, 'select' | 'include'> & {
      select?: FacegateImageCountAggregateInputType | true
    }

  export interface FacegateImageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegateImage'], meta: { name: 'FacegateImage' } }
    /**
     * Find zero or one FacegateImage that matches the filter.
     * @param {FacegateImageFindUniqueArgs} args - Arguments to find a FacegateImage
     * @example
     * // Get one FacegateImage
     * const facegateImage = await prisma.facegateImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegateImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateImageFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegateImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegateImageFindUniqueOrThrowArgs} args - Arguments to find a FacegateImage
     * @example
     * // Get one FacegateImage
     * const facegateImage = await prisma.facegateImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegateImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegateImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageFindFirstArgs} args - Arguments to find a FacegateImage
     * @example
     * // Get one FacegateImage
     * const facegateImage = await prisma.facegateImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegateImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateImageFindFirstArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegateImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageFindFirstOrThrowArgs} args - Arguments to find a FacegateImage
     * @example
     * // Get one FacegateImage
     * const facegateImage = await prisma.facegateImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegateImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegateImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegateImages
     * const facegateImages = await prisma.facegateImage.findMany()
     * 
     * // Get first 10 FacegateImages
     * const facegateImages = await prisma.facegateImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegateImageWithIdOnly = await prisma.facegateImage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegateImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegateImage.
     * @param {FacegateImageCreateArgs} args - Arguments to create a FacegateImage.
     * @example
     * // Create one FacegateImage
     * const FacegateImage = await prisma.facegateImage.create({
     *   data: {
     *     // ... data to create a FacegateImage
     *   }
     * })
     * 
    **/
    create<T extends FacegateImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateImageCreateArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegateImage.
     * @param {FacegateImageDeleteArgs} args - Arguments to delete one FacegateImage.
     * @example
     * // Delete one FacegateImage
     * const FacegateImage = await prisma.facegateImage.delete({
     *   where: {
     *     // ... filter to delete one FacegateImage
     *   }
     * })
     * 
    **/
    delete<T extends FacegateImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateImageDeleteArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegateImage.
     * @param {FacegateImageUpdateArgs} args - Arguments to update one FacegateImage.
     * @example
     * // Update one FacegateImage
     * const facegateImage = await prisma.facegateImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegateImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateImageUpdateArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegateImages.
     * @param {FacegateImageDeleteManyArgs} args - Arguments to filter FacegateImages to delete.
     * @example
     * // Delete a few FacegateImages
     * const { count } = await prisma.facegateImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegateImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegateImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegateImages
     * const facegateImage = await prisma.facegateImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegateImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegateImage.
     * @param {FacegateImageUpsertArgs} args - Arguments to update or create a FacegateImage.
     * @example
     * // Update or create a FacegateImage
     * const facegateImage = await prisma.facegateImage.upsert({
     *   create: {
     *     // ... data to create a FacegateImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegateImage we want to update
     *   }
     * })
    **/
    upsert<T extends FacegateImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateImageUpsertArgs<ExtArgs>>
    ): Prisma__FacegateImageClient<$Types.GetResult<FacegateImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegateImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageCountArgs} args - Arguments to filter FacegateImages to count.
     * @example
     * // Count the number of FacegateImages
     * const count = await prisma.facegateImage.count({
     *   where: {
     *     // ... the filter for the FacegateImages we want to count
     *   }
     * })
    **/
    count<T extends FacegateImageCountArgs>(
      args?: Subset<T, FacegateImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegateImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegateImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegateImageAggregateArgs>(args: Subset<T, FacegateImageAggregateArgs>): Prisma.PrismaPromise<GetFacegateImageAggregateType<T>>

    /**
     * Group by FacegateImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegateImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegateImageGroupByArgs['orderBy'] }
        : { orderBy?: FacegateImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegateImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegateImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegateImage model
   */
  readonly fields: FacegateImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegateImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegateImageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    schedules<T extends FacegateImage$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, FacegateImage$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegateImage model
   */ 
  interface FacegateImageFieldRefs {
    readonly id: FieldRef<"FacegateImage", 'String'>
    readonly userPhone: FieldRef<"FacegateImage", 'String'>
    readonly localPath: FieldRef<"FacegateImage", 'String'>
    readonly fileName: FieldRef<"FacegateImage", 'String'>
    readonly url: FieldRef<"FacegateImage", 'String'>
    readonly createdAt: FieldRef<"FacegateImage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FacegateImage findUnique
   */
  export type FacegateImageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * Filter, which FacegateImage to fetch.
     */
    where: FacegateImageWhereUniqueInput
  }


  /**
   * FacegateImage findUniqueOrThrow
   */
  export type FacegateImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * Filter, which FacegateImage to fetch.
     */
    where: FacegateImageWhereUniqueInput
  }


  /**
   * FacegateImage findFirst
   */
  export type FacegateImageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * Filter, which FacegateImage to fetch.
     */
    where?: FacegateImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateImages to fetch.
     */
    orderBy?: FacegateImageOrderByWithRelationInput | FacegateImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateImages.
     */
    cursor?: FacegateImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateImages.
     */
    distinct?: FacegateImageScalarFieldEnum | FacegateImageScalarFieldEnum[]
  }


  /**
   * FacegateImage findFirstOrThrow
   */
  export type FacegateImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * Filter, which FacegateImage to fetch.
     */
    where?: FacegateImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateImages to fetch.
     */
    orderBy?: FacegateImageOrderByWithRelationInput | FacegateImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateImages.
     */
    cursor?: FacegateImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateImages.
     */
    distinct?: FacegateImageScalarFieldEnum | FacegateImageScalarFieldEnum[]
  }


  /**
   * FacegateImage findMany
   */
  export type FacegateImageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * Filter, which FacegateImages to fetch.
     */
    where?: FacegateImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateImages to fetch.
     */
    orderBy?: FacegateImageOrderByWithRelationInput | FacegateImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegateImages.
     */
    cursor?: FacegateImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateImages.
     */
    skip?: number
    distinct?: FacegateImageScalarFieldEnum | FacegateImageScalarFieldEnum[]
  }


  /**
   * FacegateImage create
   */
  export type FacegateImageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegateImage.
     */
    data: XOR<FacegateImageCreateInput, FacegateImageUncheckedCreateInput>
  }


  /**
   * FacegateImage update
   */
  export type FacegateImageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegateImage.
     */
    data: XOR<FacegateImageUpdateInput, FacegateImageUncheckedUpdateInput>
    /**
     * Choose, which FacegateImage to update.
     */
    where: FacegateImageWhereUniqueInput
  }


  /**
   * FacegateImage updateMany
   */
  export type FacegateImageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegateImages.
     */
    data: XOR<FacegateImageUpdateManyMutationInput, FacegateImageUncheckedUpdateManyInput>
    /**
     * Filter which FacegateImages to update
     */
    where?: FacegateImageWhereInput
  }


  /**
   * FacegateImage upsert
   */
  export type FacegateImageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegateImage to update in case it exists.
     */
    where: FacegateImageWhereUniqueInput
    /**
     * In case the FacegateImage found by the `where` argument doesn't exist, create a new FacegateImage with this data.
     */
    create: XOR<FacegateImageCreateInput, FacegateImageUncheckedCreateInput>
    /**
     * In case the FacegateImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegateImageUpdateInput, FacegateImageUncheckedUpdateInput>
  }


  /**
   * FacegateImage delete
   */
  export type FacegateImageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
    /**
     * Filter which FacegateImage to delete.
     */
    where: FacegateImageWhereUniqueInput
  }


  /**
   * FacegateImage deleteMany
   */
  export type FacegateImageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateImages to delete
     */
    where?: FacegateImageWhereInput
  }


  /**
   * FacegateImage.schedules
   */
  export type FacegateImage$schedulesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateSchedule
     */
    select?: FacegateScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleInclude<ExtArgs> | null
    where?: FacegateScheduleWhereInput
    orderBy?: FacegateScheduleOrderByWithRelationInput | FacegateScheduleOrderByWithRelationInput[]
    cursor?: FacegateScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacegateScheduleScalarFieldEnum | FacegateScheduleScalarFieldEnum[]
  }


  /**
   * FacegateImage without action
   */
  export type FacegateImageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateImage
     */
    select?: FacegateImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateImageInclude<ExtArgs> | null
  }



  /**
   * Model FacegateScheduleTarget
   */


  export type AggregateFacegateScheduleTarget = {
    _count: FacegateScheduleTargetCountAggregateOutputType | null
    _min: FacegateScheduleTargetMinAggregateOutputType | null
    _max: FacegateScheduleTargetMaxAggregateOutputType | null
  }

  export type FacegateScheduleTargetMinAggregateOutputType = {
    id: string | null
    scheduleId: string | null
    deviceId: string | null
  }

  export type FacegateScheduleTargetMaxAggregateOutputType = {
    id: string | null
    scheduleId: string | null
    deviceId: string | null
  }

  export type FacegateScheduleTargetCountAggregateOutputType = {
    id: number
    scheduleId: number
    deviceId: number
    _all: number
  }


  export type FacegateScheduleTargetMinAggregateInputType = {
    id?: true
    scheduleId?: true
    deviceId?: true
  }

  export type FacegateScheduleTargetMaxAggregateInputType = {
    id?: true
    scheduleId?: true
    deviceId?: true
  }

  export type FacegateScheduleTargetCountAggregateInputType = {
    id?: true
    scheduleId?: true
    deviceId?: true
    _all?: true
  }

  export type FacegateScheduleTargetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateScheduleTarget to aggregate.
     */
    where?: FacegateScheduleTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateScheduleTargets to fetch.
     */
    orderBy?: FacegateScheduleTargetOrderByWithRelationInput | FacegateScheduleTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegateScheduleTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateScheduleTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateScheduleTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegateScheduleTargets
    **/
    _count?: true | FacegateScheduleTargetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegateScheduleTargetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegateScheduleTargetMaxAggregateInputType
  }

  export type GetFacegateScheduleTargetAggregateType<T extends FacegateScheduleTargetAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegateScheduleTarget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegateScheduleTarget[P]>
      : GetScalarType<T[P], AggregateFacegateScheduleTarget[P]>
  }




  export type FacegateScheduleTargetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateScheduleTargetWhereInput
    orderBy?: FacegateScheduleTargetOrderByWithAggregationInput | FacegateScheduleTargetOrderByWithAggregationInput[]
    by: FacegateScheduleTargetScalarFieldEnum[] | FacegateScheduleTargetScalarFieldEnum
    having?: FacegateScheduleTargetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegateScheduleTargetCountAggregateInputType | true
    _min?: FacegateScheduleTargetMinAggregateInputType
    _max?: FacegateScheduleTargetMaxAggregateInputType
  }


  export type FacegateScheduleTargetGroupByOutputType = {
    id: string
    scheduleId: string
    deviceId: string
    _count: FacegateScheduleTargetCountAggregateOutputType | null
    _min: FacegateScheduleTargetMinAggregateOutputType | null
    _max: FacegateScheduleTargetMaxAggregateOutputType | null
  }

  type GetFacegateScheduleTargetGroupByPayload<T extends FacegateScheduleTargetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegateScheduleTargetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegateScheduleTargetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegateScheduleTargetGroupByOutputType[P]>
            : GetScalarType<T[P], FacegateScheduleTargetGroupByOutputType[P]>
        }
      >
    >


  export type FacegateScheduleTargetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    deviceId?: boolean
    schedule?: boolean | FacegateScheduleArgs<ExtArgs>
    device?: boolean | FacegateDeviceArgs<ExtArgs>
  }, ExtArgs["result"]["facegateScheduleTarget"]>

  export type FacegateScheduleTargetSelectScalar = {
    id?: boolean
    scheduleId?: boolean
    deviceId?: boolean
  }

  export type FacegateScheduleTargetInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    schedule?: boolean | FacegateScheduleArgs<ExtArgs>
    device?: boolean | FacegateDeviceArgs<ExtArgs>
  }


  type FacegateScheduleTargetGetPayload<S extends boolean | null | undefined | FacegateScheduleTargetArgs> = $Types.GetResult<FacegateScheduleTargetPayload, S>

  type FacegateScheduleTargetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegateScheduleTargetFindManyArgs, 'select' | 'include'> & {
      select?: FacegateScheduleTargetCountAggregateInputType | true
    }

  export interface FacegateScheduleTargetDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegateScheduleTarget'], meta: { name: 'FacegateScheduleTarget' } }
    /**
     * Find zero or one FacegateScheduleTarget that matches the filter.
     * @param {FacegateScheduleTargetFindUniqueArgs} args - Arguments to find a FacegateScheduleTarget
     * @example
     * // Get one FacegateScheduleTarget
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegateScheduleTargetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleTargetFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegateScheduleTarget that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegateScheduleTargetFindUniqueOrThrowArgs} args - Arguments to find a FacegateScheduleTarget
     * @example
     * // Get one FacegateScheduleTarget
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegateScheduleTargetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleTargetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegateScheduleTarget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetFindFirstArgs} args - Arguments to find a FacegateScheduleTarget
     * @example
     * // Get one FacegateScheduleTarget
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegateScheduleTargetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleTargetFindFirstArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegateScheduleTarget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetFindFirstOrThrowArgs} args - Arguments to find a FacegateScheduleTarget
     * @example
     * // Get one FacegateScheduleTarget
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegateScheduleTargetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleTargetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegateScheduleTargets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegateScheduleTargets
     * const facegateScheduleTargets = await prisma.facegateScheduleTarget.findMany()
     * 
     * // Get first 10 FacegateScheduleTargets
     * const facegateScheduleTargets = await prisma.facegateScheduleTarget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegateScheduleTargetWithIdOnly = await prisma.facegateScheduleTarget.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegateScheduleTargetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleTargetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegateScheduleTarget.
     * @param {FacegateScheduleTargetCreateArgs} args - Arguments to create a FacegateScheduleTarget.
     * @example
     * // Create one FacegateScheduleTarget
     * const FacegateScheduleTarget = await prisma.facegateScheduleTarget.create({
     *   data: {
     *     // ... data to create a FacegateScheduleTarget
     *   }
     * })
     * 
    **/
    create<T extends FacegateScheduleTargetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleTargetCreateArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegateScheduleTarget.
     * @param {FacegateScheduleTargetDeleteArgs} args - Arguments to delete one FacegateScheduleTarget.
     * @example
     * // Delete one FacegateScheduleTarget
     * const FacegateScheduleTarget = await prisma.facegateScheduleTarget.delete({
     *   where: {
     *     // ... filter to delete one FacegateScheduleTarget
     *   }
     * })
     * 
    **/
    delete<T extends FacegateScheduleTargetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleTargetDeleteArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegateScheduleTarget.
     * @param {FacegateScheduleTargetUpdateArgs} args - Arguments to update one FacegateScheduleTarget.
     * @example
     * // Update one FacegateScheduleTarget
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegateScheduleTargetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleTargetUpdateArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegateScheduleTargets.
     * @param {FacegateScheduleTargetDeleteManyArgs} args - Arguments to filter FacegateScheduleTargets to delete.
     * @example
     * // Delete a few FacegateScheduleTargets
     * const { count } = await prisma.facegateScheduleTarget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegateScheduleTargetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateScheduleTargetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegateScheduleTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegateScheduleTargets
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegateScheduleTargetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleTargetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegateScheduleTarget.
     * @param {FacegateScheduleTargetUpsertArgs} args - Arguments to update or create a FacegateScheduleTarget.
     * @example
     * // Update or create a FacegateScheduleTarget
     * const facegateScheduleTarget = await prisma.facegateScheduleTarget.upsert({
     *   create: {
     *     // ... data to create a FacegateScheduleTarget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegateScheduleTarget we want to update
     *   }
     * })
    **/
    upsert<T extends FacegateScheduleTargetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateScheduleTargetUpsertArgs<ExtArgs>>
    ): Prisma__FacegateScheduleTargetClient<$Types.GetResult<FacegateScheduleTargetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegateScheduleTargets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetCountArgs} args - Arguments to filter FacegateScheduleTargets to count.
     * @example
     * // Count the number of FacegateScheduleTargets
     * const count = await prisma.facegateScheduleTarget.count({
     *   where: {
     *     // ... the filter for the FacegateScheduleTargets we want to count
     *   }
     * })
    **/
    count<T extends FacegateScheduleTargetCountArgs>(
      args?: Subset<T, FacegateScheduleTargetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegateScheduleTargetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegateScheduleTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegateScheduleTargetAggregateArgs>(args: Subset<T, FacegateScheduleTargetAggregateArgs>): Prisma.PrismaPromise<GetFacegateScheduleTargetAggregateType<T>>

    /**
     * Group by FacegateScheduleTarget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateScheduleTargetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegateScheduleTargetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegateScheduleTargetGroupByArgs['orderBy'] }
        : { orderBy?: FacegateScheduleTargetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegateScheduleTargetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegateScheduleTargetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegateScheduleTarget model
   */
  readonly fields: FacegateScheduleTargetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegateScheduleTarget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegateScheduleTargetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    schedule<T extends FacegateScheduleArgs<ExtArgs> = {}>(args?: Subset<T, FacegateScheduleArgs<ExtArgs>>): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    device<T extends FacegateDeviceArgs<ExtArgs> = {}>(args?: Subset<T, FacegateDeviceArgs<ExtArgs>>): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegateScheduleTarget model
   */ 
  interface FacegateScheduleTargetFieldRefs {
    readonly id: FieldRef<"FacegateScheduleTarget", 'String'>
    readonly scheduleId: FieldRef<"FacegateScheduleTarget", 'String'>
    readonly deviceId: FieldRef<"FacegateScheduleTarget", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FacegateScheduleTarget findUnique
   */
  export type FacegateScheduleTargetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * Filter, which FacegateScheduleTarget to fetch.
     */
    where: FacegateScheduleTargetWhereUniqueInput
  }


  /**
   * FacegateScheduleTarget findUniqueOrThrow
   */
  export type FacegateScheduleTargetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * Filter, which FacegateScheduleTarget to fetch.
     */
    where: FacegateScheduleTargetWhereUniqueInput
  }


  /**
   * FacegateScheduleTarget findFirst
   */
  export type FacegateScheduleTargetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * Filter, which FacegateScheduleTarget to fetch.
     */
    where?: FacegateScheduleTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateScheduleTargets to fetch.
     */
    orderBy?: FacegateScheduleTargetOrderByWithRelationInput | FacegateScheduleTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateScheduleTargets.
     */
    cursor?: FacegateScheduleTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateScheduleTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateScheduleTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateScheduleTargets.
     */
    distinct?: FacegateScheduleTargetScalarFieldEnum | FacegateScheduleTargetScalarFieldEnum[]
  }


  /**
   * FacegateScheduleTarget findFirstOrThrow
   */
  export type FacegateScheduleTargetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * Filter, which FacegateScheduleTarget to fetch.
     */
    where?: FacegateScheduleTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateScheduleTargets to fetch.
     */
    orderBy?: FacegateScheduleTargetOrderByWithRelationInput | FacegateScheduleTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateScheduleTargets.
     */
    cursor?: FacegateScheduleTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateScheduleTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateScheduleTargets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateScheduleTargets.
     */
    distinct?: FacegateScheduleTargetScalarFieldEnum | FacegateScheduleTargetScalarFieldEnum[]
  }


  /**
   * FacegateScheduleTarget findMany
   */
  export type FacegateScheduleTargetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * Filter, which FacegateScheduleTargets to fetch.
     */
    where?: FacegateScheduleTargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateScheduleTargets to fetch.
     */
    orderBy?: FacegateScheduleTargetOrderByWithRelationInput | FacegateScheduleTargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegateScheduleTargets.
     */
    cursor?: FacegateScheduleTargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateScheduleTargets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateScheduleTargets.
     */
    skip?: number
    distinct?: FacegateScheduleTargetScalarFieldEnum | FacegateScheduleTargetScalarFieldEnum[]
  }


  /**
   * FacegateScheduleTarget create
   */
  export type FacegateScheduleTargetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegateScheduleTarget.
     */
    data: XOR<FacegateScheduleTargetCreateInput, FacegateScheduleTargetUncheckedCreateInput>
  }


  /**
   * FacegateScheduleTarget update
   */
  export type FacegateScheduleTargetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegateScheduleTarget.
     */
    data: XOR<FacegateScheduleTargetUpdateInput, FacegateScheduleTargetUncheckedUpdateInput>
    /**
     * Choose, which FacegateScheduleTarget to update.
     */
    where: FacegateScheduleTargetWhereUniqueInput
  }


  /**
   * FacegateScheduleTarget updateMany
   */
  export type FacegateScheduleTargetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegateScheduleTargets.
     */
    data: XOR<FacegateScheduleTargetUpdateManyMutationInput, FacegateScheduleTargetUncheckedUpdateManyInput>
    /**
     * Filter which FacegateScheduleTargets to update
     */
    where?: FacegateScheduleTargetWhereInput
  }


  /**
   * FacegateScheduleTarget upsert
   */
  export type FacegateScheduleTargetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegateScheduleTarget to update in case it exists.
     */
    where: FacegateScheduleTargetWhereUniqueInput
    /**
     * In case the FacegateScheduleTarget found by the `where` argument doesn't exist, create a new FacegateScheduleTarget with this data.
     */
    create: XOR<FacegateScheduleTargetCreateInput, FacegateScheduleTargetUncheckedCreateInput>
    /**
     * In case the FacegateScheduleTarget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegateScheduleTargetUpdateInput, FacegateScheduleTargetUncheckedUpdateInput>
  }


  /**
   * FacegateScheduleTarget delete
   */
  export type FacegateScheduleTargetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
    /**
     * Filter which FacegateScheduleTarget to delete.
     */
    where: FacegateScheduleTargetWhereUniqueInput
  }


  /**
   * FacegateScheduleTarget deleteMany
   */
  export type FacegateScheduleTargetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateScheduleTargets to delete
     */
    where?: FacegateScheduleTargetWhereInput
  }


  /**
   * FacegateScheduleTarget without action
   */
  export type FacegateScheduleTargetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateScheduleTarget
     */
    select?: FacegateScheduleTargetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateScheduleTargetInclude<ExtArgs> | null
  }



  /**
   * Model FacegateJob
   */


  export type AggregateFacegateJob = {
    _count: FacegateJobCountAggregateOutputType | null
    _avg: FacegateJobAvgAggregateOutputType | null
    _sum: FacegateJobSumAggregateOutputType | null
    _min: FacegateJobMinAggregateOutputType | null
    _max: FacegateJobMaxAggregateOutputType | null
  }

  export type FacegateJobAvgAggregateOutputType = {
    retryCount: number | null
  }

  export type FacegateJobSumAggregateOutputType = {
    retryCount: number | null
  }

  export type FacegateJobMinAggregateOutputType = {
    id: string | null
    scheduleId: string | null
    deviceId: string | null
    state: string | null
    retryCount: number | null
    lastError: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegateJobMaxAggregateOutputType = {
    id: string | null
    scheduleId: string | null
    deviceId: string | null
    state: string | null
    retryCount: number | null
    lastError: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacegateJobCountAggregateOutputType = {
    id: number
    scheduleId: number
    deviceId: number
    state: number
    retryCount: number
    lastError: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacegateJobAvgAggregateInputType = {
    retryCount?: true
  }

  export type FacegateJobSumAggregateInputType = {
    retryCount?: true
  }

  export type FacegateJobMinAggregateInputType = {
    id?: true
    scheduleId?: true
    deviceId?: true
    state?: true
    retryCount?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegateJobMaxAggregateInputType = {
    id?: true
    scheduleId?: true
    deviceId?: true
    state?: true
    retryCount?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacegateJobCountAggregateInputType = {
    id?: true
    scheduleId?: true
    deviceId?: true
    state?: true
    retryCount?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacegateJobAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateJob to aggregate.
     */
    where?: FacegateJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateJobs to fetch.
     */
    orderBy?: FacegateJobOrderByWithRelationInput | FacegateJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacegateJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacegateJobs
    **/
    _count?: true | FacegateJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacegateJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacegateJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacegateJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacegateJobMaxAggregateInputType
  }

  export type GetFacegateJobAggregateType<T extends FacegateJobAggregateArgs> = {
        [P in keyof T & keyof AggregateFacegateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacegateJob[P]>
      : GetScalarType<T[P], AggregateFacegateJob[P]>
  }




  export type FacegateJobGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FacegateJobWhereInput
    orderBy?: FacegateJobOrderByWithAggregationInput | FacegateJobOrderByWithAggregationInput[]
    by: FacegateJobScalarFieldEnum[] | FacegateJobScalarFieldEnum
    having?: FacegateJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacegateJobCountAggregateInputType | true
    _avg?: FacegateJobAvgAggregateInputType
    _sum?: FacegateJobSumAggregateInputType
    _min?: FacegateJobMinAggregateInputType
    _max?: FacegateJobMaxAggregateInputType
  }


  export type FacegateJobGroupByOutputType = {
    id: string
    scheduleId: string
    deviceId: string
    state: string
    retryCount: number
    lastError: string | null
    createdAt: Date
    updatedAt: Date
    _count: FacegateJobCountAggregateOutputType | null
    _avg: FacegateJobAvgAggregateOutputType | null
    _sum: FacegateJobSumAggregateOutputType | null
    _min: FacegateJobMinAggregateOutputType | null
    _max: FacegateJobMaxAggregateOutputType | null
  }

  type GetFacegateJobGroupByPayload<T extends FacegateJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacegateJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacegateJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacegateJobGroupByOutputType[P]>
            : GetScalarType<T[P], FacegateJobGroupByOutputType[P]>
        }
      >
    >


  export type FacegateJobSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    deviceId?: boolean
    state?: boolean
    retryCount?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schedule?: boolean | FacegateScheduleArgs<ExtArgs>
    device?: boolean | FacegateDeviceArgs<ExtArgs>
  }, ExtArgs["result"]["facegateJob"]>

  export type FacegateJobSelectScalar = {
    id?: boolean
    scheduleId?: boolean
    deviceId?: boolean
    state?: boolean
    retryCount?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FacegateJobInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    schedule?: boolean | FacegateScheduleArgs<ExtArgs>
    device?: boolean | FacegateDeviceArgs<ExtArgs>
  }


  type FacegateJobGetPayload<S extends boolean | null | undefined | FacegateJobArgs> = $Types.GetResult<FacegateJobPayload, S>

  type FacegateJobCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FacegateJobFindManyArgs, 'select' | 'include'> & {
      select?: FacegateJobCountAggregateInputType | true
    }

  export interface FacegateJobDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacegateJob'], meta: { name: 'FacegateJob' } }
    /**
     * Find zero or one FacegateJob that matches the filter.
     * @param {FacegateJobFindUniqueArgs} args - Arguments to find a FacegateJob
     * @example
     * // Get one FacegateJob
     * const facegateJob = await prisma.facegateJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacegateJobFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateJobFindUniqueArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FacegateJob that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacegateJobFindUniqueOrThrowArgs} args - Arguments to find a FacegateJob
     * @example
     * // Get one FacegateJob
     * const facegateJob = await prisma.facegateJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacegateJobFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateJobFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FacegateJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobFindFirstArgs} args - Arguments to find a FacegateJob
     * @example
     * // Get one FacegateJob
     * const facegateJob = await prisma.facegateJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacegateJobFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateJobFindFirstArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FacegateJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobFindFirstOrThrowArgs} args - Arguments to find a FacegateJob
     * @example
     * // Get one FacegateJob
     * const facegateJob = await prisma.facegateJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacegateJobFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateJobFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FacegateJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacegateJobs
     * const facegateJobs = await prisma.facegateJob.findMany()
     * 
     * // Get first 10 FacegateJobs
     * const facegateJobs = await prisma.facegateJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facegateJobWithIdOnly = await prisma.facegateJob.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacegateJobFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateJobFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FacegateJob.
     * @param {FacegateJobCreateArgs} args - Arguments to create a FacegateJob.
     * @example
     * // Create one FacegateJob
     * const FacegateJob = await prisma.facegateJob.create({
     *   data: {
     *     // ... data to create a FacegateJob
     *   }
     * })
     * 
    **/
    create<T extends FacegateJobCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateJobCreateArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a FacegateJob.
     * @param {FacegateJobDeleteArgs} args - Arguments to delete one FacegateJob.
     * @example
     * // Delete one FacegateJob
     * const FacegateJob = await prisma.facegateJob.delete({
     *   where: {
     *     // ... filter to delete one FacegateJob
     *   }
     * })
     * 
    **/
    delete<T extends FacegateJobDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateJobDeleteArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FacegateJob.
     * @param {FacegateJobUpdateArgs} args - Arguments to update one FacegateJob.
     * @example
     * // Update one FacegateJob
     * const facegateJob = await prisma.facegateJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacegateJobUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateJobUpdateArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FacegateJobs.
     * @param {FacegateJobDeleteManyArgs} args - Arguments to filter FacegateJobs to delete.
     * @example
     * // Delete a few FacegateJobs
     * const { count } = await prisma.facegateJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacegateJobDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FacegateJobDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacegateJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacegateJobs
     * const facegateJob = await prisma.facegateJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacegateJobUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateJobUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacegateJob.
     * @param {FacegateJobUpsertArgs} args - Arguments to update or create a FacegateJob.
     * @example
     * // Update or create a FacegateJob
     * const facegateJob = await prisma.facegateJob.upsert({
     *   create: {
     *     // ... data to create a FacegateJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacegateJob we want to update
     *   }
     * })
    **/
    upsert<T extends FacegateJobUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FacegateJobUpsertArgs<ExtArgs>>
    ): Prisma__FacegateJobClient<$Types.GetResult<FacegateJobPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FacegateJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobCountArgs} args - Arguments to filter FacegateJobs to count.
     * @example
     * // Count the number of FacegateJobs
     * const count = await prisma.facegateJob.count({
     *   where: {
     *     // ... the filter for the FacegateJobs we want to count
     *   }
     * })
    **/
    count<T extends FacegateJobCountArgs>(
      args?: Subset<T, FacegateJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacegateJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacegateJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacegateJobAggregateArgs>(args: Subset<T, FacegateJobAggregateArgs>): Prisma.PrismaPromise<GetFacegateJobAggregateType<T>>

    /**
     * Group by FacegateJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacegateJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacegateJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacegateJobGroupByArgs['orderBy'] }
        : { orderBy?: FacegateJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacegateJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacegateJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacegateJob model
   */
  readonly fields: FacegateJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacegateJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacegateJobClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    schedule<T extends FacegateScheduleArgs<ExtArgs> = {}>(args?: Subset<T, FacegateScheduleArgs<ExtArgs>>): Prisma__FacegateScheduleClient<$Types.GetResult<FacegateSchedulePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    device<T extends FacegateDeviceArgs<ExtArgs> = {}>(args?: Subset<T, FacegateDeviceArgs<ExtArgs>>): Prisma__FacegateDeviceClient<$Types.GetResult<FacegateDevicePayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the FacegateJob model
   */ 
  interface FacegateJobFieldRefs {
    readonly id: FieldRef<"FacegateJob", 'String'>
    readonly scheduleId: FieldRef<"FacegateJob", 'String'>
    readonly deviceId: FieldRef<"FacegateJob", 'String'>
    readonly state: FieldRef<"FacegateJob", 'String'>
    readonly retryCount: FieldRef<"FacegateJob", 'Int'>
    readonly lastError: FieldRef<"FacegateJob", 'String'>
    readonly createdAt: FieldRef<"FacegateJob", 'DateTime'>
    readonly updatedAt: FieldRef<"FacegateJob", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FacegateJob findUnique
   */
  export type FacegateJobFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * Filter, which FacegateJob to fetch.
     */
    where: FacegateJobWhereUniqueInput
  }


  /**
   * FacegateJob findUniqueOrThrow
   */
  export type FacegateJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * Filter, which FacegateJob to fetch.
     */
    where: FacegateJobWhereUniqueInput
  }


  /**
   * FacegateJob findFirst
   */
  export type FacegateJobFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * Filter, which FacegateJob to fetch.
     */
    where?: FacegateJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateJobs to fetch.
     */
    orderBy?: FacegateJobOrderByWithRelationInput | FacegateJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateJobs.
     */
    cursor?: FacegateJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateJobs.
     */
    distinct?: FacegateJobScalarFieldEnum | FacegateJobScalarFieldEnum[]
  }


  /**
   * FacegateJob findFirstOrThrow
   */
  export type FacegateJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * Filter, which FacegateJob to fetch.
     */
    where?: FacegateJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateJobs to fetch.
     */
    orderBy?: FacegateJobOrderByWithRelationInput | FacegateJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacegateJobs.
     */
    cursor?: FacegateJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacegateJobs.
     */
    distinct?: FacegateJobScalarFieldEnum | FacegateJobScalarFieldEnum[]
  }


  /**
   * FacegateJob findMany
   */
  export type FacegateJobFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * Filter, which FacegateJobs to fetch.
     */
    where?: FacegateJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacegateJobs to fetch.
     */
    orderBy?: FacegateJobOrderByWithRelationInput | FacegateJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacegateJobs.
     */
    cursor?: FacegateJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacegateJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacegateJobs.
     */
    skip?: number
    distinct?: FacegateJobScalarFieldEnum | FacegateJobScalarFieldEnum[]
  }


  /**
   * FacegateJob create
   */
  export type FacegateJobCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * The data needed to create a FacegateJob.
     */
    data: XOR<FacegateJobCreateInput, FacegateJobUncheckedCreateInput>
  }


  /**
   * FacegateJob update
   */
  export type FacegateJobUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * The data needed to update a FacegateJob.
     */
    data: XOR<FacegateJobUpdateInput, FacegateJobUncheckedUpdateInput>
    /**
     * Choose, which FacegateJob to update.
     */
    where: FacegateJobWhereUniqueInput
  }


  /**
   * FacegateJob updateMany
   */
  export type FacegateJobUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacegateJobs.
     */
    data: XOR<FacegateJobUpdateManyMutationInput, FacegateJobUncheckedUpdateManyInput>
    /**
     * Filter which FacegateJobs to update
     */
    where?: FacegateJobWhereInput
  }


  /**
   * FacegateJob upsert
   */
  export type FacegateJobUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * The filter to search for the FacegateJob to update in case it exists.
     */
    where: FacegateJobWhereUniqueInput
    /**
     * In case the FacegateJob found by the `where` argument doesn't exist, create a new FacegateJob with this data.
     */
    create: XOR<FacegateJobCreateInput, FacegateJobUncheckedCreateInput>
    /**
     * In case the FacegateJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacegateJobUpdateInput, FacegateJobUncheckedUpdateInput>
  }


  /**
   * FacegateJob delete
   */
  export type FacegateJobDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
    /**
     * Filter which FacegateJob to delete.
     */
    where: FacegateJobWhereUniqueInput
  }


  /**
   * FacegateJob deleteMany
   */
  export type FacegateJobDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacegateJobs to delete
     */
    where?: FacegateJobWhereInput
  }


  /**
   * FacegateJob without action
   */
  export type FacegateJobArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacegateJob
     */
    select?: FacegateJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacegateJobInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    name: 'name',
    gender: 'gender',
    birthDate: 'birthDate',
    phoneNumber: 'phoneNumber',
    address: 'address',
    bio: 'bio',
    website: 'website',
    relationshipStatus: 'relationshipStatus',
    emailVerified: 'emailVerified',
    image: 'image',
    profilePhoto: 'profilePhoto',
    coverPhoto: 'coverPhoto',
    passwordHash: 'passwordHash',
    walletAddress: 'walletAddress',
    apeBalance: 'apeBalance',
    walletCreatedAt: 'walletCreatedAt',
    featured: 'featured',
    ttsModelId: 'ttsModelId',
    ttsVoiceId: 'ttsVoiceId',
    ttsPlaybackSpeed: 'ttsPlaybackSpeed',
    punked: 'punked',
    appessoBalance: 'appessoBalance',
    appessoBalanceUpdatedAt: 'appessoBalanceUpdatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    followerId: 'followerId',
    followingId: 'followingId'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    userId: 'userId',
    isTask: 'isTask',
    rewardAmount: 'rewardAmount',
    taskStatus: 'taskStatus',
    completedBy: 'completedBy',
    completedAt: 'completedAt',
    initialPaymentAmount: 'initialPaymentAmount',
    initialPaymentAt: 'initialPaymentAt',
    finalPaymentAmount: 'finalPaymentAmount',
    finalPaymentAt: 'finalPaymentAt',
    completionRequestedAt: 'completionRequestedAt',
    completionConfirmedAt: 'completionConfirmedAt',
    audioUrl: 'audioUrl'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const PostLikeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    postId: 'postId'
  };

  export type PostLikeScalarFieldEnum = (typeof PostLikeScalarFieldEnum)[keyof typeof PostLikeScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    userId: 'userId',
    postId: 'postId',
    parentId: 'parentId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CommentLikeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    commentId: 'commentId'
  };

  export type CommentLikeScalarFieldEnum = (typeof CommentLikeScalarFieldEnum)[keyof typeof CommentLikeScalarFieldEnum]


  export const VisualMediaScalarFieldEnum: {
    id: 'id',
    type: 'type',
    fileName: 'fileName',
    uploadedAt: 'uploadedAt',
    userId: 'userId',
    postId: 'postId'
  };

  export type VisualMediaScalarFieldEnum = (typeof VisualMediaScalarFieldEnum)[keyof typeof VisualMediaScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    type: 'type',
    sourceId: 'sourceId',
    targetId: 'targetId',
    sourceUserId: 'sourceUserId',
    targetUserId: 'targetUserId',
    isNotificationActive: 'isNotificationActive',
    isNotificationRead: 'isNotificationRead'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const ActivityTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ActivityTypeScalarFieldEnum = (typeof ActivityTypeScalarFieldEnum)[keyof typeof ActivityTypeScalarFieldEnum]


  export const VisualMediaTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type VisualMediaTypeScalarFieldEnum = (typeof VisualMediaTypeScalarFieldEnum)[keyof typeof VisualMediaTypeScalarFieldEnum]


  export const GenderScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GenderScalarFieldEnum = (typeof GenderScalarFieldEnum)[keyof typeof GenderScalarFieldEnum]


  export const RelationshipStatusScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RelationshipStatusScalarFieldEnum = (typeof RelationshipStatusScalarFieldEnum)[keyof typeof RelationshipStatusScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    participant1Id: 'participant1Id',
    participant2Id: 'participant2Id',
    createdAt: 'createdAt',
    lastMessageAt: 'lastMessageAt'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    conversationId: 'conversationId',
    senderId: 'senderId',
    createdAt: 'createdAt',
    isRead: 'isRead',
    type: 'type',
    redPacketAmount: 'redPacketAmount',
    redPacketMessage: 'redPacketMessage',
    redPacketStatus: 'redPacketStatus',
    redPacketClaimedAt: 'redPacketClaimedAt',
    taskPostId: 'taskPostId',
    taskFinalAmount: 'taskFinalAmount',
    taskCompletionStatus: 'taskCompletionStatus',
    isAIResponse: 'isAIResponse'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const WalletTransactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    amount: 'amount',
    status: 'status',
    description: 'description',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    txHash: 'txHash',
    createdAt: 'createdAt',
    completedAt: 'completedAt'
  };

  export type WalletTransactionScalarFieldEnum = (typeof WalletTransactionScalarFieldEnum)[keyof typeof WalletTransactionScalarFieldEnum]


  export const AIProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    llmProvider: 'llmProvider',
    llmModel: 'llmModel',
    temperature: 'temperature',
    maxTokens: 'maxTokens',
    topP: 'topP',
    systemPrompt: 'systemPrompt',
    roleTemplate: 'roleTemplate',
    contextPrompts: 'contextPrompts',
    activeVoiceId: 'activeVoiceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AIProfileScalarFieldEnum = (typeof AIProfileScalarFieldEnum)[keyof typeof AIProfileScalarFieldEnum]


  export const AIMemoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    category: 'category',
    title: 'title',
    content: 'content',
    tags: 'tags',
    score: 'score',
    metadata: 'metadata',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AIMemoryScalarFieldEnum = (typeof AIMemoryScalarFieldEnum)[keyof typeof AIMemoryScalarFieldEnum]


  export const VoiceTrainingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    profileId: 'profileId',
    name: 'name',
    version: 'version',
    status: 'status',
    progress: 'progress',
    sampleKeys: 'sampleKeys',
    modelKey: 'modelKey',
    sampleCount: 'sampleCount',
    duration: 'duration',
    accuracy: 'accuracy',
    trainingStartedAt: 'trainingStartedAt',
    trainingCompletedAt: 'trainingCompletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VoiceTrainingScalarFieldEnum = (typeof VoiceTrainingScalarFieldEnum)[keyof typeof VoiceTrainingScalarFieldEnum]


  export const FacegateDeviceScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    prodType: 'prodType',
    prodName: 'prodName',
    relaySlots: 'relaySlots',
    lastSeenTs: 'lastSeenTs',
    fwVersion: 'fwVersion',
    status: 'status',
    online: 'online',
    tz: 'tz',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacegateDeviceScalarFieldEnum = (typeof FacegateDeviceScalarFieldEnum)[keyof typeof FacegateDeviceScalarFieldEnum]


  export const FacegatePersonScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    phone: 'phone',
    personName: 'personName',
    localImagePath: 'localImagePath',
    imageChecksum: 'imageChecksum',
    icCardId: 'icCardId',
    idCardNo: 'idCardNo',
    memberLevel: 'memberLevel',
    memberExpiry: 'memberExpiry',
    isApeLord: 'isApeLord',
    passPlans: 'passPlans',
    syncStatus: 'syncStatus',
    extInfo: 'extInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacegatePersonScalarFieldEnum = (typeof FacegatePersonScalarFieldEnum)[keyof typeof FacegatePersonScalarFieldEnum]


  export const FacegateRecordScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    recordId: 'recordId',
    personPhone: 'personPhone',
    recordTime: 'recordTime',
    recordType: 'recordType',
    recordPass: 'recordPass',
    similarity: 'similarity',
    temperature: 'temperature',
    qrcode: 'qrcode',
    healthCodeColor: 'healthCodeColor',
    recordPicUrl: 'recordPicUrl',
    idCardPicUrl: 'idCardPicUrl',
    raw: 'raw',
    createdAt: 'createdAt'
  };

  export type FacegateRecordScalarFieldEnum = (typeof FacegateRecordScalarFieldEnum)[keyof typeof FacegateRecordScalarFieldEnum]


  export const FacegateScheduleScalarFieldEnum: {
    id: 'id',
    userPhone: 'userPhone',
    imageId: 'imageId',
    payloadType: 'payloadType',
    startAt: 'startAt',
    endAt: 'endAt',
    cron: 'cron',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacegateScheduleScalarFieldEnum = (typeof FacegateScheduleScalarFieldEnum)[keyof typeof FacegateScheduleScalarFieldEnum]


  export const FacegateImageScalarFieldEnum: {
    id: 'id',
    userPhone: 'userPhone',
    localPath: 'localPath',
    fileName: 'fileName',
    url: 'url',
    createdAt: 'createdAt'
  };

  export type FacegateImageScalarFieldEnum = (typeof FacegateImageScalarFieldEnum)[keyof typeof FacegateImageScalarFieldEnum]


  export const FacegateScheduleTargetScalarFieldEnum: {
    id: 'id',
    scheduleId: 'scheduleId',
    deviceId: 'deviceId'
  };

  export type FacegateScheduleTargetScalarFieldEnum = (typeof FacegateScheduleTargetScalarFieldEnum)[keyof typeof FacegateScheduleTargetScalarFieldEnum]


  export const FacegateJobScalarFieldEnum: {
    id: 'id',
    scheduleId: 'scheduleId',
    deviceId: 'deviceId',
    state: 'state',
    retryCount: 'retryCount',
    lastError: 'lastError',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacegateJobScalarFieldEnum = (typeof FacegateJobScalarFieldEnum)[keyof typeof FacegateJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    relationshipStatus?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    coverPhoto?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    walletAddress?: StringNullableFilter<"User"> | string | null
    apeBalance?: FloatFilter<"User"> | number
    walletCreatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    featured?: BoolFilter<"User"> | boolean
    ttsModelId?: StringNullableFilter<"User"> | string | null
    ttsVoiceId?: StringNullableFilter<"User"> | string | null
    ttsPlaybackSpeed?: FloatNullableFilter<"User"> | number | null
    punked?: BoolFilter<"User"> | boolean
    appessoBalance?: FloatNullableFilter<"User"> | number | null
    appessoBalanceUpdatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    post?: PostListRelationFilter
    visualMedia?: VisualMediaListRelationFilter
    postLikes?: PostLikeListRelationFilter
    comments?: CommentListRelationFilter
    commentLikes?: CommentLikeListRelationFilter
    followers?: FollowListRelationFilter
    following?: FollowListRelationFilter
    activities?: ActivityListRelationFilter
    notifications?: ActivityListRelationFilter
    conversationsAsParticipant1?: ConversationListRelationFilter
    conversationsAsParticipant2?: ConversationListRelationFilter
    messages?: MessageListRelationFilter
    sentTransactions?: WalletTransactionListRelationFilter
    receivedTransactions?: WalletTransactionListRelationFilter
    aiProfile?: XOR<AIProfileNullableRelationFilter, AIProfileWhereInput> | null
    aiMemories?: AIMemoryListRelationFilter
    facegatePerson?: XOR<FacegatePersonNullableRelationFilter, FacegatePersonWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    relationshipStatus?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    coverPhoto?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    walletAddress?: SortOrderInput | SortOrder
    apeBalance?: SortOrder
    walletCreatedAt?: SortOrderInput | SortOrder
    featured?: SortOrder
    ttsModelId?: SortOrderInput | SortOrder
    ttsVoiceId?: SortOrderInput | SortOrder
    ttsPlaybackSpeed?: SortOrderInput | SortOrder
    punked?: SortOrder
    appessoBalance?: SortOrderInput | SortOrder
    appessoBalanceUpdatedAt?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    post?: PostOrderByRelationAggregateInput
    visualMedia?: VisualMediaOrderByRelationAggregateInput
    postLikes?: PostLikeOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    commentLikes?: CommentLikeOrderByRelationAggregateInput
    followers?: FollowOrderByRelationAggregateInput
    following?: FollowOrderByRelationAggregateInput
    activities?: ActivityOrderByRelationAggregateInput
    notifications?: ActivityOrderByRelationAggregateInput
    conversationsAsParticipant1?: ConversationOrderByRelationAggregateInput
    conversationsAsParticipant2?: ConversationOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    sentTransactions?: WalletTransactionOrderByRelationAggregateInput
    receivedTransactions?: WalletTransactionOrderByRelationAggregateInput
    aiProfile?: AIProfileOrderByWithRelationInput
    aiMemories?: AIMemoryOrderByRelationAggregateInput
    facegatePerson?: FacegatePersonOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    phoneNumber?: string
    walletAddress?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    address?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    relationshipStatus?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    coverPhoto?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    apeBalance?: FloatFilter<"User"> | number
    walletCreatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    featured?: BoolFilter<"User"> | boolean
    ttsModelId?: StringNullableFilter<"User"> | string | null
    ttsVoiceId?: StringNullableFilter<"User"> | string | null
    ttsPlaybackSpeed?: FloatNullableFilter<"User"> | number | null
    punked?: BoolFilter<"User"> | boolean
    appessoBalance?: FloatNullableFilter<"User"> | number | null
    appessoBalanceUpdatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    post?: PostListRelationFilter
    visualMedia?: VisualMediaListRelationFilter
    postLikes?: PostLikeListRelationFilter
    comments?: CommentListRelationFilter
    commentLikes?: CommentLikeListRelationFilter
    followers?: FollowListRelationFilter
    following?: FollowListRelationFilter
    activities?: ActivityListRelationFilter
    notifications?: ActivityListRelationFilter
    conversationsAsParticipant1?: ConversationListRelationFilter
    conversationsAsParticipant2?: ConversationListRelationFilter
    messages?: MessageListRelationFilter
    sentTransactions?: WalletTransactionListRelationFilter
    receivedTransactions?: WalletTransactionListRelationFilter
    aiProfile?: XOR<AIProfileNullableRelationFilter, AIProfileWhereInput> | null
    aiMemories?: AIMemoryListRelationFilter
    facegatePerson?: XOR<FacegatePersonNullableRelationFilter, FacegatePersonWhereInput> | null
  }, "id" | "username" | "email" | "phoneNumber" | "walletAddress">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    relationshipStatus?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    coverPhoto?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    walletAddress?: SortOrderInput | SortOrder
    apeBalance?: SortOrder
    walletCreatedAt?: SortOrderInput | SortOrder
    featured?: SortOrder
    ttsModelId?: SortOrderInput | SortOrder
    ttsVoiceId?: SortOrderInput | SortOrder
    ttsPlaybackSpeed?: SortOrderInput | SortOrder
    punked?: SortOrder
    appessoBalance?: SortOrderInput | SortOrder
    appessoBalanceUpdatedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    website?: StringNullableWithAggregatesFilter<"User"> | string | null
    relationshipStatus?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePhoto?: StringNullableWithAggregatesFilter<"User"> | string | null
    coverPhoto?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    walletAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    apeBalance?: FloatWithAggregatesFilter<"User"> | number
    walletCreatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    featured?: BoolWithAggregatesFilter<"User"> | boolean
    ttsModelId?: StringNullableWithAggregatesFilter<"User"> | string | null
    ttsVoiceId?: StringNullableWithAggregatesFilter<"User"> | string | null
    ttsPlaybackSpeed?: FloatNullableWithAggregatesFilter<"User"> | number | null
    punked?: BoolWithAggregatesFilter<"User"> | boolean
    appessoBalance?: FloatNullableWithAggregatesFilter<"User"> | number | null
    appessoBalanceUpdatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: IntFilter<"Follow"> | number
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    follower?: XOR<UserRelationFilter, UserWhereInput>
    following?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    followerId_followingId?: FollowFollowerIdFollowingIdCompoundUniqueInput
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    follower?: XOR<UserRelationFilter, UserWhereInput>
    following?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "followerId_followingId">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _avg?: FollowAvgOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
    _sum?: FollowSumOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Follow"> | number
    followerId?: StringWithAggregatesFilter<"Follow"> | string
    followingId?: StringWithAggregatesFilter<"Follow"> | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    content?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    userId?: StringFilter<"Post"> | string
    isTask?: BoolFilter<"Post"> | boolean
    rewardAmount?: FloatFilter<"Post"> | number
    taskStatus?: StringNullableFilter<"Post"> | string | null
    completedBy?: StringNullableFilter<"Post"> | string | null
    completedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    initialPaymentAmount?: FloatNullableFilter<"Post"> | number | null
    initialPaymentAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    finalPaymentAmount?: FloatNullableFilter<"Post"> | number | null
    finalPaymentAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    completionRequestedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    completionConfirmedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    audioUrl?: StringNullableFilter<"Post"> | string | null
    visualMedia?: VisualMediaListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    postLikes?: PostLikeListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    isTask?: SortOrder
    rewardAmount?: SortOrder
    taskStatus?: SortOrderInput | SortOrder
    completedBy?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    initialPaymentAmount?: SortOrderInput | SortOrder
    initialPaymentAt?: SortOrderInput | SortOrder
    finalPaymentAmount?: SortOrderInput | SortOrder
    finalPaymentAt?: SortOrderInput | SortOrder
    completionRequestedAt?: SortOrderInput | SortOrder
    completionConfirmedAt?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    visualMedia?: VisualMediaOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    postLikes?: PostLikeOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    content?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    userId?: StringFilter<"Post"> | string
    isTask?: BoolFilter<"Post"> | boolean
    rewardAmount?: FloatFilter<"Post"> | number
    taskStatus?: StringNullableFilter<"Post"> | string | null
    completedBy?: StringNullableFilter<"Post"> | string | null
    completedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    initialPaymentAmount?: FloatNullableFilter<"Post"> | number | null
    initialPaymentAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    finalPaymentAmount?: FloatNullableFilter<"Post"> | number | null
    finalPaymentAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    completionRequestedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    completionConfirmedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    audioUrl?: StringNullableFilter<"Post"> | string | null
    visualMedia?: VisualMediaListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    postLikes?: PostLikeListRelationFilter
    comments?: CommentListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    isTask?: SortOrder
    rewardAmount?: SortOrder
    taskStatus?: SortOrderInput | SortOrder
    completedBy?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    initialPaymentAmount?: SortOrderInput | SortOrder
    initialPaymentAt?: SortOrderInput | SortOrder
    finalPaymentAmount?: SortOrderInput | SortOrder
    finalPaymentAt?: SortOrderInput | SortOrder
    completionRequestedAt?: SortOrderInput | SortOrder
    completionConfirmedAt?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    content?: StringNullableWithAggregatesFilter<"Post"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    userId?: StringWithAggregatesFilter<"Post"> | string
    isTask?: BoolWithAggregatesFilter<"Post"> | boolean
    rewardAmount?: FloatWithAggregatesFilter<"Post"> | number
    taskStatus?: StringNullableWithAggregatesFilter<"Post"> | string | null
    completedBy?: StringNullableWithAggregatesFilter<"Post"> | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    initialPaymentAmount?: FloatNullableWithAggregatesFilter<"Post"> | number | null
    initialPaymentAt?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    finalPaymentAmount?: FloatNullableWithAggregatesFilter<"Post"> | number | null
    finalPaymentAt?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    completionRequestedAt?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    completionConfirmedAt?: DateTimeNullableWithAggregatesFilter<"Post"> | Date | string | null
    audioUrl?: StringNullableWithAggregatesFilter<"Post"> | string | null
  }

  export type PostLikeWhereInput = {
    AND?: PostLikeWhereInput | PostLikeWhereInput[]
    OR?: PostLikeWhereInput[]
    NOT?: PostLikeWhereInput | PostLikeWhereInput[]
    id?: IntFilter<"PostLike"> | number
    createdAt?: DateTimeFilter<"PostLike"> | Date | string
    userId?: StringFilter<"PostLike"> | string
    postId?: IntFilter<"PostLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type PostLikeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_postId?: PostLikeUserIdPostIdCompoundUniqueInput
    AND?: PostLikeWhereInput | PostLikeWhereInput[]
    OR?: PostLikeWhereInput[]
    NOT?: PostLikeWhereInput | PostLikeWhereInput[]
    createdAt?: DateTimeFilter<"PostLike"> | Date | string
    userId?: StringFilter<"PostLike"> | string
    postId?: IntFilter<"PostLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "id" | "userId_postId">

  export type PostLikeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    _count?: PostLikeCountOrderByAggregateInput
    _avg?: PostLikeAvgOrderByAggregateInput
    _max?: PostLikeMaxOrderByAggregateInput
    _min?: PostLikeMinOrderByAggregateInput
    _sum?: PostLikeSumOrderByAggregateInput
  }

  export type PostLikeScalarWhereWithAggregatesInput = {
    AND?: PostLikeScalarWhereWithAggregatesInput | PostLikeScalarWhereWithAggregatesInput[]
    OR?: PostLikeScalarWhereWithAggregatesInput[]
    NOT?: PostLikeScalarWhereWithAggregatesInput | PostLikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PostLike"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PostLike"> | Date | string
    userId?: StringWithAggregatesFilter<"PostLike"> | string
    postId?: IntWithAggregatesFilter<"PostLike"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringFilter<"Comment"> | string
    postId?: IntFilter<"Comment"> | number
    parentId?: IntNullableFilter<"Comment"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    commentLikes?: CommentLikeListRelationFilter
    post?: XOR<PostRelationFilter, PostWhereInput>
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    commentLikes?: CommentLikeOrderByRelationAggregateInput
    post?: PostOrderByWithRelationInput
    parent?: CommentOrderByWithRelationInput
    replies?: CommentOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringFilter<"Comment"> | string
    postId?: IntFilter<"Comment"> | number
    parentId?: IntNullableFilter<"Comment"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    commentLikes?: CommentLikeListRelationFilter
    post?: XOR<PostRelationFilter, PostWhereInput>
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    postId?: IntWithAggregatesFilter<"Comment"> | number
    parentId?: IntNullableWithAggregatesFilter<"Comment"> | number | null
  }

  export type CommentLikeWhereInput = {
    AND?: CommentLikeWhereInput | CommentLikeWhereInput[]
    OR?: CommentLikeWhereInput[]
    NOT?: CommentLikeWhereInput | CommentLikeWhereInput[]
    id?: IntFilter<"CommentLike"> | number
    createdAt?: DateTimeFilter<"CommentLike"> | Date | string
    userId?: StringFilter<"CommentLike"> | string
    commentId?: IntFilter<"CommentLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type CommentLikeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    user?: UserOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type CommentLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_commentId?: CommentLikeUserIdCommentIdCompoundUniqueInput
    AND?: CommentLikeWhereInput | CommentLikeWhereInput[]
    OR?: CommentLikeWhereInput[]
    NOT?: CommentLikeWhereInput | CommentLikeWhereInput[]
    createdAt?: DateTimeFilter<"CommentLike"> | Date | string
    userId?: StringFilter<"CommentLike"> | string
    commentId?: IntFilter<"CommentLike"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "id" | "userId_commentId">

  export type CommentLikeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
    _count?: CommentLikeCountOrderByAggregateInput
    _avg?: CommentLikeAvgOrderByAggregateInput
    _max?: CommentLikeMaxOrderByAggregateInput
    _min?: CommentLikeMinOrderByAggregateInput
    _sum?: CommentLikeSumOrderByAggregateInput
  }

  export type CommentLikeScalarWhereWithAggregatesInput = {
    AND?: CommentLikeScalarWhereWithAggregatesInput | CommentLikeScalarWhereWithAggregatesInput[]
    OR?: CommentLikeScalarWhereWithAggregatesInput[]
    NOT?: CommentLikeScalarWhereWithAggregatesInput | CommentLikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommentLike"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CommentLike"> | Date | string
    userId?: StringWithAggregatesFilter<"CommentLike"> | string
    commentId?: IntWithAggregatesFilter<"CommentLike"> | number
  }

  export type VisualMediaWhereInput = {
    AND?: VisualMediaWhereInput | VisualMediaWhereInput[]
    OR?: VisualMediaWhereInput[]
    NOT?: VisualMediaWhereInput | VisualMediaWhereInput[]
    id?: IntFilter<"VisualMedia"> | number
    type?: StringFilter<"VisualMedia"> | string
    fileName?: StringFilter<"VisualMedia"> | string
    uploadedAt?: DateTimeFilter<"VisualMedia"> | Date | string
    userId?: StringFilter<"VisualMedia"> | string
    postId?: IntFilter<"VisualMedia"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type VisualMediaOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type VisualMediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VisualMediaWhereInput | VisualMediaWhereInput[]
    OR?: VisualMediaWhereInput[]
    NOT?: VisualMediaWhereInput | VisualMediaWhereInput[]
    type?: StringFilter<"VisualMedia"> | string
    fileName?: StringFilter<"VisualMedia"> | string
    uploadedAt?: DateTimeFilter<"VisualMedia"> | Date | string
    userId?: StringFilter<"VisualMedia"> | string
    postId?: IntFilter<"VisualMedia"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "id">

  export type VisualMediaOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    _count?: VisualMediaCountOrderByAggregateInput
    _avg?: VisualMediaAvgOrderByAggregateInput
    _max?: VisualMediaMaxOrderByAggregateInput
    _min?: VisualMediaMinOrderByAggregateInput
    _sum?: VisualMediaSumOrderByAggregateInput
  }

  export type VisualMediaScalarWhereWithAggregatesInput = {
    AND?: VisualMediaScalarWhereWithAggregatesInput | VisualMediaScalarWhereWithAggregatesInput[]
    OR?: VisualMediaScalarWhereWithAggregatesInput[]
    NOT?: VisualMediaScalarWhereWithAggregatesInput | VisualMediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VisualMedia"> | number
    type?: StringWithAggregatesFilter<"VisualMedia"> | string
    fileName?: StringWithAggregatesFilter<"VisualMedia"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"VisualMedia"> | Date | string
    userId?: StringWithAggregatesFilter<"VisualMedia"> | string
    postId?: IntWithAggregatesFilter<"VisualMedia"> | number
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: IntFilter<"Activity"> | number
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    type?: StringFilter<"Activity"> | string
    sourceId?: IntFilter<"Activity"> | number
    targetId?: IntNullableFilter<"Activity"> | number | null
    sourceUserId?: StringFilter<"Activity"> | string
    targetUserId?: StringFilter<"Activity"> | string
    isNotificationActive?: BoolFilter<"Activity"> | boolean
    isNotificationRead?: BoolFilter<"Activity"> | boolean
    sourceUser?: XOR<UserRelationFilter, UserWhereInput>
    targetUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrderInput | SortOrder
    sourceUserId?: SortOrder
    targetUserId?: SortOrder
    isNotificationActive?: SortOrder
    isNotificationRead?: SortOrder
    sourceUser?: UserOrderByWithRelationInput
    targetUser?: UserOrderByWithRelationInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    type?: StringFilter<"Activity"> | string
    sourceId?: IntFilter<"Activity"> | number
    targetId?: IntNullableFilter<"Activity"> | number | null
    sourceUserId?: StringFilter<"Activity"> | string
    targetUserId?: StringFilter<"Activity"> | string
    isNotificationActive?: BoolFilter<"Activity"> | boolean
    isNotificationRead?: BoolFilter<"Activity"> | boolean
    sourceUser?: XOR<UserRelationFilter, UserWhereInput>
    targetUser?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrderInput | SortOrder
    sourceUserId?: SortOrder
    targetUserId?: SortOrder
    isNotificationActive?: SortOrder
    isNotificationRead?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Activity"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    type?: StringWithAggregatesFilter<"Activity"> | string
    sourceId?: IntWithAggregatesFilter<"Activity"> | number
    targetId?: IntNullableWithAggregatesFilter<"Activity"> | number | null
    sourceUserId?: StringWithAggregatesFilter<"Activity"> | string
    targetUserId?: StringWithAggregatesFilter<"Activity"> | string
    isNotificationActive?: BoolWithAggregatesFilter<"Activity"> | boolean
    isNotificationRead?: BoolWithAggregatesFilter<"Activity"> | boolean
  }

  export type ActivityTypeWhereInput = {
    AND?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    OR?: ActivityTypeWhereInput[]
    NOT?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    id?: IntFilter<"ActivityType"> | number
    name?: StringFilter<"ActivityType"> | string
  }

  export type ActivityTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ActivityTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    OR?: ActivityTypeWhereInput[]
    NOT?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
  }, "id" | "name">

  export type ActivityTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ActivityTypeCountOrderByAggregateInput
    _avg?: ActivityTypeAvgOrderByAggregateInput
    _max?: ActivityTypeMaxOrderByAggregateInput
    _min?: ActivityTypeMinOrderByAggregateInput
    _sum?: ActivityTypeSumOrderByAggregateInput
  }

  export type ActivityTypeScalarWhereWithAggregatesInput = {
    AND?: ActivityTypeScalarWhereWithAggregatesInput | ActivityTypeScalarWhereWithAggregatesInput[]
    OR?: ActivityTypeScalarWhereWithAggregatesInput[]
    NOT?: ActivityTypeScalarWhereWithAggregatesInput | ActivityTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ActivityType"> | number
    name?: StringWithAggregatesFilter<"ActivityType"> | string
  }

  export type VisualMediaTypeWhereInput = {
    AND?: VisualMediaTypeWhereInput | VisualMediaTypeWhereInput[]
    OR?: VisualMediaTypeWhereInput[]
    NOT?: VisualMediaTypeWhereInput | VisualMediaTypeWhereInput[]
    id?: IntFilter<"VisualMediaType"> | number
    name?: StringFilter<"VisualMediaType"> | string
  }

  export type VisualMediaTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VisualMediaTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: VisualMediaTypeWhereInput | VisualMediaTypeWhereInput[]
    OR?: VisualMediaTypeWhereInput[]
    NOT?: VisualMediaTypeWhereInput | VisualMediaTypeWhereInput[]
  }, "id" | "name">

  export type VisualMediaTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: VisualMediaTypeCountOrderByAggregateInput
    _avg?: VisualMediaTypeAvgOrderByAggregateInput
    _max?: VisualMediaTypeMaxOrderByAggregateInput
    _min?: VisualMediaTypeMinOrderByAggregateInput
    _sum?: VisualMediaTypeSumOrderByAggregateInput
  }

  export type VisualMediaTypeScalarWhereWithAggregatesInput = {
    AND?: VisualMediaTypeScalarWhereWithAggregatesInput | VisualMediaTypeScalarWhereWithAggregatesInput[]
    OR?: VisualMediaTypeScalarWhereWithAggregatesInput[]
    NOT?: VisualMediaTypeScalarWhereWithAggregatesInput | VisualMediaTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VisualMediaType"> | number
    name?: StringWithAggregatesFilter<"VisualMediaType"> | string
  }

  export type GenderWhereInput = {
    AND?: GenderWhereInput | GenderWhereInput[]
    OR?: GenderWhereInput[]
    NOT?: GenderWhereInput | GenderWhereInput[]
    id?: IntFilter<"Gender"> | number
    name?: StringFilter<"Gender"> | string
  }

  export type GenderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: GenderWhereInput | GenderWhereInput[]
    OR?: GenderWhereInput[]
    NOT?: GenderWhereInput | GenderWhereInput[]
  }, "id" | "name">

  export type GenderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: GenderCountOrderByAggregateInput
    _avg?: GenderAvgOrderByAggregateInput
    _max?: GenderMaxOrderByAggregateInput
    _min?: GenderMinOrderByAggregateInput
    _sum?: GenderSumOrderByAggregateInput
  }

  export type GenderScalarWhereWithAggregatesInput = {
    AND?: GenderScalarWhereWithAggregatesInput | GenderScalarWhereWithAggregatesInput[]
    OR?: GenderScalarWhereWithAggregatesInput[]
    NOT?: GenderScalarWhereWithAggregatesInput | GenderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Gender"> | number
    name?: StringWithAggregatesFilter<"Gender"> | string
  }

  export type RelationshipStatusWhereInput = {
    AND?: RelationshipStatusWhereInput | RelationshipStatusWhereInput[]
    OR?: RelationshipStatusWhereInput[]
    NOT?: RelationshipStatusWhereInput | RelationshipStatusWhereInput[]
    id?: IntFilter<"RelationshipStatus"> | number
    name?: StringFilter<"RelationshipStatus"> | string
  }

  export type RelationshipStatusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RelationshipStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: RelationshipStatusWhereInput | RelationshipStatusWhereInput[]
    OR?: RelationshipStatusWhereInput[]
    NOT?: RelationshipStatusWhereInput | RelationshipStatusWhereInput[]
  }, "id" | "name">

  export type RelationshipStatusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RelationshipStatusCountOrderByAggregateInput
    _avg?: RelationshipStatusAvgOrderByAggregateInput
    _max?: RelationshipStatusMaxOrderByAggregateInput
    _min?: RelationshipStatusMinOrderByAggregateInput
    _sum?: RelationshipStatusSumOrderByAggregateInput
  }

  export type RelationshipStatusScalarWhereWithAggregatesInput = {
    AND?: RelationshipStatusScalarWhereWithAggregatesInput | RelationshipStatusScalarWhereWithAggregatesInput[]
    OR?: RelationshipStatusScalarWhereWithAggregatesInput[]
    NOT?: RelationshipStatusScalarWhereWithAggregatesInput | RelationshipStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RelationshipStatus"> | number
    name?: StringWithAggregatesFilter<"RelationshipStatus"> | string
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    id?: StringFilter<"Conversation"> | string
    participant1Id?: StringFilter<"Conversation"> | string
    participant2Id?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    lastMessageAt?: DateTimeFilter<"Conversation"> | Date | string
    participant1?: XOR<UserRelationFilter, UserWhereInput>
    participant2?: XOR<UserRelationFilter, UserWhereInput>
    messages?: MessageListRelationFilter
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    participant1Id?: SortOrder
    participant2Id?: SortOrder
    createdAt?: SortOrder
    lastMessageAt?: SortOrder
    participant1?: UserOrderByWithRelationInput
    participant2?: UserOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    participant1Id_participant2Id?: ConversationParticipant1IdParticipant2IdCompoundUniqueInput
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    participant1Id?: StringFilter<"Conversation"> | string
    participant2Id?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    lastMessageAt?: DateTimeFilter<"Conversation"> | Date | string
    participant1?: XOR<UserRelationFilter, UserWhereInput>
    participant2?: XOR<UserRelationFilter, UserWhereInput>
    messages?: MessageListRelationFilter
  }, "id" | "participant1Id_participant2Id">

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    participant1Id?: SortOrder
    participant2Id?: SortOrder
    createdAt?: SortOrder
    lastMessageAt?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Conversation"> | string
    participant1Id?: StringWithAggregatesFilter<"Conversation"> | string
    participant2Id?: StringWithAggregatesFilter<"Conversation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    lastMessageAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    isRead?: BoolFilter<"Message"> | boolean
    type?: StringFilter<"Message"> | string
    redPacketAmount?: FloatNullableFilter<"Message"> | number | null
    redPacketMessage?: StringNullableFilter<"Message"> | string | null
    redPacketStatus?: StringNullableFilter<"Message"> | string | null
    redPacketClaimedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    taskPostId?: IntNullableFilter<"Message"> | number | null
    taskFinalAmount?: FloatNullableFilter<"Message"> | number | null
    taskCompletionStatus?: StringNullableFilter<"Message"> | string | null
    isAIResponse?: BoolFilter<"Message"> | boolean
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    redPacketAmount?: SortOrderInput | SortOrder
    redPacketMessage?: SortOrderInput | SortOrder
    redPacketStatus?: SortOrderInput | SortOrder
    redPacketClaimedAt?: SortOrderInput | SortOrder
    taskPostId?: SortOrderInput | SortOrder
    taskFinalAmount?: SortOrderInput | SortOrder
    taskCompletionStatus?: SortOrderInput | SortOrder
    isAIResponse?: SortOrder
    conversation?: ConversationOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    isRead?: BoolFilter<"Message"> | boolean
    type?: StringFilter<"Message"> | string
    redPacketAmount?: FloatNullableFilter<"Message"> | number | null
    redPacketMessage?: StringNullableFilter<"Message"> | string | null
    redPacketStatus?: StringNullableFilter<"Message"> | string | null
    redPacketClaimedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    taskPostId?: IntNullableFilter<"Message"> | number | null
    taskFinalAmount?: FloatNullableFilter<"Message"> | number | null
    taskCompletionStatus?: StringNullableFilter<"Message"> | string | null
    isAIResponse?: BoolFilter<"Message"> | boolean
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    redPacketAmount?: SortOrderInput | SortOrder
    redPacketMessage?: SortOrderInput | SortOrder
    redPacketStatus?: SortOrderInput | SortOrder
    redPacketClaimedAt?: SortOrderInput | SortOrder
    taskPostId?: SortOrderInput | SortOrder
    taskFinalAmount?: SortOrderInput | SortOrder
    taskCompletionStatus?: SortOrderInput | SortOrder
    isAIResponse?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    conversationId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    isRead?: BoolWithAggregatesFilter<"Message"> | boolean
    type?: StringWithAggregatesFilter<"Message"> | string
    redPacketAmount?: FloatNullableWithAggregatesFilter<"Message"> | number | null
    redPacketMessage?: StringNullableWithAggregatesFilter<"Message"> | string | null
    redPacketStatus?: StringNullableWithAggregatesFilter<"Message"> | string | null
    redPacketClaimedAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    taskPostId?: IntNullableWithAggregatesFilter<"Message"> | number | null
    taskFinalAmount?: FloatNullableWithAggregatesFilter<"Message"> | number | null
    taskCompletionStatus?: StringNullableWithAggregatesFilter<"Message"> | string | null
    isAIResponse?: BoolWithAggregatesFilter<"Message"> | boolean
  }

  export type WalletTransactionWhereInput = {
    AND?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    OR?: WalletTransactionWhereInput[]
    NOT?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    id?: StringFilter<"WalletTransaction"> | string
    type?: StringFilter<"WalletTransaction"> | string
    amount?: FloatFilter<"WalletTransaction"> | number
    status?: StringFilter<"WalletTransaction"> | string
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    fromUserId?: StringNullableFilter<"WalletTransaction"> | string | null
    toUserId?: StringNullableFilter<"WalletTransaction"> | string | null
    txHash?: StringNullableFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableFilter<"WalletTransaction"> | Date | string | null
    fromUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    toUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type WalletTransactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    fromUserId?: SortOrderInput | SortOrder
    toUserId?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    fromUser?: UserOrderByWithRelationInput
    toUser?: UserOrderByWithRelationInput
  }

  export type WalletTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    txHash?: string
    AND?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    OR?: WalletTransactionWhereInput[]
    NOT?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    type?: StringFilter<"WalletTransaction"> | string
    amount?: FloatFilter<"WalletTransaction"> | number
    status?: StringFilter<"WalletTransaction"> | string
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    fromUserId?: StringNullableFilter<"WalletTransaction"> | string | null
    toUserId?: StringNullableFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableFilter<"WalletTransaction"> | Date | string | null
    fromUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    toUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "txHash">

  export type WalletTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    fromUserId?: SortOrderInput | SortOrder
    toUserId?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: WalletTransactionCountOrderByAggregateInput
    _avg?: WalletTransactionAvgOrderByAggregateInput
    _max?: WalletTransactionMaxOrderByAggregateInput
    _min?: WalletTransactionMinOrderByAggregateInput
    _sum?: WalletTransactionSumOrderByAggregateInput
  }

  export type WalletTransactionScalarWhereWithAggregatesInput = {
    AND?: WalletTransactionScalarWhereWithAggregatesInput | WalletTransactionScalarWhereWithAggregatesInput[]
    OR?: WalletTransactionScalarWhereWithAggregatesInput[]
    NOT?: WalletTransactionScalarWhereWithAggregatesInput | WalletTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WalletTransaction"> | string
    type?: StringWithAggregatesFilter<"WalletTransaction"> | string
    amount?: FloatWithAggregatesFilter<"WalletTransaction"> | number
    status?: StringWithAggregatesFilter<"WalletTransaction"> | string
    description?: StringNullableWithAggregatesFilter<"WalletTransaction"> | string | null
    fromUserId?: StringNullableWithAggregatesFilter<"WalletTransaction"> | string | null
    toUserId?: StringNullableWithAggregatesFilter<"WalletTransaction"> | string | null
    txHash?: StringNullableWithAggregatesFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"WalletTransaction"> | Date | string | null
  }

  export type AIProfileWhereInput = {
    AND?: AIProfileWhereInput | AIProfileWhereInput[]
    OR?: AIProfileWhereInput[]
    NOT?: AIProfileWhereInput | AIProfileWhereInput[]
    id?: StringFilter<"AIProfile"> | string
    userId?: StringFilter<"AIProfile"> | string
    llmProvider?: StringFilter<"AIProfile"> | string
    llmModel?: StringFilter<"AIProfile"> | string
    temperature?: FloatFilter<"AIProfile"> | number
    maxTokens?: IntFilter<"AIProfile"> | number
    topP?: FloatFilter<"AIProfile"> | number
    systemPrompt?: StringNullableFilter<"AIProfile"> | string | null
    roleTemplate?: StringFilter<"AIProfile"> | string
    contextPrompts?: StringNullableFilter<"AIProfile"> | string | null
    activeVoiceId?: StringNullableFilter<"AIProfile"> | string | null
    createdAt?: DateTimeFilter<"AIProfile"> | Date | string
    updatedAt?: DateTimeFilter<"AIProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    voiceTrainings?: VoiceTrainingListRelationFilter
  }

  export type AIProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    llmProvider?: SortOrder
    llmModel?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
    systemPrompt?: SortOrderInput | SortOrder
    roleTemplate?: SortOrder
    contextPrompts?: SortOrderInput | SortOrder
    activeVoiceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    voiceTrainings?: VoiceTrainingOrderByRelationAggregateInput
  }

  export type AIProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AIProfileWhereInput | AIProfileWhereInput[]
    OR?: AIProfileWhereInput[]
    NOT?: AIProfileWhereInput | AIProfileWhereInput[]
    llmProvider?: StringFilter<"AIProfile"> | string
    llmModel?: StringFilter<"AIProfile"> | string
    temperature?: FloatFilter<"AIProfile"> | number
    maxTokens?: IntFilter<"AIProfile"> | number
    topP?: FloatFilter<"AIProfile"> | number
    systemPrompt?: StringNullableFilter<"AIProfile"> | string | null
    roleTemplate?: StringFilter<"AIProfile"> | string
    contextPrompts?: StringNullableFilter<"AIProfile"> | string | null
    activeVoiceId?: StringNullableFilter<"AIProfile"> | string | null
    createdAt?: DateTimeFilter<"AIProfile"> | Date | string
    updatedAt?: DateTimeFilter<"AIProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    voiceTrainings?: VoiceTrainingListRelationFilter
  }, "id" | "userId">

  export type AIProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    llmProvider?: SortOrder
    llmModel?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
    systemPrompt?: SortOrderInput | SortOrder
    roleTemplate?: SortOrder
    contextPrompts?: SortOrderInput | SortOrder
    activeVoiceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AIProfileCountOrderByAggregateInput
    _avg?: AIProfileAvgOrderByAggregateInput
    _max?: AIProfileMaxOrderByAggregateInput
    _min?: AIProfileMinOrderByAggregateInput
    _sum?: AIProfileSumOrderByAggregateInput
  }

  export type AIProfileScalarWhereWithAggregatesInput = {
    AND?: AIProfileScalarWhereWithAggregatesInput | AIProfileScalarWhereWithAggregatesInput[]
    OR?: AIProfileScalarWhereWithAggregatesInput[]
    NOT?: AIProfileScalarWhereWithAggregatesInput | AIProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIProfile"> | string
    userId?: StringWithAggregatesFilter<"AIProfile"> | string
    llmProvider?: StringWithAggregatesFilter<"AIProfile"> | string
    llmModel?: StringWithAggregatesFilter<"AIProfile"> | string
    temperature?: FloatWithAggregatesFilter<"AIProfile"> | number
    maxTokens?: IntWithAggregatesFilter<"AIProfile"> | number
    topP?: FloatWithAggregatesFilter<"AIProfile"> | number
    systemPrompt?: StringNullableWithAggregatesFilter<"AIProfile"> | string | null
    roleTemplate?: StringWithAggregatesFilter<"AIProfile"> | string
    contextPrompts?: StringNullableWithAggregatesFilter<"AIProfile"> | string | null
    activeVoiceId?: StringNullableWithAggregatesFilter<"AIProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AIProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AIProfile"> | Date | string
  }

  export type AIMemoryWhereInput = {
    AND?: AIMemoryWhereInput | AIMemoryWhereInput[]
    OR?: AIMemoryWhereInput[]
    NOT?: AIMemoryWhereInput | AIMemoryWhereInput[]
    id?: StringFilter<"AIMemory"> | string
    userId?: StringFilter<"AIMemory"> | string
    type?: StringFilter<"AIMemory"> | string
    category?: StringFilter<"AIMemory"> | string
    title?: StringFilter<"AIMemory"> | string
    content?: StringFilter<"AIMemory"> | string
    tags?: StringFilter<"AIMemory"> | string
    score?: FloatFilter<"AIMemory"> | number
    metadata?: StringNullableFilter<"AIMemory"> | string | null
    expiresAt?: DateTimeNullableFilter<"AIMemory"> | Date | string | null
    createdAt?: DateTimeFilter<"AIMemory"> | Date | string
    updatedAt?: DateTimeFilter<"AIMemory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AIMemoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    score?: SortOrder
    metadata?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AIMemoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AIMemoryWhereInput | AIMemoryWhereInput[]
    OR?: AIMemoryWhereInput[]
    NOT?: AIMemoryWhereInput | AIMemoryWhereInput[]
    userId?: StringFilter<"AIMemory"> | string
    type?: StringFilter<"AIMemory"> | string
    category?: StringFilter<"AIMemory"> | string
    title?: StringFilter<"AIMemory"> | string
    content?: StringFilter<"AIMemory"> | string
    tags?: StringFilter<"AIMemory"> | string
    score?: FloatFilter<"AIMemory"> | number
    metadata?: StringNullableFilter<"AIMemory"> | string | null
    expiresAt?: DateTimeNullableFilter<"AIMemory"> | Date | string | null
    createdAt?: DateTimeFilter<"AIMemory"> | Date | string
    updatedAt?: DateTimeFilter<"AIMemory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AIMemoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    score?: SortOrder
    metadata?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AIMemoryCountOrderByAggregateInput
    _avg?: AIMemoryAvgOrderByAggregateInput
    _max?: AIMemoryMaxOrderByAggregateInput
    _min?: AIMemoryMinOrderByAggregateInput
    _sum?: AIMemorySumOrderByAggregateInput
  }

  export type AIMemoryScalarWhereWithAggregatesInput = {
    AND?: AIMemoryScalarWhereWithAggregatesInput | AIMemoryScalarWhereWithAggregatesInput[]
    OR?: AIMemoryScalarWhereWithAggregatesInput[]
    NOT?: AIMemoryScalarWhereWithAggregatesInput | AIMemoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIMemory"> | string
    userId?: StringWithAggregatesFilter<"AIMemory"> | string
    type?: StringWithAggregatesFilter<"AIMemory"> | string
    category?: StringWithAggregatesFilter<"AIMemory"> | string
    title?: StringWithAggregatesFilter<"AIMemory"> | string
    content?: StringWithAggregatesFilter<"AIMemory"> | string
    tags?: StringWithAggregatesFilter<"AIMemory"> | string
    score?: FloatWithAggregatesFilter<"AIMemory"> | number
    metadata?: StringNullableWithAggregatesFilter<"AIMemory"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"AIMemory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AIMemory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AIMemory"> | Date | string
  }

  export type VoiceTrainingWhereInput = {
    AND?: VoiceTrainingWhereInput | VoiceTrainingWhereInput[]
    OR?: VoiceTrainingWhereInput[]
    NOT?: VoiceTrainingWhereInput | VoiceTrainingWhereInput[]
    id?: StringFilter<"VoiceTraining"> | string
    userId?: StringFilter<"VoiceTraining"> | string
    profileId?: StringFilter<"VoiceTraining"> | string
    name?: StringFilter<"VoiceTraining"> | string
    version?: StringFilter<"VoiceTraining"> | string
    status?: StringFilter<"VoiceTraining"> | string
    progress?: IntFilter<"VoiceTraining"> | number
    sampleKeys?: StringFilter<"VoiceTraining"> | string
    modelKey?: StringNullableFilter<"VoiceTraining"> | string | null
    sampleCount?: IntFilter<"VoiceTraining"> | number
    duration?: IntFilter<"VoiceTraining"> | number
    accuracy?: FloatNullableFilter<"VoiceTraining"> | number | null
    trainingStartedAt?: DateTimeNullableFilter<"VoiceTraining"> | Date | string | null
    trainingCompletedAt?: DateTimeNullableFilter<"VoiceTraining"> | Date | string | null
    createdAt?: DateTimeFilter<"VoiceTraining"> | Date | string
    updatedAt?: DateTimeFilter<"VoiceTraining"> | Date | string
    profile?: XOR<AIProfileRelationFilter, AIProfileWhereInput>
  }

  export type VoiceTrainingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    version?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    sampleKeys?: SortOrder
    modelKey?: SortOrderInput | SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    trainingStartedAt?: SortOrderInput | SortOrder
    trainingCompletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: AIProfileOrderByWithRelationInput
  }

  export type VoiceTrainingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VoiceTrainingWhereInput | VoiceTrainingWhereInput[]
    OR?: VoiceTrainingWhereInput[]
    NOT?: VoiceTrainingWhereInput | VoiceTrainingWhereInput[]
    userId?: StringFilter<"VoiceTraining"> | string
    profileId?: StringFilter<"VoiceTraining"> | string
    name?: StringFilter<"VoiceTraining"> | string
    version?: StringFilter<"VoiceTraining"> | string
    status?: StringFilter<"VoiceTraining"> | string
    progress?: IntFilter<"VoiceTraining"> | number
    sampleKeys?: StringFilter<"VoiceTraining"> | string
    modelKey?: StringNullableFilter<"VoiceTraining"> | string | null
    sampleCount?: IntFilter<"VoiceTraining"> | number
    duration?: IntFilter<"VoiceTraining"> | number
    accuracy?: FloatNullableFilter<"VoiceTraining"> | number | null
    trainingStartedAt?: DateTimeNullableFilter<"VoiceTraining"> | Date | string | null
    trainingCompletedAt?: DateTimeNullableFilter<"VoiceTraining"> | Date | string | null
    createdAt?: DateTimeFilter<"VoiceTraining"> | Date | string
    updatedAt?: DateTimeFilter<"VoiceTraining"> | Date | string
    profile?: XOR<AIProfileRelationFilter, AIProfileWhereInput>
  }, "id">

  export type VoiceTrainingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    version?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    sampleKeys?: SortOrder
    modelKey?: SortOrderInput | SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    trainingStartedAt?: SortOrderInput | SortOrder
    trainingCompletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VoiceTrainingCountOrderByAggregateInput
    _avg?: VoiceTrainingAvgOrderByAggregateInput
    _max?: VoiceTrainingMaxOrderByAggregateInput
    _min?: VoiceTrainingMinOrderByAggregateInput
    _sum?: VoiceTrainingSumOrderByAggregateInput
  }

  export type VoiceTrainingScalarWhereWithAggregatesInput = {
    AND?: VoiceTrainingScalarWhereWithAggregatesInput | VoiceTrainingScalarWhereWithAggregatesInput[]
    OR?: VoiceTrainingScalarWhereWithAggregatesInput[]
    NOT?: VoiceTrainingScalarWhereWithAggregatesInput | VoiceTrainingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VoiceTraining"> | string
    userId?: StringWithAggregatesFilter<"VoiceTraining"> | string
    profileId?: StringWithAggregatesFilter<"VoiceTraining"> | string
    name?: StringWithAggregatesFilter<"VoiceTraining"> | string
    version?: StringWithAggregatesFilter<"VoiceTraining"> | string
    status?: StringWithAggregatesFilter<"VoiceTraining"> | string
    progress?: IntWithAggregatesFilter<"VoiceTraining"> | number
    sampleKeys?: StringWithAggregatesFilter<"VoiceTraining"> | string
    modelKey?: StringNullableWithAggregatesFilter<"VoiceTraining"> | string | null
    sampleCount?: IntWithAggregatesFilter<"VoiceTraining"> | number
    duration?: IntWithAggregatesFilter<"VoiceTraining"> | number
    accuracy?: FloatNullableWithAggregatesFilter<"VoiceTraining"> | number | null
    trainingStartedAt?: DateTimeNullableWithAggregatesFilter<"VoiceTraining"> | Date | string | null
    trainingCompletedAt?: DateTimeNullableWithAggregatesFilter<"VoiceTraining"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VoiceTraining"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VoiceTraining"> | Date | string
  }

  export type FacegateDeviceWhereInput = {
    AND?: FacegateDeviceWhereInput | FacegateDeviceWhereInput[]
    OR?: FacegateDeviceWhereInput[]
    NOT?: FacegateDeviceWhereInput | FacegateDeviceWhereInput[]
    id?: StringFilter<"FacegateDevice"> | string
    deviceId?: StringFilter<"FacegateDevice"> | string
    prodType?: StringNullableFilter<"FacegateDevice"> | string | null
    prodName?: StringNullableFilter<"FacegateDevice"> | string | null
    relaySlots?: IntFilter<"FacegateDevice"> | number
    lastSeenTs?: BigIntNullableFilter<"FacegateDevice"> | bigint | number | null
    fwVersion?: StringNullableFilter<"FacegateDevice"> | string | null
    status?: IntFilter<"FacegateDevice"> | number
    online?: BoolFilter<"FacegateDevice"> | boolean
    tz?: StringNullableFilter<"FacegateDevice"> | string | null
    createdAt?: DateTimeFilter<"FacegateDevice"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateDevice"> | Date | string
    records?: FacegateRecordListRelationFilter
    scheduleTargets?: FacegateScheduleTargetListRelationFilter
    jobs?: FacegateJobListRelationFilter
  }

  export type FacegateDeviceOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    prodType?: SortOrderInput | SortOrder
    prodName?: SortOrderInput | SortOrder
    relaySlots?: SortOrder
    lastSeenTs?: SortOrderInput | SortOrder
    fwVersion?: SortOrderInput | SortOrder
    status?: SortOrder
    online?: SortOrder
    tz?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    records?: FacegateRecordOrderByRelationAggregateInput
    scheduleTargets?: FacegateScheduleTargetOrderByRelationAggregateInput
    jobs?: FacegateJobOrderByRelationAggregateInput
  }

  export type FacegateDeviceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    deviceId?: string
    AND?: FacegateDeviceWhereInput | FacegateDeviceWhereInput[]
    OR?: FacegateDeviceWhereInput[]
    NOT?: FacegateDeviceWhereInput | FacegateDeviceWhereInput[]
    prodType?: StringNullableFilter<"FacegateDevice"> | string | null
    prodName?: StringNullableFilter<"FacegateDevice"> | string | null
    relaySlots?: IntFilter<"FacegateDevice"> | number
    lastSeenTs?: BigIntNullableFilter<"FacegateDevice"> | bigint | number | null
    fwVersion?: StringNullableFilter<"FacegateDevice"> | string | null
    status?: IntFilter<"FacegateDevice"> | number
    online?: BoolFilter<"FacegateDevice"> | boolean
    tz?: StringNullableFilter<"FacegateDevice"> | string | null
    createdAt?: DateTimeFilter<"FacegateDevice"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateDevice"> | Date | string
    records?: FacegateRecordListRelationFilter
    scheduleTargets?: FacegateScheduleTargetListRelationFilter
    jobs?: FacegateJobListRelationFilter
  }, "id" | "deviceId">

  export type FacegateDeviceOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    prodType?: SortOrderInput | SortOrder
    prodName?: SortOrderInput | SortOrder
    relaySlots?: SortOrder
    lastSeenTs?: SortOrderInput | SortOrder
    fwVersion?: SortOrderInput | SortOrder
    status?: SortOrder
    online?: SortOrder
    tz?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacegateDeviceCountOrderByAggregateInput
    _avg?: FacegateDeviceAvgOrderByAggregateInput
    _max?: FacegateDeviceMaxOrderByAggregateInput
    _min?: FacegateDeviceMinOrderByAggregateInput
    _sum?: FacegateDeviceSumOrderByAggregateInput
  }

  export type FacegateDeviceScalarWhereWithAggregatesInput = {
    AND?: FacegateDeviceScalarWhereWithAggregatesInput | FacegateDeviceScalarWhereWithAggregatesInput[]
    OR?: FacegateDeviceScalarWhereWithAggregatesInput[]
    NOT?: FacegateDeviceScalarWhereWithAggregatesInput | FacegateDeviceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegateDevice"> | string
    deviceId?: StringWithAggregatesFilter<"FacegateDevice"> | string
    prodType?: StringNullableWithAggregatesFilter<"FacegateDevice"> | string | null
    prodName?: StringNullableWithAggregatesFilter<"FacegateDevice"> | string | null
    relaySlots?: IntWithAggregatesFilter<"FacegateDevice"> | number
    lastSeenTs?: BigIntNullableWithAggregatesFilter<"FacegateDevice"> | bigint | number | null
    fwVersion?: StringNullableWithAggregatesFilter<"FacegateDevice"> | string | null
    status?: IntWithAggregatesFilter<"FacegateDevice"> | number
    online?: BoolWithAggregatesFilter<"FacegateDevice"> | boolean
    tz?: StringNullableWithAggregatesFilter<"FacegateDevice"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FacegateDevice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FacegateDevice"> | Date | string
  }

  export type FacegatePersonWhereInput = {
    AND?: FacegatePersonWhereInput | FacegatePersonWhereInput[]
    OR?: FacegatePersonWhereInput[]
    NOT?: FacegatePersonWhereInput | FacegatePersonWhereInput[]
    id?: StringFilter<"FacegatePerson"> | string
    userId?: StringNullableFilter<"FacegatePerson"> | string | null
    phone?: StringFilter<"FacegatePerson"> | string
    personName?: StringFilter<"FacegatePerson"> | string
    localImagePath?: StringNullableFilter<"FacegatePerson"> | string | null
    imageChecksum?: StringNullableFilter<"FacegatePerson"> | string | null
    icCardId?: StringNullableFilter<"FacegatePerson"> | string | null
    idCardNo?: StringNullableFilter<"FacegatePerson"> | string | null
    memberLevel?: StringNullableFilter<"FacegatePerson"> | string | null
    memberExpiry?: DateTimeNullableFilter<"FacegatePerson"> | Date | string | null
    isApeLord?: BoolFilter<"FacegatePerson"> | boolean
    passPlans?: StringNullableFilter<"FacegatePerson"> | string | null
    syncStatus?: IntFilter<"FacegatePerson"> | number
    extInfo?: StringNullableFilter<"FacegatePerson"> | string | null
    createdAt?: DateTimeFilter<"FacegatePerson"> | Date | string
    updatedAt?: DateTimeFilter<"FacegatePerson"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    records?: FacegateRecordListRelationFilter
  }

  export type FacegatePersonOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    phone?: SortOrder
    personName?: SortOrder
    localImagePath?: SortOrderInput | SortOrder
    imageChecksum?: SortOrderInput | SortOrder
    icCardId?: SortOrderInput | SortOrder
    idCardNo?: SortOrderInput | SortOrder
    memberLevel?: SortOrderInput | SortOrder
    memberExpiry?: SortOrderInput | SortOrder
    isApeLord?: SortOrder
    passPlans?: SortOrderInput | SortOrder
    syncStatus?: SortOrder
    extInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    records?: FacegateRecordOrderByRelationAggregateInput
  }

  export type FacegatePersonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    phone?: string
    AND?: FacegatePersonWhereInput | FacegatePersonWhereInput[]
    OR?: FacegatePersonWhereInput[]
    NOT?: FacegatePersonWhereInput | FacegatePersonWhereInput[]
    personName?: StringFilter<"FacegatePerson"> | string
    localImagePath?: StringNullableFilter<"FacegatePerson"> | string | null
    imageChecksum?: StringNullableFilter<"FacegatePerson"> | string | null
    icCardId?: StringNullableFilter<"FacegatePerson"> | string | null
    idCardNo?: StringNullableFilter<"FacegatePerson"> | string | null
    memberLevel?: StringNullableFilter<"FacegatePerson"> | string | null
    memberExpiry?: DateTimeNullableFilter<"FacegatePerson"> | Date | string | null
    isApeLord?: BoolFilter<"FacegatePerson"> | boolean
    passPlans?: StringNullableFilter<"FacegatePerson"> | string | null
    syncStatus?: IntFilter<"FacegatePerson"> | number
    extInfo?: StringNullableFilter<"FacegatePerson"> | string | null
    createdAt?: DateTimeFilter<"FacegatePerson"> | Date | string
    updatedAt?: DateTimeFilter<"FacegatePerson"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    records?: FacegateRecordListRelationFilter
  }, "id" | "userId" | "phone">

  export type FacegatePersonOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    phone?: SortOrder
    personName?: SortOrder
    localImagePath?: SortOrderInput | SortOrder
    imageChecksum?: SortOrderInput | SortOrder
    icCardId?: SortOrderInput | SortOrder
    idCardNo?: SortOrderInput | SortOrder
    memberLevel?: SortOrderInput | SortOrder
    memberExpiry?: SortOrderInput | SortOrder
    isApeLord?: SortOrder
    passPlans?: SortOrderInput | SortOrder
    syncStatus?: SortOrder
    extInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacegatePersonCountOrderByAggregateInput
    _avg?: FacegatePersonAvgOrderByAggregateInput
    _max?: FacegatePersonMaxOrderByAggregateInput
    _min?: FacegatePersonMinOrderByAggregateInput
    _sum?: FacegatePersonSumOrderByAggregateInput
  }

  export type FacegatePersonScalarWhereWithAggregatesInput = {
    AND?: FacegatePersonScalarWhereWithAggregatesInput | FacegatePersonScalarWhereWithAggregatesInput[]
    OR?: FacegatePersonScalarWhereWithAggregatesInput[]
    NOT?: FacegatePersonScalarWhereWithAggregatesInput | FacegatePersonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegatePerson"> | string
    userId?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    phone?: StringWithAggregatesFilter<"FacegatePerson"> | string
    personName?: StringWithAggregatesFilter<"FacegatePerson"> | string
    localImagePath?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    imageChecksum?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    icCardId?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    idCardNo?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    memberLevel?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    memberExpiry?: DateTimeNullableWithAggregatesFilter<"FacegatePerson"> | Date | string | null
    isApeLord?: BoolWithAggregatesFilter<"FacegatePerson"> | boolean
    passPlans?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    syncStatus?: IntWithAggregatesFilter<"FacegatePerson"> | number
    extInfo?: StringNullableWithAggregatesFilter<"FacegatePerson"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FacegatePerson"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FacegatePerson"> | Date | string
  }

  export type FacegateRecordWhereInput = {
    AND?: FacegateRecordWhereInput | FacegateRecordWhereInput[]
    OR?: FacegateRecordWhereInput[]
    NOT?: FacegateRecordWhereInput | FacegateRecordWhereInput[]
    id?: StringFilter<"FacegateRecord"> | string
    deviceId?: StringFilter<"FacegateRecord"> | string
    recordId?: BigIntFilter<"FacegateRecord"> | bigint | number
    personPhone?: StringNullableFilter<"FacegateRecord"> | string | null
    recordTime?: BigIntFilter<"FacegateRecord"> | bigint | number
    recordType?: IntFilter<"FacegateRecord"> | number
    recordPass?: IntFilter<"FacegateRecord"> | number
    similarity?: FloatNullableFilter<"FacegateRecord"> | number | null
    temperature?: FloatNullableFilter<"FacegateRecord"> | number | null
    qrcode?: StringNullableFilter<"FacegateRecord"> | string | null
    healthCodeColor?: StringNullableFilter<"FacegateRecord"> | string | null
    recordPicUrl?: StringNullableFilter<"FacegateRecord"> | string | null
    idCardPicUrl?: StringNullableFilter<"FacegateRecord"> | string | null
    raw?: StringNullableFilter<"FacegateRecord"> | string | null
    createdAt?: DateTimeFilter<"FacegateRecord"> | Date | string
    device?: XOR<FacegateDeviceRelationFilter, FacegateDeviceWhereInput>
    person?: XOR<FacegatePersonNullableRelationFilter, FacegatePersonWhereInput> | null
  }

  export type FacegateRecordOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    recordId?: SortOrder
    personPhone?: SortOrderInput | SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    qrcode?: SortOrderInput | SortOrder
    healthCodeColor?: SortOrderInput | SortOrder
    recordPicUrl?: SortOrderInput | SortOrder
    idCardPicUrl?: SortOrderInput | SortOrder
    raw?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    device?: FacegateDeviceOrderByWithRelationInput
    person?: FacegatePersonOrderByWithRelationInput
  }

  export type FacegateRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    deviceId_recordId?: FacegateRecordDeviceIdRecordIdCompoundUniqueInput
    AND?: FacegateRecordWhereInput | FacegateRecordWhereInput[]
    OR?: FacegateRecordWhereInput[]
    NOT?: FacegateRecordWhereInput | FacegateRecordWhereInput[]
    deviceId?: StringFilter<"FacegateRecord"> | string
    recordId?: BigIntFilter<"FacegateRecord"> | bigint | number
    personPhone?: StringNullableFilter<"FacegateRecord"> | string | null
    recordTime?: BigIntFilter<"FacegateRecord"> | bigint | number
    recordType?: IntFilter<"FacegateRecord"> | number
    recordPass?: IntFilter<"FacegateRecord"> | number
    similarity?: FloatNullableFilter<"FacegateRecord"> | number | null
    temperature?: FloatNullableFilter<"FacegateRecord"> | number | null
    qrcode?: StringNullableFilter<"FacegateRecord"> | string | null
    healthCodeColor?: StringNullableFilter<"FacegateRecord"> | string | null
    recordPicUrl?: StringNullableFilter<"FacegateRecord"> | string | null
    idCardPicUrl?: StringNullableFilter<"FacegateRecord"> | string | null
    raw?: StringNullableFilter<"FacegateRecord"> | string | null
    createdAt?: DateTimeFilter<"FacegateRecord"> | Date | string
    device?: XOR<FacegateDeviceRelationFilter, FacegateDeviceWhereInput>
    person?: XOR<FacegatePersonNullableRelationFilter, FacegatePersonWhereInput> | null
  }, "id" | "deviceId_recordId">

  export type FacegateRecordOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    recordId?: SortOrder
    personPhone?: SortOrderInput | SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    qrcode?: SortOrderInput | SortOrder
    healthCodeColor?: SortOrderInput | SortOrder
    recordPicUrl?: SortOrderInput | SortOrder
    idCardPicUrl?: SortOrderInput | SortOrder
    raw?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FacegateRecordCountOrderByAggregateInput
    _avg?: FacegateRecordAvgOrderByAggregateInput
    _max?: FacegateRecordMaxOrderByAggregateInput
    _min?: FacegateRecordMinOrderByAggregateInput
    _sum?: FacegateRecordSumOrderByAggregateInput
  }

  export type FacegateRecordScalarWhereWithAggregatesInput = {
    AND?: FacegateRecordScalarWhereWithAggregatesInput | FacegateRecordScalarWhereWithAggregatesInput[]
    OR?: FacegateRecordScalarWhereWithAggregatesInput[]
    NOT?: FacegateRecordScalarWhereWithAggregatesInput | FacegateRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegateRecord"> | string
    deviceId?: StringWithAggregatesFilter<"FacegateRecord"> | string
    recordId?: BigIntWithAggregatesFilter<"FacegateRecord"> | bigint | number
    personPhone?: StringNullableWithAggregatesFilter<"FacegateRecord"> | string | null
    recordTime?: BigIntWithAggregatesFilter<"FacegateRecord"> | bigint | number
    recordType?: IntWithAggregatesFilter<"FacegateRecord"> | number
    recordPass?: IntWithAggregatesFilter<"FacegateRecord"> | number
    similarity?: FloatNullableWithAggregatesFilter<"FacegateRecord"> | number | null
    temperature?: FloatNullableWithAggregatesFilter<"FacegateRecord"> | number | null
    qrcode?: StringNullableWithAggregatesFilter<"FacegateRecord"> | string | null
    healthCodeColor?: StringNullableWithAggregatesFilter<"FacegateRecord"> | string | null
    recordPicUrl?: StringNullableWithAggregatesFilter<"FacegateRecord"> | string | null
    idCardPicUrl?: StringNullableWithAggregatesFilter<"FacegateRecord"> | string | null
    raw?: StringNullableWithAggregatesFilter<"FacegateRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FacegateRecord"> | Date | string
  }

  export type FacegateScheduleWhereInput = {
    AND?: FacegateScheduleWhereInput | FacegateScheduleWhereInput[]
    OR?: FacegateScheduleWhereInput[]
    NOT?: FacegateScheduleWhereInput | FacegateScheduleWhereInput[]
    id?: StringFilter<"FacegateSchedule"> | string
    userPhone?: StringFilter<"FacegateSchedule"> | string
    imageId?: StringNullableFilter<"FacegateSchedule"> | string | null
    payloadType?: StringFilter<"FacegateSchedule"> | string
    startAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    endAt?: DateTimeNullableFilter<"FacegateSchedule"> | Date | string | null
    cron?: StringNullableFilter<"FacegateSchedule"> | string | null
    status?: IntFilter<"FacegateSchedule"> | number
    createdAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    image?: XOR<FacegateImageNullableRelationFilter, FacegateImageWhereInput> | null
    targets?: FacegateScheduleTargetListRelationFilter
    jobs?: FacegateJobListRelationFilter
  }

  export type FacegateScheduleOrderByWithRelationInput = {
    id?: SortOrder
    userPhone?: SortOrder
    imageId?: SortOrderInput | SortOrder
    payloadType?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrderInput | SortOrder
    cron?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: FacegateImageOrderByWithRelationInput
    targets?: FacegateScheduleTargetOrderByRelationAggregateInput
    jobs?: FacegateJobOrderByRelationAggregateInput
  }

  export type FacegateScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FacegateScheduleWhereInput | FacegateScheduleWhereInput[]
    OR?: FacegateScheduleWhereInput[]
    NOT?: FacegateScheduleWhereInput | FacegateScheduleWhereInput[]
    userPhone?: StringFilter<"FacegateSchedule"> | string
    imageId?: StringNullableFilter<"FacegateSchedule"> | string | null
    payloadType?: StringFilter<"FacegateSchedule"> | string
    startAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    endAt?: DateTimeNullableFilter<"FacegateSchedule"> | Date | string | null
    cron?: StringNullableFilter<"FacegateSchedule"> | string | null
    status?: IntFilter<"FacegateSchedule"> | number
    createdAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    image?: XOR<FacegateImageNullableRelationFilter, FacegateImageWhereInput> | null
    targets?: FacegateScheduleTargetListRelationFilter
    jobs?: FacegateJobListRelationFilter
  }, "id">

  export type FacegateScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    userPhone?: SortOrder
    imageId?: SortOrderInput | SortOrder
    payloadType?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrderInput | SortOrder
    cron?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacegateScheduleCountOrderByAggregateInput
    _avg?: FacegateScheduleAvgOrderByAggregateInput
    _max?: FacegateScheduleMaxOrderByAggregateInput
    _min?: FacegateScheduleMinOrderByAggregateInput
    _sum?: FacegateScheduleSumOrderByAggregateInput
  }

  export type FacegateScheduleScalarWhereWithAggregatesInput = {
    AND?: FacegateScheduleScalarWhereWithAggregatesInput | FacegateScheduleScalarWhereWithAggregatesInput[]
    OR?: FacegateScheduleScalarWhereWithAggregatesInput[]
    NOT?: FacegateScheduleScalarWhereWithAggregatesInput | FacegateScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegateSchedule"> | string
    userPhone?: StringWithAggregatesFilter<"FacegateSchedule"> | string
    imageId?: StringNullableWithAggregatesFilter<"FacegateSchedule"> | string | null
    payloadType?: StringWithAggregatesFilter<"FacegateSchedule"> | string
    startAt?: DateTimeWithAggregatesFilter<"FacegateSchedule"> | Date | string
    endAt?: DateTimeNullableWithAggregatesFilter<"FacegateSchedule"> | Date | string | null
    cron?: StringNullableWithAggregatesFilter<"FacegateSchedule"> | string | null
    status?: IntWithAggregatesFilter<"FacegateSchedule"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FacegateSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FacegateSchedule"> | Date | string
  }

  export type FacegateImageWhereInput = {
    AND?: FacegateImageWhereInput | FacegateImageWhereInput[]
    OR?: FacegateImageWhereInput[]
    NOT?: FacegateImageWhereInput | FacegateImageWhereInput[]
    id?: StringFilter<"FacegateImage"> | string
    userPhone?: StringFilter<"FacegateImage"> | string
    localPath?: StringFilter<"FacegateImage"> | string
    fileName?: StringFilter<"FacegateImage"> | string
    url?: StringNullableFilter<"FacegateImage"> | string | null
    createdAt?: DateTimeFilter<"FacegateImage"> | Date | string
    schedules?: FacegateScheduleListRelationFilter
  }

  export type FacegateImageOrderByWithRelationInput = {
    id?: SortOrder
    userPhone?: SortOrder
    localPath?: SortOrder
    fileName?: SortOrder
    url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schedules?: FacegateScheduleOrderByRelationAggregateInput
  }

  export type FacegateImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FacegateImageWhereInput | FacegateImageWhereInput[]
    OR?: FacegateImageWhereInput[]
    NOT?: FacegateImageWhereInput | FacegateImageWhereInput[]
    userPhone?: StringFilter<"FacegateImage"> | string
    localPath?: StringFilter<"FacegateImage"> | string
    fileName?: StringFilter<"FacegateImage"> | string
    url?: StringNullableFilter<"FacegateImage"> | string | null
    createdAt?: DateTimeFilter<"FacegateImage"> | Date | string
    schedules?: FacegateScheduleListRelationFilter
  }, "id">

  export type FacegateImageOrderByWithAggregationInput = {
    id?: SortOrder
    userPhone?: SortOrder
    localPath?: SortOrder
    fileName?: SortOrder
    url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FacegateImageCountOrderByAggregateInput
    _max?: FacegateImageMaxOrderByAggregateInput
    _min?: FacegateImageMinOrderByAggregateInput
  }

  export type FacegateImageScalarWhereWithAggregatesInput = {
    AND?: FacegateImageScalarWhereWithAggregatesInput | FacegateImageScalarWhereWithAggregatesInput[]
    OR?: FacegateImageScalarWhereWithAggregatesInput[]
    NOT?: FacegateImageScalarWhereWithAggregatesInput | FacegateImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegateImage"> | string
    userPhone?: StringWithAggregatesFilter<"FacegateImage"> | string
    localPath?: StringWithAggregatesFilter<"FacegateImage"> | string
    fileName?: StringWithAggregatesFilter<"FacegateImage"> | string
    url?: StringNullableWithAggregatesFilter<"FacegateImage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FacegateImage"> | Date | string
  }

  export type FacegateScheduleTargetWhereInput = {
    AND?: FacegateScheduleTargetWhereInput | FacegateScheduleTargetWhereInput[]
    OR?: FacegateScheduleTargetWhereInput[]
    NOT?: FacegateScheduleTargetWhereInput | FacegateScheduleTargetWhereInput[]
    id?: StringFilter<"FacegateScheduleTarget"> | string
    scheduleId?: StringFilter<"FacegateScheduleTarget"> | string
    deviceId?: StringFilter<"FacegateScheduleTarget"> | string
    schedule?: XOR<FacegateScheduleRelationFilter, FacegateScheduleWhereInput>
    device?: XOR<FacegateDeviceRelationFilter, FacegateDeviceWhereInput>
  }

  export type FacegateScheduleTargetOrderByWithRelationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    schedule?: FacegateScheduleOrderByWithRelationInput
    device?: FacegateDeviceOrderByWithRelationInput
  }

  export type FacegateScheduleTargetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scheduleId_deviceId?: FacegateScheduleTargetScheduleIdDeviceIdCompoundUniqueInput
    AND?: FacegateScheduleTargetWhereInput | FacegateScheduleTargetWhereInput[]
    OR?: FacegateScheduleTargetWhereInput[]
    NOT?: FacegateScheduleTargetWhereInput | FacegateScheduleTargetWhereInput[]
    scheduleId?: StringFilter<"FacegateScheduleTarget"> | string
    deviceId?: StringFilter<"FacegateScheduleTarget"> | string
    schedule?: XOR<FacegateScheduleRelationFilter, FacegateScheduleWhereInput>
    device?: XOR<FacegateDeviceRelationFilter, FacegateDeviceWhereInput>
  }, "id" | "scheduleId_deviceId">

  export type FacegateScheduleTargetOrderByWithAggregationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    _count?: FacegateScheduleTargetCountOrderByAggregateInput
    _max?: FacegateScheduleTargetMaxOrderByAggregateInput
    _min?: FacegateScheduleTargetMinOrderByAggregateInput
  }

  export type FacegateScheduleTargetScalarWhereWithAggregatesInput = {
    AND?: FacegateScheduleTargetScalarWhereWithAggregatesInput | FacegateScheduleTargetScalarWhereWithAggregatesInput[]
    OR?: FacegateScheduleTargetScalarWhereWithAggregatesInput[]
    NOT?: FacegateScheduleTargetScalarWhereWithAggregatesInput | FacegateScheduleTargetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegateScheduleTarget"> | string
    scheduleId?: StringWithAggregatesFilter<"FacegateScheduleTarget"> | string
    deviceId?: StringWithAggregatesFilter<"FacegateScheduleTarget"> | string
  }

  export type FacegateJobWhereInput = {
    AND?: FacegateJobWhereInput | FacegateJobWhereInput[]
    OR?: FacegateJobWhereInput[]
    NOT?: FacegateJobWhereInput | FacegateJobWhereInput[]
    id?: StringFilter<"FacegateJob"> | string
    scheduleId?: StringFilter<"FacegateJob"> | string
    deviceId?: StringFilter<"FacegateJob"> | string
    state?: StringFilter<"FacegateJob"> | string
    retryCount?: IntFilter<"FacegateJob"> | number
    lastError?: StringNullableFilter<"FacegateJob"> | string | null
    createdAt?: DateTimeFilter<"FacegateJob"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateJob"> | Date | string
    schedule?: XOR<FacegateScheduleRelationFilter, FacegateScheduleWhereInput>
    device?: XOR<FacegateDeviceRelationFilter, FacegateDeviceWhereInput>
  }

  export type FacegateJobOrderByWithRelationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    state?: SortOrder
    retryCount?: SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    schedule?: FacegateScheduleOrderByWithRelationInput
    device?: FacegateDeviceOrderByWithRelationInput
  }

  export type FacegateJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FacegateJobWhereInput | FacegateJobWhereInput[]
    OR?: FacegateJobWhereInput[]
    NOT?: FacegateJobWhereInput | FacegateJobWhereInput[]
    scheduleId?: StringFilter<"FacegateJob"> | string
    deviceId?: StringFilter<"FacegateJob"> | string
    state?: StringFilter<"FacegateJob"> | string
    retryCount?: IntFilter<"FacegateJob"> | number
    lastError?: StringNullableFilter<"FacegateJob"> | string | null
    createdAt?: DateTimeFilter<"FacegateJob"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateJob"> | Date | string
    schedule?: XOR<FacegateScheduleRelationFilter, FacegateScheduleWhereInput>
    device?: XOR<FacegateDeviceRelationFilter, FacegateDeviceWhereInput>
  }, "id">

  export type FacegateJobOrderByWithAggregationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    state?: SortOrder
    retryCount?: SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacegateJobCountOrderByAggregateInput
    _avg?: FacegateJobAvgOrderByAggregateInput
    _max?: FacegateJobMaxOrderByAggregateInput
    _min?: FacegateJobMinOrderByAggregateInput
    _sum?: FacegateJobSumOrderByAggregateInput
  }

  export type FacegateJobScalarWhereWithAggregatesInput = {
    AND?: FacegateJobScalarWhereWithAggregatesInput | FacegateJobScalarWhereWithAggregatesInput[]
    OR?: FacegateJobScalarWhereWithAggregatesInput[]
    NOT?: FacegateJobScalarWhereWithAggregatesInput | FacegateJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FacegateJob"> | string
    scheduleId?: StringWithAggregatesFilter<"FacegateJob"> | string
    deviceId?: StringWithAggregatesFilter<"FacegateJob"> | string
    state?: StringWithAggregatesFilter<"FacegateJob"> | string
    retryCount?: IntWithAggregatesFilter<"FacegateJob"> | number
    lastError?: StringNullableWithAggregatesFilter<"FacegateJob"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FacegateJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FacegateJob"> | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowCreateInput = {
    follower: UserCreateNestedOneWithoutFollowingInput
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateInput = {
    id?: number
    followerId: string
    followingId: string
  }

  export type FollowUpdateInput = {
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUpdateManyMutationInput = {

  }

  export type FollowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateInput = {
    content?: string | null
    createdAt?: Date | string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostInput
    postLikes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    content?: string | null
    createdAt?: Date | string
    userId: string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutPostInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    postLikes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutPostNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUpdateManyMutationInput = {
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostLikeCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostLikesInput
    post: PostCreateNestedOneWithoutPostLikesInput
  }

  export type PostLikeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    userId: string
    postId: number
  }

  export type PostLikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostLikesNestedInput
    post?: PostUpdateOneRequiredWithoutPostLikesNestedInput
  }

  export type PostLikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostLikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    commentLikes?: CommentLikeCreateNestedManyWithoutCommentInput
    post: PostCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    content: string
    createdAt?: Date | string
    userId: string
    postId: number
    parentId?: number | null
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutCommentNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentLikeCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentLikesInput
    comment: CommentCreateNestedOneWithoutCommentLikesInput
  }

  export type CommentLikeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    userId: string
    commentId: number
  }

  export type CommentLikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentLikesNestedInput
    comment?: CommentUpdateOneRequiredWithoutCommentLikesNestedInput
  }

  export type CommentLikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentLikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentLikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type VisualMediaCreateInput = {
    type?: string
    fileName: string
    uploadedAt?: Date | string
    user: UserCreateNestedOneWithoutVisualMediaInput
    post: PostCreateNestedOneWithoutVisualMediaInput
  }

  export type VisualMediaUncheckedCreateInput = {
    id?: number
    type?: string
    fileName: string
    uploadedAt?: Date | string
    userId: string
    postId: number
  }

  export type VisualMediaUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVisualMediaNestedInput
    post?: PostUpdateOneRequiredWithoutVisualMediaNestedInput
  }

  export type VisualMediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type VisualMediaUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisualMediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityCreateInput = {
    createdAt?: Date | string
    type: string
    sourceId: number
    targetId?: number | null
    isNotificationActive?: boolean
    isNotificationRead?: boolean
    sourceUser: UserCreateNestedOneWithoutActivitiesInput
    targetUser: UserCreateNestedOneWithoutNotificationsInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    type: string
    sourceId: number
    targetId?: number | null
    sourceUserId: string
    targetUserId: string
    isNotificationActive?: boolean
    isNotificationRead?: boolean
  }

  export type ActivityUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
    sourceUser?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    targetUser?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    sourceUserId?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    sourceUserId?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityTypeCreateInput = {
    name: string
  }

  export type ActivityTypeUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type ActivityTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VisualMediaTypeCreateInput = {
    name: string
  }

  export type VisualMediaTypeUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type VisualMediaTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VisualMediaTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VisualMediaTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VisualMediaTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenderCreateInput = {
    name: string
  }

  export type GenderUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type GenderUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenderUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipStatusCreateInput = {
    name: string
  }

  export type RelationshipStatusUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type RelationshipStatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipStatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RelationshipStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationCreateInput = {
    id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    participant1: UserCreateNestedOneWithoutConversationsAsParticipant1Input
    participant2: UserCreateNestedOneWithoutConversationsAsParticipant2Input
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id: string
    participant1Id: string
    participant2Id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participant1?: UserUpdateOneRequiredWithoutConversationsAsParticipant1NestedInput
    participant2?: UserUpdateOneRequiredWithoutConversationsAsParticipant2NestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant1Id?: StringFieldUpdateOperationsInput | string
    participant2Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant1Id?: StringFieldUpdateOperationsInput | string
    participant2Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    type?: string
    redPacketAmount?: number | null
    redPacketMessage?: string | null
    redPacketStatus?: string | null
    redPacketClaimedAt?: Date | string | null
    taskPostId?: number | null
    taskFinalAmount?: number | null
    taskCompletionStatus?: string | null
    isAIResponse?: boolean
    conversation: ConversationCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    content: string
    conversationId: string
    senderId: string
    createdAt?: Date | string
    isRead?: boolean
    type?: string
    redPacketAmount?: number | null
    redPacketMessage?: string | null
    redPacketStatus?: string | null
    redPacketClaimedAt?: Date | string | null
    taskPostId?: number | null
    taskFinalAmount?: number | null
    taskCompletionStatus?: string | null
    isAIResponse?: boolean
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WalletTransactionCreateInput = {
    id?: string
    type: string
    amount: number
    status?: string
    description?: string | null
    txHash?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    fromUser?: UserCreateNestedOneWithoutSentTransactionsInput
    toUser?: UserCreateNestedOneWithoutReceivedTransactionsInput
  }

  export type WalletTransactionUncheckedCreateInput = {
    id?: string
    type: string
    amount: number
    status?: string
    description?: string | null
    fromUserId?: string | null
    toUserId?: string | null
    txHash?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type WalletTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fromUser?: UserUpdateOneWithoutSentTransactionsNestedInput
    toUser?: UserUpdateOneWithoutReceivedTransactionsNestedInput
  }

  export type WalletTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AIProfileCreateInput = {
    id?: string
    llmProvider?: string
    llmModel?: string
    temperature?: number
    maxTokens?: number
    topP?: number
    systemPrompt?: string | null
    roleTemplate?: string
    contextPrompts?: string | null
    activeVoiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAiProfileInput
    voiceTrainings?: VoiceTrainingCreateNestedManyWithoutProfileInput
  }

  export type AIProfileUncheckedCreateInput = {
    id?: string
    userId: string
    llmProvider?: string
    llmModel?: string
    temperature?: number
    maxTokens?: number
    topP?: number
    systemPrompt?: string | null
    roleTemplate?: string
    contextPrompts?: string | null
    activeVoiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    voiceTrainings?: VoiceTrainingUncheckedCreateNestedManyWithoutProfileInput
  }

  export type AIProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAiProfileNestedInput
    voiceTrainings?: VoiceTrainingUpdateManyWithoutProfileNestedInput
  }

  export type AIProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voiceTrainings?: VoiceTrainingUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type AIProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIMemoryCreateInput = {
    id?: string
    type: string
    category: string
    title: string
    content: string
    tags: string
    score?: number
    metadata?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAiMemoriesInput
  }

  export type AIMemoryUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    category: string
    title: string
    content: string
    tags: string
    score?: number
    metadata?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIMemoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAiMemoriesNestedInput
  }

  export type AIMemoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIMemoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIMemoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceTrainingCreateInput = {
    id?: string
    userId: string
    name: string
    version: string
    status?: string
    progress?: number
    sampleKeys: string
    modelKey?: string | null
    sampleCount?: number
    duration?: number
    accuracy?: number | null
    trainingStartedAt?: Date | string | null
    trainingCompletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: AIProfileCreateNestedOneWithoutVoiceTrainingsInput
  }

  export type VoiceTrainingUncheckedCreateInput = {
    id?: string
    userId: string
    profileId: string
    name: string
    version: string
    status?: string
    progress?: number
    sampleKeys: string
    modelKey?: string | null
    sampleCount?: number
    duration?: number
    accuracy?: number | null
    trainingStartedAt?: Date | string | null
    trainingCompletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoiceTrainingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: AIProfileUpdateOneRequiredWithoutVoiceTrainingsNestedInput
  }

  export type VoiceTrainingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceTrainingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceTrainingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateDeviceCreateInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordCreateNestedManyWithoutDeviceInput
    scheduleTargets?: FacegateScheduleTargetCreateNestedManyWithoutDeviceInput
    jobs?: FacegateJobCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceUncheckedCreateInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordUncheckedCreateNestedManyWithoutDeviceInput
    scheduleTargets?: FacegateScheduleTargetUncheckedCreateNestedManyWithoutDeviceInput
    jobs?: FacegateJobUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUpdateManyWithoutDeviceNestedInput
    scheduleTargets?: FacegateScheduleTargetUpdateManyWithoutDeviceNestedInput
    jobs?: FacegateJobUpdateManyWithoutDeviceNestedInput
  }

  export type FacegateDeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUncheckedUpdateManyWithoutDeviceNestedInput
    scheduleTargets?: FacegateScheduleTargetUncheckedUpdateManyWithoutDeviceNestedInput
    jobs?: FacegateJobUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type FacegateDeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateDeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegatePersonCreateInput = {
    id?: string
    phone: string
    personName: string
    localImagePath?: string | null
    imageChecksum?: string | null
    icCardId?: string | null
    idCardNo?: string | null
    memberLevel?: string | null
    memberExpiry?: Date | string | null
    isApeLord?: boolean
    passPlans?: string | null
    syncStatus?: number
    extInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutFacegatePersonInput
    records?: FacegateRecordCreateNestedManyWithoutPersonInput
  }

  export type FacegatePersonUncheckedCreateInput = {
    id?: string
    userId?: string | null
    phone: string
    personName: string
    localImagePath?: string | null
    imageChecksum?: string | null
    icCardId?: string | null
    idCardNo?: string | null
    memberLevel?: string | null
    memberExpiry?: Date | string | null
    isApeLord?: boolean
    passPlans?: string | null
    syncStatus?: number
    extInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordUncheckedCreateNestedManyWithoutPersonInput
  }

  export type FacegatePersonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutFacegatePersonNestedInput
    records?: FacegateRecordUpdateManyWithoutPersonNestedInput
  }

  export type FacegatePersonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type FacegatePersonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegatePersonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordCreateInput = {
    id?: string
    recordId: bigint | number
    recordTime: bigint | number
    recordType: number
    recordPass: number
    similarity?: number | null
    temperature?: number | null
    qrcode?: string | null
    healthCodeColor?: string | null
    recordPicUrl?: string | null
    idCardPicUrl?: string | null
    raw?: string | null
    createdAt?: Date | string
    device: FacegateDeviceCreateNestedOneWithoutRecordsInput
    person?: FacegatePersonCreateNestedOneWithoutRecordsInput
  }

  export type FacegateRecordUncheckedCreateInput = {
    id?: string
    deviceId: string
    recordId: bigint | number
    personPhone?: string | null
    recordTime: bigint | number
    recordType: number
    recordPass: number
    similarity?: number | null
    temperature?: number | null
    qrcode?: string | null
    healthCodeColor?: string | null
    recordPicUrl?: string | null
    idCardPicUrl?: string | null
    raw?: string | null
    createdAt?: Date | string
  }

  export type FacegateRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: FacegateDeviceUpdateOneRequiredWithoutRecordsNestedInput
    person?: FacegatePersonUpdateOneWithoutRecordsNestedInput
  }

  export type FacegateRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    personPhone?: NullableStringFieldUpdateOperationsInput | string | null
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    personPhone?: NullableStringFieldUpdateOperationsInput | string | null
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleCreateInput = {
    id?: string
    userPhone: string
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: FacegateImageCreateNestedOneWithoutSchedulesInput
    targets?: FacegateScheduleTargetCreateNestedManyWithoutScheduleInput
    jobs?: FacegateJobCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleUncheckedCreateInput = {
    id?: string
    userPhone: string
    imageId?: string | null
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targets?: FacegateScheduleTargetUncheckedCreateNestedManyWithoutScheduleInput
    jobs?: FacegateJobUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FacegateImageUpdateOneWithoutSchedulesNestedInput
    targets?: FacegateScheduleTargetUpdateManyWithoutScheduleNestedInput
    jobs?: FacegateJobUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targets?: FacegateScheduleTargetUncheckedUpdateManyWithoutScheduleNestedInput
    jobs?: FacegateJobUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateImageCreateInput = {
    id?: string
    userPhone: string
    localPath: string
    fileName: string
    url?: string | null
    createdAt?: Date | string
    schedules?: FacegateScheduleCreateNestedManyWithoutImageInput
  }

  export type FacegateImageUncheckedCreateInput = {
    id?: string
    userPhone: string
    localPath: string
    fileName: string
    url?: string | null
    createdAt?: Date | string
    schedules?: FacegateScheduleUncheckedCreateNestedManyWithoutImageInput
  }

  export type FacegateImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: FacegateScheduleUpdateManyWithoutImageNestedInput
  }

  export type FacegateImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: FacegateScheduleUncheckedUpdateManyWithoutImageNestedInput
  }

  export type FacegateImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleTargetCreateInput = {
    id?: string
    schedule: FacegateScheduleCreateNestedOneWithoutTargetsInput
    device: FacegateDeviceCreateNestedOneWithoutScheduleTargetsInput
  }

  export type FacegateScheduleTargetUncheckedCreateInput = {
    id?: string
    scheduleId: string
    deviceId: string
  }

  export type FacegateScheduleTargetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: FacegateScheduleUpdateOneRequiredWithoutTargetsNestedInput
    device?: FacegateDeviceUpdateOneRequiredWithoutScheduleTargetsNestedInput
  }

  export type FacegateScheduleTargetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateScheduleTargetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateScheduleTargetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateJobCreateInput = {
    id?: string
    state?: string
    retryCount?: number
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    schedule: FacegateScheduleCreateNestedOneWithoutJobsInput
    device: FacegateDeviceCreateNestedOneWithoutJobsInput
  }

  export type FacegateJobUncheckedCreateInput = {
    id?: string
    scheduleId: string
    deviceId: string
    state?: string
    retryCount?: number
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacegateJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedule?: FacegateScheduleUpdateOneRequiredWithoutJobsNestedInput
    device?: FacegateDeviceUpdateOneRequiredWithoutJobsNestedInput
  }

  export type FacegateJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type VisualMediaListRelationFilter = {
    every?: VisualMediaWhereInput
    some?: VisualMediaWhereInput
    none?: VisualMediaWhereInput
  }

  export type PostLikeListRelationFilter = {
    every?: PostLikeWhereInput
    some?: PostLikeWhereInput
    none?: PostLikeWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CommentLikeListRelationFilter = {
    every?: CommentLikeWhereInput
    some?: CommentLikeWhereInput
    none?: CommentLikeWhereInput
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type WalletTransactionListRelationFilter = {
    every?: WalletTransactionWhereInput
    some?: WalletTransactionWhereInput
    none?: WalletTransactionWhereInput
  }

  export type AIProfileNullableRelationFilter = {
    is?: AIProfileWhereInput | null
    isNot?: AIProfileWhereInput | null
  }

  export type AIMemoryListRelationFilter = {
    every?: AIMemoryWhereInput
    some?: AIMemoryWhereInput
    none?: AIMemoryWhereInput
  }

  export type FacegatePersonNullableRelationFilter = {
    is?: FacegatePersonWhereInput | null
    isNot?: FacegatePersonWhereInput | null
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VisualMediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WalletTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIMemoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    bio?: SortOrder
    website?: SortOrder
    relationshipStatus?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    profilePhoto?: SortOrder
    coverPhoto?: SortOrder
    passwordHash?: SortOrder
    walletAddress?: SortOrder
    apeBalance?: SortOrder
    walletCreatedAt?: SortOrder
    featured?: SortOrder
    ttsModelId?: SortOrder
    ttsVoiceId?: SortOrder
    ttsPlaybackSpeed?: SortOrder
    punked?: SortOrder
    appessoBalance?: SortOrder
    appessoBalanceUpdatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    apeBalance?: SortOrder
    ttsPlaybackSpeed?: SortOrder
    appessoBalance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    bio?: SortOrder
    website?: SortOrder
    relationshipStatus?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    profilePhoto?: SortOrder
    coverPhoto?: SortOrder
    passwordHash?: SortOrder
    walletAddress?: SortOrder
    apeBalance?: SortOrder
    walletCreatedAt?: SortOrder
    featured?: SortOrder
    ttsModelId?: SortOrder
    ttsVoiceId?: SortOrder
    ttsPlaybackSpeed?: SortOrder
    punked?: SortOrder
    appessoBalance?: SortOrder
    appessoBalanceUpdatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    bio?: SortOrder
    website?: SortOrder
    relationshipStatus?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    profilePhoto?: SortOrder
    coverPhoto?: SortOrder
    passwordHash?: SortOrder
    walletAddress?: SortOrder
    apeBalance?: SortOrder
    walletCreatedAt?: SortOrder
    featured?: SortOrder
    ttsModelId?: SortOrder
    ttsVoiceId?: SortOrder
    ttsPlaybackSpeed?: SortOrder
    punked?: SortOrder
    appessoBalance?: SortOrder
    appessoBalanceUpdatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    apeBalance?: SortOrder
    ttsPlaybackSpeed?: SortOrder
    appessoBalance?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    isTask?: SortOrder
    rewardAmount?: SortOrder
    taskStatus?: SortOrder
    completedBy?: SortOrder
    completedAt?: SortOrder
    initialPaymentAmount?: SortOrder
    initialPaymentAt?: SortOrder
    finalPaymentAmount?: SortOrder
    finalPaymentAt?: SortOrder
    completionRequestedAt?: SortOrder
    completionConfirmedAt?: SortOrder
    audioUrl?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    rewardAmount?: SortOrder
    initialPaymentAmount?: SortOrder
    finalPaymentAmount?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    isTask?: SortOrder
    rewardAmount?: SortOrder
    taskStatus?: SortOrder
    completedBy?: SortOrder
    completedAt?: SortOrder
    initialPaymentAmount?: SortOrder
    initialPaymentAt?: SortOrder
    finalPaymentAmount?: SortOrder
    finalPaymentAt?: SortOrder
    completionRequestedAt?: SortOrder
    completionConfirmedAt?: SortOrder
    audioUrl?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    isTask?: SortOrder
    rewardAmount?: SortOrder
    taskStatus?: SortOrder
    completedBy?: SortOrder
    completedAt?: SortOrder
    initialPaymentAmount?: SortOrder
    initialPaymentAt?: SortOrder
    finalPaymentAmount?: SortOrder
    finalPaymentAt?: SortOrder
    completionRequestedAt?: SortOrder
    completionConfirmedAt?: SortOrder
    audioUrl?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    rewardAmount?: SortOrder
    initialPaymentAmount?: SortOrder
    finalPaymentAmount?: SortOrder
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type PostLikeUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: number
  }

  export type PostLikeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostLikeAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
  }

  export type PostLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostLikeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostLikeSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
  }

  export type CommentNullableRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type CommentLikeUserIdCommentIdCompoundUniqueInput = {
    userId: string
    commentId: number
  }

  export type CommentLikeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentLikeAvgOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
  }

  export type CommentLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentLikeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentLikeSumOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
  }

  export type VisualMediaCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type VisualMediaAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
  }

  export type VisualMediaMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type VisualMediaMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type VisualMediaSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    sourceUserId?: SortOrder
    targetUserId?: SortOrder
    isNotificationActive?: SortOrder
    isNotificationRead?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    sourceUserId?: SortOrder
    targetUserId?: SortOrder
    isNotificationActive?: SortOrder
    isNotificationRead?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    sourceUserId?: SortOrder
    targetUserId?: SortOrder
    isNotificationActive?: SortOrder
    isNotificationRead?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
  }

  export type ActivityTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ActivityTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActivityTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ActivityTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ActivityTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VisualMediaTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VisualMediaTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VisualMediaTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VisualMediaTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VisualMediaTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenderAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenderSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RelationshipStatusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RelationshipStatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RelationshipStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RelationshipStatusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RelationshipStatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ConversationParticipant1IdParticipant2IdCompoundUniqueInput = {
    participant1Id: string
    participant2Id: string
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    participant1Id?: SortOrder
    participant2Id?: SortOrder
    createdAt?: SortOrder
    lastMessageAt?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    participant1Id?: SortOrder
    participant2Id?: SortOrder
    createdAt?: SortOrder
    lastMessageAt?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    participant1Id?: SortOrder
    participant2Id?: SortOrder
    createdAt?: SortOrder
    lastMessageAt?: SortOrder
  }

  export type ConversationRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    redPacketAmount?: SortOrder
    redPacketMessage?: SortOrder
    redPacketStatus?: SortOrder
    redPacketClaimedAt?: SortOrder
    taskPostId?: SortOrder
    taskFinalAmount?: SortOrder
    taskCompletionStatus?: SortOrder
    isAIResponse?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    redPacketAmount?: SortOrder
    taskPostId?: SortOrder
    taskFinalAmount?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    redPacketAmount?: SortOrder
    redPacketMessage?: SortOrder
    redPacketStatus?: SortOrder
    redPacketClaimedAt?: SortOrder
    taskPostId?: SortOrder
    taskFinalAmount?: SortOrder
    taskCompletionStatus?: SortOrder
    isAIResponse?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    redPacketAmount?: SortOrder
    redPacketMessage?: SortOrder
    redPacketStatus?: SortOrder
    redPacketClaimedAt?: SortOrder
    taskPostId?: SortOrder
    taskFinalAmount?: SortOrder
    taskCompletionStatus?: SortOrder
    isAIResponse?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    redPacketAmount?: SortOrder
    taskPostId?: SortOrder
    taskFinalAmount?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WalletTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    txHash?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type WalletTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type WalletTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    txHash?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type WalletTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    txHash?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type WalletTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type VoiceTrainingListRelationFilter = {
    every?: VoiceTrainingWhereInput
    some?: VoiceTrainingWhereInput
    none?: VoiceTrainingWhereInput
  }

  export type VoiceTrainingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    llmProvider?: SortOrder
    llmModel?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
    systemPrompt?: SortOrder
    roleTemplate?: SortOrder
    contextPrompts?: SortOrder
    activeVoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIProfileAvgOrderByAggregateInput = {
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
  }

  export type AIProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    llmProvider?: SortOrder
    llmModel?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
    systemPrompt?: SortOrder
    roleTemplate?: SortOrder
    contextPrompts?: SortOrder
    activeVoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    llmProvider?: SortOrder
    llmModel?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
    systemPrompt?: SortOrder
    roleTemplate?: SortOrder
    contextPrompts?: SortOrder
    activeVoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIProfileSumOrderByAggregateInput = {
    temperature?: SortOrder
    maxTokens?: SortOrder
    topP?: SortOrder
  }

  export type AIMemoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    score?: SortOrder
    metadata?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIMemoryAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type AIMemoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    score?: SortOrder
    metadata?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIMemoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    score?: SortOrder
    metadata?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIMemorySumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type AIProfileRelationFilter = {
    is?: AIProfileWhereInput
    isNot?: AIProfileWhereInput
  }

  export type VoiceTrainingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    version?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    sampleKeys?: SortOrder
    modelKey?: SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrder
    trainingStartedAt?: SortOrder
    trainingCompletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoiceTrainingAvgOrderByAggregateInput = {
    progress?: SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrder
  }

  export type VoiceTrainingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    version?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    sampleKeys?: SortOrder
    modelKey?: SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrder
    trainingStartedAt?: SortOrder
    trainingCompletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoiceTrainingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    name?: SortOrder
    version?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    sampleKeys?: SortOrder
    modelKey?: SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrder
    trainingStartedAt?: SortOrder
    trainingCompletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VoiceTrainingSumOrderByAggregateInput = {
    progress?: SortOrder
    sampleCount?: SortOrder
    duration?: SortOrder
    accuracy?: SortOrder
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type FacegateRecordListRelationFilter = {
    every?: FacegateRecordWhereInput
    some?: FacegateRecordWhereInput
    none?: FacegateRecordWhereInput
  }

  export type FacegateScheduleTargetListRelationFilter = {
    every?: FacegateScheduleTargetWhereInput
    some?: FacegateScheduleTargetWhereInput
    none?: FacegateScheduleTargetWhereInput
  }

  export type FacegateJobListRelationFilter = {
    every?: FacegateJobWhereInput
    some?: FacegateJobWhereInput
    none?: FacegateJobWhereInput
  }

  export type FacegateRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacegateScheduleTargetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacegateJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacegateDeviceCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    prodType?: SortOrder
    prodName?: SortOrder
    relaySlots?: SortOrder
    lastSeenTs?: SortOrder
    fwVersion?: SortOrder
    status?: SortOrder
    online?: SortOrder
    tz?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateDeviceAvgOrderByAggregateInput = {
    relaySlots?: SortOrder
    lastSeenTs?: SortOrder
    status?: SortOrder
  }

  export type FacegateDeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    prodType?: SortOrder
    prodName?: SortOrder
    relaySlots?: SortOrder
    lastSeenTs?: SortOrder
    fwVersion?: SortOrder
    status?: SortOrder
    online?: SortOrder
    tz?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateDeviceMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    prodType?: SortOrder
    prodName?: SortOrder
    relaySlots?: SortOrder
    lastSeenTs?: SortOrder
    fwVersion?: SortOrder
    status?: SortOrder
    online?: SortOrder
    tz?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateDeviceSumOrderByAggregateInput = {
    relaySlots?: SortOrder
    lastSeenTs?: SortOrder
    status?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type FacegatePersonCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phone?: SortOrder
    personName?: SortOrder
    localImagePath?: SortOrder
    imageChecksum?: SortOrder
    icCardId?: SortOrder
    idCardNo?: SortOrder
    memberLevel?: SortOrder
    memberExpiry?: SortOrder
    isApeLord?: SortOrder
    passPlans?: SortOrder
    syncStatus?: SortOrder
    extInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegatePersonAvgOrderByAggregateInput = {
    syncStatus?: SortOrder
  }

  export type FacegatePersonMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phone?: SortOrder
    personName?: SortOrder
    localImagePath?: SortOrder
    imageChecksum?: SortOrder
    icCardId?: SortOrder
    idCardNo?: SortOrder
    memberLevel?: SortOrder
    memberExpiry?: SortOrder
    isApeLord?: SortOrder
    passPlans?: SortOrder
    syncStatus?: SortOrder
    extInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegatePersonMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phone?: SortOrder
    personName?: SortOrder
    localImagePath?: SortOrder
    imageChecksum?: SortOrder
    icCardId?: SortOrder
    idCardNo?: SortOrder
    memberLevel?: SortOrder
    memberExpiry?: SortOrder
    isApeLord?: SortOrder
    passPlans?: SortOrder
    syncStatus?: SortOrder
    extInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegatePersonSumOrderByAggregateInput = {
    syncStatus?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type FacegateDeviceRelationFilter = {
    is?: FacegateDeviceWhereInput
    isNot?: FacegateDeviceWhereInput
  }

  export type FacegateRecordDeviceIdRecordIdCompoundUniqueInput = {
    deviceId: string
    recordId: bigint | number
  }

  export type FacegateRecordCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    recordId?: SortOrder
    personPhone?: SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrder
    temperature?: SortOrder
    qrcode?: SortOrder
    healthCodeColor?: SortOrder
    recordPicUrl?: SortOrder
    idCardPicUrl?: SortOrder
    raw?: SortOrder
    createdAt?: SortOrder
  }

  export type FacegateRecordAvgOrderByAggregateInput = {
    recordId?: SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrder
    temperature?: SortOrder
  }

  export type FacegateRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    recordId?: SortOrder
    personPhone?: SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrder
    temperature?: SortOrder
    qrcode?: SortOrder
    healthCodeColor?: SortOrder
    recordPicUrl?: SortOrder
    idCardPicUrl?: SortOrder
    raw?: SortOrder
    createdAt?: SortOrder
  }

  export type FacegateRecordMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    recordId?: SortOrder
    personPhone?: SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrder
    temperature?: SortOrder
    qrcode?: SortOrder
    healthCodeColor?: SortOrder
    recordPicUrl?: SortOrder
    idCardPicUrl?: SortOrder
    raw?: SortOrder
    createdAt?: SortOrder
  }

  export type FacegateRecordSumOrderByAggregateInput = {
    recordId?: SortOrder
    recordTime?: SortOrder
    recordType?: SortOrder
    recordPass?: SortOrder
    similarity?: SortOrder
    temperature?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type FacegateImageNullableRelationFilter = {
    is?: FacegateImageWhereInput | null
    isNot?: FacegateImageWhereInput | null
  }

  export type FacegateScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    userPhone?: SortOrder
    imageId?: SortOrder
    payloadType?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    cron?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateScheduleAvgOrderByAggregateInput = {
    status?: SortOrder
  }

  export type FacegateScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    userPhone?: SortOrder
    imageId?: SortOrder
    payloadType?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    cron?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    userPhone?: SortOrder
    imageId?: SortOrder
    payloadType?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    cron?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateScheduleSumOrderByAggregateInput = {
    status?: SortOrder
  }

  export type FacegateScheduleListRelationFilter = {
    every?: FacegateScheduleWhereInput
    some?: FacegateScheduleWhereInput
    none?: FacegateScheduleWhereInput
  }

  export type FacegateScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacegateImageCountOrderByAggregateInput = {
    id?: SortOrder
    userPhone?: SortOrder
    localPath?: SortOrder
    fileName?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type FacegateImageMaxOrderByAggregateInput = {
    id?: SortOrder
    userPhone?: SortOrder
    localPath?: SortOrder
    fileName?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type FacegateImageMinOrderByAggregateInput = {
    id?: SortOrder
    userPhone?: SortOrder
    localPath?: SortOrder
    fileName?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type FacegateScheduleRelationFilter = {
    is?: FacegateScheduleWhereInput
    isNot?: FacegateScheduleWhereInput
  }

  export type FacegateScheduleTargetScheduleIdDeviceIdCompoundUniqueInput = {
    scheduleId: string
    deviceId: string
  }

  export type FacegateScheduleTargetCountOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
  }

  export type FacegateScheduleTargetMaxOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
  }

  export type FacegateScheduleTargetMinOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
  }

  export type FacegateJobCountOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    state?: SortOrder
    retryCount?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateJobAvgOrderByAggregateInput = {
    retryCount?: SortOrder
  }

  export type FacegateJobMaxOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    state?: SortOrder
    retryCount?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateJobMinOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    deviceId?: SortOrder
    state?: SortOrder
    retryCount?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacegateJobSumOrderByAggregateInput = {
    retryCount?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type VisualMediaCreateNestedManyWithoutUserInput = {
    create?: XOR<VisualMediaCreateWithoutUserInput, VisualMediaUncheckedCreateWithoutUserInput> | VisualMediaCreateWithoutUserInput[] | VisualMediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutUserInput | VisualMediaCreateOrConnectWithoutUserInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
  }

  export type PostLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutSourceUserInput = {
    create?: XOR<ActivityCreateWithoutSourceUserInput, ActivityUncheckedCreateWithoutSourceUserInput> | ActivityCreateWithoutSourceUserInput[] | ActivityUncheckedCreateWithoutSourceUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutSourceUserInput | ActivityCreateOrConnectWithoutSourceUserInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<ActivityCreateWithoutTargetUserInput, ActivityUncheckedCreateWithoutTargetUserInput> | ActivityCreateWithoutTargetUserInput[] | ActivityUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTargetUserInput | ActivityCreateOrConnectWithoutTargetUserInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutParticipant1Input = {
    create?: XOR<ConversationCreateWithoutParticipant1Input, ConversationUncheckedCreateWithoutParticipant1Input> | ConversationCreateWithoutParticipant1Input[] | ConversationUncheckedCreateWithoutParticipant1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant1Input | ConversationCreateOrConnectWithoutParticipant1Input[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutParticipant2Input = {
    create?: XOR<ConversationCreateWithoutParticipant2Input, ConversationUncheckedCreateWithoutParticipant2Input> | ConversationCreateWithoutParticipant2Input[] | ConversationUncheckedCreateWithoutParticipant2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant2Input | ConversationCreateOrConnectWithoutParticipant2Input[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type WalletTransactionCreateNestedManyWithoutFromUserInput = {
    create?: XOR<WalletTransactionCreateWithoutFromUserInput, WalletTransactionUncheckedCreateWithoutFromUserInput> | WalletTransactionCreateWithoutFromUserInput[] | WalletTransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutFromUserInput | WalletTransactionCreateOrConnectWithoutFromUserInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type WalletTransactionCreateNestedManyWithoutToUserInput = {
    create?: XOR<WalletTransactionCreateWithoutToUserInput, WalletTransactionUncheckedCreateWithoutToUserInput> | WalletTransactionCreateWithoutToUserInput[] | WalletTransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutToUserInput | WalletTransactionCreateOrConnectWithoutToUserInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type AIProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<AIProfileCreateWithoutUserInput, AIProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AIProfileCreateOrConnectWithoutUserInput
    connect?: AIProfileWhereUniqueInput
  }

  export type AIMemoryCreateNestedManyWithoutUserInput = {
    create?: XOR<AIMemoryCreateWithoutUserInput, AIMemoryUncheckedCreateWithoutUserInput> | AIMemoryCreateWithoutUserInput[] | AIMemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIMemoryCreateOrConnectWithoutUserInput | AIMemoryCreateOrConnectWithoutUserInput[]
    connect?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
  }

  export type FacegatePersonCreateNestedOneWithoutUserInput = {
    create?: XOR<FacegatePersonCreateWithoutUserInput, FacegatePersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: FacegatePersonCreateOrConnectWithoutUserInput
    connect?: FacegatePersonWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type VisualMediaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VisualMediaCreateWithoutUserInput, VisualMediaUncheckedCreateWithoutUserInput> | VisualMediaCreateWithoutUserInput[] | VisualMediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutUserInput | VisualMediaCreateOrConnectWithoutUserInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
  }

  export type PostLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutSourceUserInput = {
    create?: XOR<ActivityCreateWithoutSourceUserInput, ActivityUncheckedCreateWithoutSourceUserInput> | ActivityCreateWithoutSourceUserInput[] | ActivityUncheckedCreateWithoutSourceUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutSourceUserInput | ActivityCreateOrConnectWithoutSourceUserInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<ActivityCreateWithoutTargetUserInput, ActivityUncheckedCreateWithoutTargetUserInput> | ActivityCreateWithoutTargetUserInput[] | ActivityUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTargetUserInput | ActivityCreateOrConnectWithoutTargetUserInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutParticipant1Input = {
    create?: XOR<ConversationCreateWithoutParticipant1Input, ConversationUncheckedCreateWithoutParticipant1Input> | ConversationCreateWithoutParticipant1Input[] | ConversationUncheckedCreateWithoutParticipant1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant1Input | ConversationCreateOrConnectWithoutParticipant1Input[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutParticipant2Input = {
    create?: XOR<ConversationCreateWithoutParticipant2Input, ConversationUncheckedCreateWithoutParticipant2Input> | ConversationCreateWithoutParticipant2Input[] | ConversationUncheckedCreateWithoutParticipant2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant2Input | ConversationCreateOrConnectWithoutParticipant2Input[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<WalletTransactionCreateWithoutFromUserInput, WalletTransactionUncheckedCreateWithoutFromUserInput> | WalletTransactionCreateWithoutFromUserInput[] | WalletTransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutFromUserInput | WalletTransactionCreateOrConnectWithoutFromUserInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type WalletTransactionUncheckedCreateNestedManyWithoutToUserInput = {
    create?: XOR<WalletTransactionCreateWithoutToUserInput, WalletTransactionUncheckedCreateWithoutToUserInput> | WalletTransactionCreateWithoutToUserInput[] | WalletTransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutToUserInput | WalletTransactionCreateOrConnectWithoutToUserInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type AIProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AIProfileCreateWithoutUserInput, AIProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AIProfileCreateOrConnectWithoutUserInput
    connect?: AIProfileWhereUniqueInput
  }

  export type AIMemoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AIMemoryCreateWithoutUserInput, AIMemoryUncheckedCreateWithoutUserInput> | AIMemoryCreateWithoutUserInput[] | AIMemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIMemoryCreateOrConnectWithoutUserInput | AIMemoryCreateOrConnectWithoutUserInput[]
    connect?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
  }

  export type FacegatePersonUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<FacegatePersonCreateWithoutUserInput, FacegatePersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: FacegatePersonCreateOrConnectWithoutUserInput
    connect?: FacegatePersonWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type VisualMediaUpdateManyWithoutUserNestedInput = {
    create?: XOR<VisualMediaCreateWithoutUserInput, VisualMediaUncheckedCreateWithoutUserInput> | VisualMediaCreateWithoutUserInput[] | VisualMediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutUserInput | VisualMediaCreateOrConnectWithoutUserInput[]
    upsert?: VisualMediaUpsertWithWhereUniqueWithoutUserInput | VisualMediaUpsertWithWhereUniqueWithoutUserInput[]
    set?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    disconnect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    delete?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    update?: VisualMediaUpdateWithWhereUniqueWithoutUserInput | VisualMediaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VisualMediaUpdateManyWithWhereWithoutUserInput | VisualMediaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VisualMediaScalarWhereInput | VisualMediaScalarWhereInput[]
  }

  export type PostLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutUserInput | PostLikeUpsertWithWhereUniqueWithoutUserInput[]
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutUserInput | PostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutUserInput | PostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutUserInput | CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutUserInput | CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutUserInput | CommentLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutSourceUserNestedInput = {
    create?: XOR<ActivityCreateWithoutSourceUserInput, ActivityUncheckedCreateWithoutSourceUserInput> | ActivityCreateWithoutSourceUserInput[] | ActivityUncheckedCreateWithoutSourceUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutSourceUserInput | ActivityCreateOrConnectWithoutSourceUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutSourceUserInput | ActivityUpsertWithWhereUniqueWithoutSourceUserInput[]
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutSourceUserInput | ActivityUpdateWithWhereUniqueWithoutSourceUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutSourceUserInput | ActivityUpdateManyWithWhereWithoutSourceUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<ActivityCreateWithoutTargetUserInput, ActivityUncheckedCreateWithoutTargetUserInput> | ActivityCreateWithoutTargetUserInput[] | ActivityUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTargetUserInput | ActivityCreateOrConnectWithoutTargetUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutTargetUserInput | ActivityUpsertWithWhereUniqueWithoutTargetUserInput[]
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutTargetUserInput | ActivityUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutTargetUserInput | ActivityUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutParticipant1NestedInput = {
    create?: XOR<ConversationCreateWithoutParticipant1Input, ConversationUncheckedCreateWithoutParticipant1Input> | ConversationCreateWithoutParticipant1Input[] | ConversationUncheckedCreateWithoutParticipant1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant1Input | ConversationCreateOrConnectWithoutParticipant1Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutParticipant1Input | ConversationUpsertWithWhereUniqueWithoutParticipant1Input[]
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutParticipant1Input | ConversationUpdateWithWhereUniqueWithoutParticipant1Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutParticipant1Input | ConversationUpdateManyWithWhereWithoutParticipant1Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutParticipant2NestedInput = {
    create?: XOR<ConversationCreateWithoutParticipant2Input, ConversationUncheckedCreateWithoutParticipant2Input> | ConversationCreateWithoutParticipant2Input[] | ConversationUncheckedCreateWithoutParticipant2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant2Input | ConversationCreateOrConnectWithoutParticipant2Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutParticipant2Input | ConversationUpsertWithWhereUniqueWithoutParticipant2Input[]
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutParticipant2Input | ConversationUpdateWithWhereUniqueWithoutParticipant2Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutParticipant2Input | ConversationUpdateManyWithWhereWithoutParticipant2Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type WalletTransactionUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutFromUserInput, WalletTransactionUncheckedCreateWithoutFromUserInput> | WalletTransactionCreateWithoutFromUserInput[] | WalletTransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutFromUserInput | WalletTransactionCreateOrConnectWithoutFromUserInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutFromUserInput | WalletTransactionUpsertWithWhereUniqueWithoutFromUserInput[]
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutFromUserInput | WalletTransactionUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutFromUserInput | WalletTransactionUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type WalletTransactionUpdateManyWithoutToUserNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutToUserInput, WalletTransactionUncheckedCreateWithoutToUserInput> | WalletTransactionCreateWithoutToUserInput[] | WalletTransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutToUserInput | WalletTransactionCreateOrConnectWithoutToUserInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutToUserInput | WalletTransactionUpsertWithWhereUniqueWithoutToUserInput[]
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutToUserInput | WalletTransactionUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutToUserInput | WalletTransactionUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type AIProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<AIProfileCreateWithoutUserInput, AIProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AIProfileCreateOrConnectWithoutUserInput
    upsert?: AIProfileUpsertWithoutUserInput
    disconnect?: AIProfileWhereInput | boolean
    delete?: AIProfileWhereInput | boolean
    connect?: AIProfileWhereUniqueInput
    update?: XOR<XOR<AIProfileUpdateToOneWithWhereWithoutUserInput, AIProfileUpdateWithoutUserInput>, AIProfileUncheckedUpdateWithoutUserInput>
  }

  export type AIMemoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<AIMemoryCreateWithoutUserInput, AIMemoryUncheckedCreateWithoutUserInput> | AIMemoryCreateWithoutUserInput[] | AIMemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIMemoryCreateOrConnectWithoutUserInput | AIMemoryCreateOrConnectWithoutUserInput[]
    upsert?: AIMemoryUpsertWithWhereUniqueWithoutUserInput | AIMemoryUpsertWithWhereUniqueWithoutUserInput[]
    set?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    disconnect?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    delete?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    connect?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    update?: AIMemoryUpdateWithWhereUniqueWithoutUserInput | AIMemoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AIMemoryUpdateManyWithWhereWithoutUserInput | AIMemoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AIMemoryScalarWhereInput | AIMemoryScalarWhereInput[]
  }

  export type FacegatePersonUpdateOneWithoutUserNestedInput = {
    create?: XOR<FacegatePersonCreateWithoutUserInput, FacegatePersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: FacegatePersonCreateOrConnectWithoutUserInput
    upsert?: FacegatePersonUpsertWithoutUserInput
    disconnect?: FacegatePersonWhereInput | boolean
    delete?: FacegatePersonWhereInput | boolean
    connect?: FacegatePersonWhereUniqueInput
    update?: XOR<XOR<FacegatePersonUpdateToOneWithWhereWithoutUserInput, FacegatePersonUpdateWithoutUserInput>, FacegatePersonUncheckedUpdateWithoutUserInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type VisualMediaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VisualMediaCreateWithoutUserInput, VisualMediaUncheckedCreateWithoutUserInput> | VisualMediaCreateWithoutUserInput[] | VisualMediaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutUserInput | VisualMediaCreateOrConnectWithoutUserInput[]
    upsert?: VisualMediaUpsertWithWhereUniqueWithoutUserInput | VisualMediaUpsertWithWhereUniqueWithoutUserInput[]
    set?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    disconnect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    delete?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    update?: VisualMediaUpdateWithWhereUniqueWithoutUserInput | VisualMediaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VisualMediaUpdateManyWithWhereWithoutUserInput | VisualMediaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VisualMediaScalarWhereInput | VisualMediaScalarWhereInput[]
  }

  export type PostLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutUserInput | PostLikeUpsertWithWhereUniqueWithoutUserInput[]
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutUserInput | PostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutUserInput | PostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutUserInput | CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutUserInput | CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutUserInput | CommentLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutSourceUserNestedInput = {
    create?: XOR<ActivityCreateWithoutSourceUserInput, ActivityUncheckedCreateWithoutSourceUserInput> | ActivityCreateWithoutSourceUserInput[] | ActivityUncheckedCreateWithoutSourceUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutSourceUserInput | ActivityCreateOrConnectWithoutSourceUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutSourceUserInput | ActivityUpsertWithWhereUniqueWithoutSourceUserInput[]
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutSourceUserInput | ActivityUpdateWithWhereUniqueWithoutSourceUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutSourceUserInput | ActivityUpdateManyWithWhereWithoutSourceUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<ActivityCreateWithoutTargetUserInput, ActivityUncheckedCreateWithoutTargetUserInput> | ActivityCreateWithoutTargetUserInput[] | ActivityUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutTargetUserInput | ActivityCreateOrConnectWithoutTargetUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutTargetUserInput | ActivityUpsertWithWhereUniqueWithoutTargetUserInput[]
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutTargetUserInput | ActivityUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutTargetUserInput | ActivityUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutParticipant1NestedInput = {
    create?: XOR<ConversationCreateWithoutParticipant1Input, ConversationUncheckedCreateWithoutParticipant1Input> | ConversationCreateWithoutParticipant1Input[] | ConversationUncheckedCreateWithoutParticipant1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant1Input | ConversationCreateOrConnectWithoutParticipant1Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutParticipant1Input | ConversationUpsertWithWhereUniqueWithoutParticipant1Input[]
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutParticipant1Input | ConversationUpdateWithWhereUniqueWithoutParticipant1Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutParticipant1Input | ConversationUpdateManyWithWhereWithoutParticipant1Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutParticipant2NestedInput = {
    create?: XOR<ConversationCreateWithoutParticipant2Input, ConversationUncheckedCreateWithoutParticipant2Input> | ConversationCreateWithoutParticipant2Input[] | ConversationUncheckedCreateWithoutParticipant2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutParticipant2Input | ConversationCreateOrConnectWithoutParticipant2Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutParticipant2Input | ConversationUpsertWithWhereUniqueWithoutParticipant2Input[]
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutParticipant2Input | ConversationUpdateWithWhereUniqueWithoutParticipant2Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutParticipant2Input | ConversationUpdateManyWithWhereWithoutParticipant2Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutFromUserInput, WalletTransactionUncheckedCreateWithoutFromUserInput> | WalletTransactionCreateWithoutFromUserInput[] | WalletTransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutFromUserInput | WalletTransactionCreateOrConnectWithoutFromUserInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutFromUserInput | WalletTransactionUpsertWithWhereUniqueWithoutFromUserInput[]
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutFromUserInput | WalletTransactionUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutFromUserInput | WalletTransactionUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutToUserInput, WalletTransactionUncheckedCreateWithoutToUserInput> | WalletTransactionCreateWithoutToUserInput[] | WalletTransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutToUserInput | WalletTransactionCreateOrConnectWithoutToUserInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutToUserInput | WalletTransactionUpsertWithWhereUniqueWithoutToUserInput[]
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutToUserInput | WalletTransactionUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutToUserInput | WalletTransactionUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type AIProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AIProfileCreateWithoutUserInput, AIProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: AIProfileCreateOrConnectWithoutUserInput
    upsert?: AIProfileUpsertWithoutUserInput
    disconnect?: AIProfileWhereInput | boolean
    delete?: AIProfileWhereInput | boolean
    connect?: AIProfileWhereUniqueInput
    update?: XOR<XOR<AIProfileUpdateToOneWithWhereWithoutUserInput, AIProfileUpdateWithoutUserInput>, AIProfileUncheckedUpdateWithoutUserInput>
  }

  export type AIMemoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AIMemoryCreateWithoutUserInput, AIMemoryUncheckedCreateWithoutUserInput> | AIMemoryCreateWithoutUserInput[] | AIMemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIMemoryCreateOrConnectWithoutUserInput | AIMemoryCreateOrConnectWithoutUserInput[]
    upsert?: AIMemoryUpsertWithWhereUniqueWithoutUserInput | AIMemoryUpsertWithWhereUniqueWithoutUserInput[]
    set?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    disconnect?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    delete?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    connect?: AIMemoryWhereUniqueInput | AIMemoryWhereUniqueInput[]
    update?: AIMemoryUpdateWithWhereUniqueWithoutUserInput | AIMemoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AIMemoryUpdateManyWithWhereWithoutUserInput | AIMemoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AIMemoryScalarWhereInput | AIMemoryScalarWhereInput[]
  }

  export type FacegatePersonUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<FacegatePersonCreateWithoutUserInput, FacegatePersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: FacegatePersonCreateOrConnectWithoutUserInput
    upsert?: FacegatePersonUpsertWithoutUserInput
    disconnect?: FacegatePersonWhereInput | boolean
    delete?: FacegatePersonWhereInput | boolean
    connect?: FacegatePersonWhereUniqueInput
    update?: XOR<XOR<FacegatePersonUpdateToOneWithWhereWithoutUserInput, FacegatePersonUpdateWithoutUserInput>, FacegatePersonUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VisualMediaCreateNestedManyWithoutPostInput = {
    create?: XOR<VisualMediaCreateWithoutPostInput, VisualMediaUncheckedCreateWithoutPostInput> | VisualMediaCreateWithoutPostInput[] | VisualMediaUncheckedCreateWithoutPostInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutPostInput | VisualMediaCreateOrConnectWithoutPostInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    connect?: UserWhereUniqueInput
  }

  export type PostLikeCreateNestedManyWithoutPostInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type VisualMediaUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<VisualMediaCreateWithoutPostInput, VisualMediaUncheckedCreateWithoutPostInput> | VisualMediaCreateWithoutPostInput[] | VisualMediaUncheckedCreateWithoutPostInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutPostInput | VisualMediaCreateOrConnectWithoutPostInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
  }

  export type PostLikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type VisualMediaUpdateManyWithoutPostNestedInput = {
    create?: XOR<VisualMediaCreateWithoutPostInput, VisualMediaUncheckedCreateWithoutPostInput> | VisualMediaCreateWithoutPostInput[] | VisualMediaUncheckedCreateWithoutPostInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutPostInput | VisualMediaCreateOrConnectWithoutPostInput[]
    upsert?: VisualMediaUpsertWithWhereUniqueWithoutPostInput | VisualMediaUpsertWithWhereUniqueWithoutPostInput[]
    set?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    disconnect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    delete?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    update?: VisualMediaUpdateWithWhereUniqueWithoutPostInput | VisualMediaUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: VisualMediaUpdateManyWithWhereWithoutPostInput | VisualMediaUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: VisualMediaScalarWhereInput | VisualMediaScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    upsert?: UserUpsertWithoutPostInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostInput, UserUpdateWithoutPostInput>, UserUncheckedUpdateWithoutPostInput>
  }

  export type PostLikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutPostInput | PostLikeUpsertWithWhereUniqueWithoutPostInput[]
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutPostInput | PostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutPostInput | PostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type VisualMediaUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<VisualMediaCreateWithoutPostInput, VisualMediaUncheckedCreateWithoutPostInput> | VisualMediaCreateWithoutPostInput[] | VisualMediaUncheckedCreateWithoutPostInput[]
    connectOrCreate?: VisualMediaCreateOrConnectWithoutPostInput | VisualMediaCreateOrConnectWithoutPostInput[]
    upsert?: VisualMediaUpsertWithWhereUniqueWithoutPostInput | VisualMediaUpsertWithWhereUniqueWithoutPostInput[]
    set?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    disconnect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    delete?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    connect?: VisualMediaWhereUniqueInput | VisualMediaWhereUniqueInput[]
    update?: VisualMediaUpdateWithWhereUniqueWithoutPostInput | VisualMediaUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: VisualMediaUpdateManyWithWhereWithoutPostInput | VisualMediaUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: VisualMediaScalarWhereInput | VisualMediaScalarWhereInput[]
  }

  export type PostLikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutPostInput | PostLikeUpsertWithWhereUniqueWithoutPostInput[]
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutPostInput | PostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutPostInput | PostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostLikesInput = {
    create?: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostLikesInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutPostLikesInput = {
    create?: XOR<PostCreateWithoutPostLikesInput, PostUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostLikesInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPostLikesNestedInput = {
    create?: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostLikesInput
    upsert?: UserUpsertWithoutPostLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostLikesInput, UserUpdateWithoutPostLikesInput>, UserUncheckedUpdateWithoutPostLikesInput>
  }

  export type PostUpdateOneRequiredWithoutPostLikesNestedInput = {
    create?: XOR<PostCreateWithoutPostLikesInput, PostUncheckedCreateWithoutPostLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostLikesInput
    upsert?: PostUpsertWithoutPostLikesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutPostLikesInput, PostUpdateWithoutPostLikesInput>, PostUncheckedUpdateWithoutPostLikesInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentLikeCreateNestedManyWithoutCommentInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentLikeUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentLikeUpdateManyWithoutCommentNestedInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutCommentInput | CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutCommentInput | CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutCommentInput | CommentLikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    upsert?: CommentUpsertWithoutRepliesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutRepliesInput, CommentUpdateWithoutRepliesInput>, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentLikeUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutCommentInput | CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutCommentInput | CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutCommentInput | CommentLikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentLikesInput = {
    create?: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentLikesInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutCommentLikesInput = {
    create?: XOR<CommentCreateWithoutCommentLikesInput, CommentUncheckedCreateWithoutCommentLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutCommentLikesInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentLikesNestedInput = {
    create?: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentLikesInput
    upsert?: UserUpsertWithoutCommentLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentLikesInput, UserUpdateWithoutCommentLikesInput>, UserUncheckedUpdateWithoutCommentLikesInput>
  }

  export type CommentUpdateOneRequiredWithoutCommentLikesNestedInput = {
    create?: XOR<CommentCreateWithoutCommentLikesInput, CommentUncheckedCreateWithoutCommentLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutCommentLikesInput
    upsert?: CommentUpsertWithoutCommentLikesInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutCommentLikesInput, CommentUpdateWithoutCommentLikesInput>, CommentUncheckedUpdateWithoutCommentLikesInput>
  }

  export type UserCreateNestedOneWithoutVisualMediaInput = {
    create?: XOR<UserCreateWithoutVisualMediaInput, UserUncheckedCreateWithoutVisualMediaInput>
    connectOrCreate?: UserCreateOrConnectWithoutVisualMediaInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutVisualMediaInput = {
    create?: XOR<PostCreateWithoutVisualMediaInput, PostUncheckedCreateWithoutVisualMediaInput>
    connectOrCreate?: PostCreateOrConnectWithoutVisualMediaInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVisualMediaNestedInput = {
    create?: XOR<UserCreateWithoutVisualMediaInput, UserUncheckedCreateWithoutVisualMediaInput>
    connectOrCreate?: UserCreateOrConnectWithoutVisualMediaInput
    upsert?: UserUpsertWithoutVisualMediaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVisualMediaInput, UserUpdateWithoutVisualMediaInput>, UserUncheckedUpdateWithoutVisualMediaInput>
  }

  export type PostUpdateOneRequiredWithoutVisualMediaNestedInput = {
    create?: XOR<PostCreateWithoutVisualMediaInput, PostUncheckedCreateWithoutVisualMediaInput>
    connectOrCreate?: PostCreateOrConnectWithoutVisualMediaInput
    upsert?: PostUpsertWithoutVisualMediaInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutVisualMediaInput, PostUpdateWithoutVisualMediaInput>, PostUncheckedUpdateWithoutVisualMediaInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutConversationsAsParticipant1Input = {
    create?: XOR<UserCreateWithoutConversationsAsParticipant1Input, UserUncheckedCreateWithoutConversationsAsParticipant1Input>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsAsParticipant1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConversationsAsParticipant2Input = {
    create?: XOR<UserCreateWithoutConversationsAsParticipant2Input, UserUncheckedCreateWithoutConversationsAsParticipant2Input>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsAsParticipant2Input
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutConversationsAsParticipant1NestedInput = {
    create?: XOR<UserCreateWithoutConversationsAsParticipant1Input, UserUncheckedCreateWithoutConversationsAsParticipant1Input>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsAsParticipant1Input
    upsert?: UserUpsertWithoutConversationsAsParticipant1Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationsAsParticipant1Input, UserUpdateWithoutConversationsAsParticipant1Input>, UserUncheckedUpdateWithoutConversationsAsParticipant1Input>
  }

  export type UserUpdateOneRequiredWithoutConversationsAsParticipant2NestedInput = {
    create?: XOR<UserCreateWithoutConversationsAsParticipant2Input, UserUncheckedCreateWithoutConversationsAsParticipant2Input>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsAsParticipant2Input
    upsert?: UserUpsertWithoutConversationsAsParticipant2Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationsAsParticipant2Input, UserUpdateWithoutConversationsAsParticipant2Input>, UserUncheckedUpdateWithoutConversationsAsParticipant2Input>
  }

  export type MessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    upsert?: ConversationUpsertWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutMessagesInput, ConversationUpdateWithoutMessagesInput>, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutSentTransactionsInput = {
    create?: XOR<UserCreateWithoutSentTransactionsInput, UserUncheckedCreateWithoutSentTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedTransactionsInput = {
    create?: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutSentTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutSentTransactionsInput, UserUncheckedCreateWithoutSentTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentTransactionsInput
    upsert?: UserUpsertWithoutSentTransactionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentTransactionsInput, UserUpdateWithoutSentTransactionsInput>, UserUncheckedUpdateWithoutSentTransactionsInput>
  }

  export type UserUpdateOneWithoutReceivedTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransactionsInput
    upsert?: UserUpsertWithoutReceivedTransactionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedTransactionsInput, UserUpdateWithoutReceivedTransactionsInput>, UserUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type UserCreateNestedOneWithoutAiProfileInput = {
    create?: XOR<UserCreateWithoutAiProfileInput, UserUncheckedCreateWithoutAiProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiProfileInput
    connect?: UserWhereUniqueInput
  }

  export type VoiceTrainingCreateNestedManyWithoutProfileInput = {
    create?: XOR<VoiceTrainingCreateWithoutProfileInput, VoiceTrainingUncheckedCreateWithoutProfileInput> | VoiceTrainingCreateWithoutProfileInput[] | VoiceTrainingUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: VoiceTrainingCreateOrConnectWithoutProfileInput | VoiceTrainingCreateOrConnectWithoutProfileInput[]
    connect?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
  }

  export type VoiceTrainingUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<VoiceTrainingCreateWithoutProfileInput, VoiceTrainingUncheckedCreateWithoutProfileInput> | VoiceTrainingCreateWithoutProfileInput[] | VoiceTrainingUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: VoiceTrainingCreateOrConnectWithoutProfileInput | VoiceTrainingCreateOrConnectWithoutProfileInput[]
    connect?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAiProfileNestedInput = {
    create?: XOR<UserCreateWithoutAiProfileInput, UserUncheckedCreateWithoutAiProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiProfileInput
    upsert?: UserUpsertWithoutAiProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAiProfileInput, UserUpdateWithoutAiProfileInput>, UserUncheckedUpdateWithoutAiProfileInput>
  }

  export type VoiceTrainingUpdateManyWithoutProfileNestedInput = {
    create?: XOR<VoiceTrainingCreateWithoutProfileInput, VoiceTrainingUncheckedCreateWithoutProfileInput> | VoiceTrainingCreateWithoutProfileInput[] | VoiceTrainingUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: VoiceTrainingCreateOrConnectWithoutProfileInput | VoiceTrainingCreateOrConnectWithoutProfileInput[]
    upsert?: VoiceTrainingUpsertWithWhereUniqueWithoutProfileInput | VoiceTrainingUpsertWithWhereUniqueWithoutProfileInput[]
    set?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    disconnect?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    delete?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    connect?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    update?: VoiceTrainingUpdateWithWhereUniqueWithoutProfileInput | VoiceTrainingUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: VoiceTrainingUpdateManyWithWhereWithoutProfileInput | VoiceTrainingUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: VoiceTrainingScalarWhereInput | VoiceTrainingScalarWhereInput[]
  }

  export type VoiceTrainingUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<VoiceTrainingCreateWithoutProfileInput, VoiceTrainingUncheckedCreateWithoutProfileInput> | VoiceTrainingCreateWithoutProfileInput[] | VoiceTrainingUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: VoiceTrainingCreateOrConnectWithoutProfileInput | VoiceTrainingCreateOrConnectWithoutProfileInput[]
    upsert?: VoiceTrainingUpsertWithWhereUniqueWithoutProfileInput | VoiceTrainingUpsertWithWhereUniqueWithoutProfileInput[]
    set?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    disconnect?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    delete?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    connect?: VoiceTrainingWhereUniqueInput | VoiceTrainingWhereUniqueInput[]
    update?: VoiceTrainingUpdateWithWhereUniqueWithoutProfileInput | VoiceTrainingUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: VoiceTrainingUpdateManyWithWhereWithoutProfileInput | VoiceTrainingUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: VoiceTrainingScalarWhereInput | VoiceTrainingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAiMemoriesInput = {
    create?: XOR<UserCreateWithoutAiMemoriesInput, UserUncheckedCreateWithoutAiMemoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiMemoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAiMemoriesNestedInput = {
    create?: XOR<UserCreateWithoutAiMemoriesInput, UserUncheckedCreateWithoutAiMemoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiMemoriesInput
    upsert?: UserUpsertWithoutAiMemoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAiMemoriesInput, UserUpdateWithoutAiMemoriesInput>, UserUncheckedUpdateWithoutAiMemoriesInput>
  }

  export type AIProfileCreateNestedOneWithoutVoiceTrainingsInput = {
    create?: XOR<AIProfileCreateWithoutVoiceTrainingsInput, AIProfileUncheckedCreateWithoutVoiceTrainingsInput>
    connectOrCreate?: AIProfileCreateOrConnectWithoutVoiceTrainingsInput
    connect?: AIProfileWhereUniqueInput
  }

  export type AIProfileUpdateOneRequiredWithoutVoiceTrainingsNestedInput = {
    create?: XOR<AIProfileCreateWithoutVoiceTrainingsInput, AIProfileUncheckedCreateWithoutVoiceTrainingsInput>
    connectOrCreate?: AIProfileCreateOrConnectWithoutVoiceTrainingsInput
    upsert?: AIProfileUpsertWithoutVoiceTrainingsInput
    connect?: AIProfileWhereUniqueInput
    update?: XOR<XOR<AIProfileUpdateToOneWithWhereWithoutVoiceTrainingsInput, AIProfileUpdateWithoutVoiceTrainingsInput>, AIProfileUncheckedUpdateWithoutVoiceTrainingsInput>
  }

  export type FacegateRecordCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FacegateRecordCreateWithoutDeviceInput, FacegateRecordUncheckedCreateWithoutDeviceInput> | FacegateRecordCreateWithoutDeviceInput[] | FacegateRecordUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutDeviceInput | FacegateRecordCreateOrConnectWithoutDeviceInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
  }

  export type FacegateScheduleTargetCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutDeviceInput, FacegateScheduleTargetUncheckedCreateWithoutDeviceInput> | FacegateScheduleTargetCreateWithoutDeviceInput[] | FacegateScheduleTargetUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutDeviceInput | FacegateScheduleTargetCreateOrConnectWithoutDeviceInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
  }

  export type FacegateJobCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FacegateJobCreateWithoutDeviceInput, FacegateJobUncheckedCreateWithoutDeviceInput> | FacegateJobCreateWithoutDeviceInput[] | FacegateJobUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutDeviceInput | FacegateJobCreateOrConnectWithoutDeviceInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
  }

  export type FacegateRecordUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FacegateRecordCreateWithoutDeviceInput, FacegateRecordUncheckedCreateWithoutDeviceInput> | FacegateRecordCreateWithoutDeviceInput[] | FacegateRecordUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutDeviceInput | FacegateRecordCreateOrConnectWithoutDeviceInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
  }

  export type FacegateScheduleTargetUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutDeviceInput, FacegateScheduleTargetUncheckedCreateWithoutDeviceInput> | FacegateScheduleTargetCreateWithoutDeviceInput[] | FacegateScheduleTargetUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutDeviceInput | FacegateScheduleTargetCreateOrConnectWithoutDeviceInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
  }

  export type FacegateJobUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FacegateJobCreateWithoutDeviceInput, FacegateJobUncheckedCreateWithoutDeviceInput> | FacegateJobCreateWithoutDeviceInput[] | FacegateJobUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutDeviceInput | FacegateJobCreateOrConnectWithoutDeviceInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type FacegateRecordUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FacegateRecordCreateWithoutDeviceInput, FacegateRecordUncheckedCreateWithoutDeviceInput> | FacegateRecordCreateWithoutDeviceInput[] | FacegateRecordUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutDeviceInput | FacegateRecordCreateOrConnectWithoutDeviceInput[]
    upsert?: FacegateRecordUpsertWithWhereUniqueWithoutDeviceInput | FacegateRecordUpsertWithWhereUniqueWithoutDeviceInput[]
    set?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    disconnect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    delete?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    update?: FacegateRecordUpdateWithWhereUniqueWithoutDeviceInput | FacegateRecordUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FacegateRecordUpdateManyWithWhereWithoutDeviceInput | FacegateRecordUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FacegateRecordScalarWhereInput | FacegateRecordScalarWhereInput[]
  }

  export type FacegateScheduleTargetUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutDeviceInput, FacegateScheduleTargetUncheckedCreateWithoutDeviceInput> | FacegateScheduleTargetCreateWithoutDeviceInput[] | FacegateScheduleTargetUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutDeviceInput | FacegateScheduleTargetCreateOrConnectWithoutDeviceInput[]
    upsert?: FacegateScheduleTargetUpsertWithWhereUniqueWithoutDeviceInput | FacegateScheduleTargetUpsertWithWhereUniqueWithoutDeviceInput[]
    set?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    disconnect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    delete?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    update?: FacegateScheduleTargetUpdateWithWhereUniqueWithoutDeviceInput | FacegateScheduleTargetUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FacegateScheduleTargetUpdateManyWithWhereWithoutDeviceInput | FacegateScheduleTargetUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FacegateScheduleTargetScalarWhereInput | FacegateScheduleTargetScalarWhereInput[]
  }

  export type FacegateJobUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FacegateJobCreateWithoutDeviceInput, FacegateJobUncheckedCreateWithoutDeviceInput> | FacegateJobCreateWithoutDeviceInput[] | FacegateJobUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutDeviceInput | FacegateJobCreateOrConnectWithoutDeviceInput[]
    upsert?: FacegateJobUpsertWithWhereUniqueWithoutDeviceInput | FacegateJobUpsertWithWhereUniqueWithoutDeviceInput[]
    set?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    disconnect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    delete?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    update?: FacegateJobUpdateWithWhereUniqueWithoutDeviceInput | FacegateJobUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FacegateJobUpdateManyWithWhereWithoutDeviceInput | FacegateJobUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FacegateJobScalarWhereInput | FacegateJobScalarWhereInput[]
  }

  export type FacegateRecordUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FacegateRecordCreateWithoutDeviceInput, FacegateRecordUncheckedCreateWithoutDeviceInput> | FacegateRecordCreateWithoutDeviceInput[] | FacegateRecordUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutDeviceInput | FacegateRecordCreateOrConnectWithoutDeviceInput[]
    upsert?: FacegateRecordUpsertWithWhereUniqueWithoutDeviceInput | FacegateRecordUpsertWithWhereUniqueWithoutDeviceInput[]
    set?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    disconnect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    delete?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    update?: FacegateRecordUpdateWithWhereUniqueWithoutDeviceInput | FacegateRecordUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FacegateRecordUpdateManyWithWhereWithoutDeviceInput | FacegateRecordUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FacegateRecordScalarWhereInput | FacegateRecordScalarWhereInput[]
  }

  export type FacegateScheduleTargetUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutDeviceInput, FacegateScheduleTargetUncheckedCreateWithoutDeviceInput> | FacegateScheduleTargetCreateWithoutDeviceInput[] | FacegateScheduleTargetUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutDeviceInput | FacegateScheduleTargetCreateOrConnectWithoutDeviceInput[]
    upsert?: FacegateScheduleTargetUpsertWithWhereUniqueWithoutDeviceInput | FacegateScheduleTargetUpsertWithWhereUniqueWithoutDeviceInput[]
    set?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    disconnect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    delete?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    update?: FacegateScheduleTargetUpdateWithWhereUniqueWithoutDeviceInput | FacegateScheduleTargetUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FacegateScheduleTargetUpdateManyWithWhereWithoutDeviceInput | FacegateScheduleTargetUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FacegateScheduleTargetScalarWhereInput | FacegateScheduleTargetScalarWhereInput[]
  }

  export type FacegateJobUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FacegateJobCreateWithoutDeviceInput, FacegateJobUncheckedCreateWithoutDeviceInput> | FacegateJobCreateWithoutDeviceInput[] | FacegateJobUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutDeviceInput | FacegateJobCreateOrConnectWithoutDeviceInput[]
    upsert?: FacegateJobUpsertWithWhereUniqueWithoutDeviceInput | FacegateJobUpsertWithWhereUniqueWithoutDeviceInput[]
    set?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    disconnect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    delete?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    update?: FacegateJobUpdateWithWhereUniqueWithoutDeviceInput | FacegateJobUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FacegateJobUpdateManyWithWhereWithoutDeviceInput | FacegateJobUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FacegateJobScalarWhereInput | FacegateJobScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFacegatePersonInput = {
    create?: XOR<UserCreateWithoutFacegatePersonInput, UserUncheckedCreateWithoutFacegatePersonInput>
    connectOrCreate?: UserCreateOrConnectWithoutFacegatePersonInput
    connect?: UserWhereUniqueInput
  }

  export type FacegateRecordCreateNestedManyWithoutPersonInput = {
    create?: XOR<FacegateRecordCreateWithoutPersonInput, FacegateRecordUncheckedCreateWithoutPersonInput> | FacegateRecordCreateWithoutPersonInput[] | FacegateRecordUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutPersonInput | FacegateRecordCreateOrConnectWithoutPersonInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
  }

  export type FacegateRecordUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<FacegateRecordCreateWithoutPersonInput, FacegateRecordUncheckedCreateWithoutPersonInput> | FacegateRecordCreateWithoutPersonInput[] | FacegateRecordUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutPersonInput | FacegateRecordCreateOrConnectWithoutPersonInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutFacegatePersonNestedInput = {
    create?: XOR<UserCreateWithoutFacegatePersonInput, UserUncheckedCreateWithoutFacegatePersonInput>
    connectOrCreate?: UserCreateOrConnectWithoutFacegatePersonInput
    upsert?: UserUpsertWithoutFacegatePersonInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFacegatePersonInput, UserUpdateWithoutFacegatePersonInput>, UserUncheckedUpdateWithoutFacegatePersonInput>
  }

  export type FacegateRecordUpdateManyWithoutPersonNestedInput = {
    create?: XOR<FacegateRecordCreateWithoutPersonInput, FacegateRecordUncheckedCreateWithoutPersonInput> | FacegateRecordCreateWithoutPersonInput[] | FacegateRecordUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutPersonInput | FacegateRecordCreateOrConnectWithoutPersonInput[]
    upsert?: FacegateRecordUpsertWithWhereUniqueWithoutPersonInput | FacegateRecordUpsertWithWhereUniqueWithoutPersonInput[]
    set?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    disconnect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    delete?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    update?: FacegateRecordUpdateWithWhereUniqueWithoutPersonInput | FacegateRecordUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: FacegateRecordUpdateManyWithWhereWithoutPersonInput | FacegateRecordUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: FacegateRecordScalarWhereInput | FacegateRecordScalarWhereInput[]
  }

  export type FacegateRecordUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<FacegateRecordCreateWithoutPersonInput, FacegateRecordUncheckedCreateWithoutPersonInput> | FacegateRecordCreateWithoutPersonInput[] | FacegateRecordUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: FacegateRecordCreateOrConnectWithoutPersonInput | FacegateRecordCreateOrConnectWithoutPersonInput[]
    upsert?: FacegateRecordUpsertWithWhereUniqueWithoutPersonInput | FacegateRecordUpsertWithWhereUniqueWithoutPersonInput[]
    set?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    disconnect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    delete?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    connect?: FacegateRecordWhereUniqueInput | FacegateRecordWhereUniqueInput[]
    update?: FacegateRecordUpdateWithWhereUniqueWithoutPersonInput | FacegateRecordUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: FacegateRecordUpdateManyWithWhereWithoutPersonInput | FacegateRecordUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: FacegateRecordScalarWhereInput | FacegateRecordScalarWhereInput[]
  }

  export type FacegateDeviceCreateNestedOneWithoutRecordsInput = {
    create?: XOR<FacegateDeviceCreateWithoutRecordsInput, FacegateDeviceUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: FacegateDeviceCreateOrConnectWithoutRecordsInput
    connect?: FacegateDeviceWhereUniqueInput
  }

  export type FacegatePersonCreateNestedOneWithoutRecordsInput = {
    create?: XOR<FacegatePersonCreateWithoutRecordsInput, FacegatePersonUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: FacegatePersonCreateOrConnectWithoutRecordsInput
    connect?: FacegatePersonWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type FacegateDeviceUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<FacegateDeviceCreateWithoutRecordsInput, FacegateDeviceUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: FacegateDeviceCreateOrConnectWithoutRecordsInput
    upsert?: FacegateDeviceUpsertWithoutRecordsInput
    connect?: FacegateDeviceWhereUniqueInput
    update?: XOR<XOR<FacegateDeviceUpdateToOneWithWhereWithoutRecordsInput, FacegateDeviceUpdateWithoutRecordsInput>, FacegateDeviceUncheckedUpdateWithoutRecordsInput>
  }

  export type FacegatePersonUpdateOneWithoutRecordsNestedInput = {
    create?: XOR<FacegatePersonCreateWithoutRecordsInput, FacegatePersonUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: FacegatePersonCreateOrConnectWithoutRecordsInput
    upsert?: FacegatePersonUpsertWithoutRecordsInput
    disconnect?: FacegatePersonWhereInput | boolean
    delete?: FacegatePersonWhereInput | boolean
    connect?: FacegatePersonWhereUniqueInput
    update?: XOR<XOR<FacegatePersonUpdateToOneWithWhereWithoutRecordsInput, FacegatePersonUpdateWithoutRecordsInput>, FacegatePersonUncheckedUpdateWithoutRecordsInput>
  }

  export type FacegateImageCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<FacegateImageCreateWithoutSchedulesInput, FacegateImageUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: FacegateImageCreateOrConnectWithoutSchedulesInput
    connect?: FacegateImageWhereUniqueInput
  }

  export type FacegateScheduleTargetCreateNestedManyWithoutScheduleInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutScheduleInput, FacegateScheduleTargetUncheckedCreateWithoutScheduleInput> | FacegateScheduleTargetCreateWithoutScheduleInput[] | FacegateScheduleTargetUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutScheduleInput | FacegateScheduleTargetCreateOrConnectWithoutScheduleInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
  }

  export type FacegateJobCreateNestedManyWithoutScheduleInput = {
    create?: XOR<FacegateJobCreateWithoutScheduleInput, FacegateJobUncheckedCreateWithoutScheduleInput> | FacegateJobCreateWithoutScheduleInput[] | FacegateJobUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutScheduleInput | FacegateJobCreateOrConnectWithoutScheduleInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
  }

  export type FacegateScheduleTargetUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutScheduleInput, FacegateScheduleTargetUncheckedCreateWithoutScheduleInput> | FacegateScheduleTargetCreateWithoutScheduleInput[] | FacegateScheduleTargetUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutScheduleInput | FacegateScheduleTargetCreateOrConnectWithoutScheduleInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
  }

  export type FacegateJobUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<FacegateJobCreateWithoutScheduleInput, FacegateJobUncheckedCreateWithoutScheduleInput> | FacegateJobCreateWithoutScheduleInput[] | FacegateJobUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutScheduleInput | FacegateJobCreateOrConnectWithoutScheduleInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
  }

  export type FacegateImageUpdateOneWithoutSchedulesNestedInput = {
    create?: XOR<FacegateImageCreateWithoutSchedulesInput, FacegateImageUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: FacegateImageCreateOrConnectWithoutSchedulesInput
    upsert?: FacegateImageUpsertWithoutSchedulesInput
    disconnect?: FacegateImageWhereInput | boolean
    delete?: FacegateImageWhereInput | boolean
    connect?: FacegateImageWhereUniqueInput
    update?: XOR<XOR<FacegateImageUpdateToOneWithWhereWithoutSchedulesInput, FacegateImageUpdateWithoutSchedulesInput>, FacegateImageUncheckedUpdateWithoutSchedulesInput>
  }

  export type FacegateScheduleTargetUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutScheduleInput, FacegateScheduleTargetUncheckedCreateWithoutScheduleInput> | FacegateScheduleTargetCreateWithoutScheduleInput[] | FacegateScheduleTargetUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutScheduleInput | FacegateScheduleTargetCreateOrConnectWithoutScheduleInput[]
    upsert?: FacegateScheduleTargetUpsertWithWhereUniqueWithoutScheduleInput | FacegateScheduleTargetUpsertWithWhereUniqueWithoutScheduleInput[]
    set?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    disconnect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    delete?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    update?: FacegateScheduleTargetUpdateWithWhereUniqueWithoutScheduleInput | FacegateScheduleTargetUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: FacegateScheduleTargetUpdateManyWithWhereWithoutScheduleInput | FacegateScheduleTargetUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: FacegateScheduleTargetScalarWhereInput | FacegateScheduleTargetScalarWhereInput[]
  }

  export type FacegateJobUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<FacegateJobCreateWithoutScheduleInput, FacegateJobUncheckedCreateWithoutScheduleInput> | FacegateJobCreateWithoutScheduleInput[] | FacegateJobUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutScheduleInput | FacegateJobCreateOrConnectWithoutScheduleInput[]
    upsert?: FacegateJobUpsertWithWhereUniqueWithoutScheduleInput | FacegateJobUpsertWithWhereUniqueWithoutScheduleInput[]
    set?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    disconnect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    delete?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    update?: FacegateJobUpdateWithWhereUniqueWithoutScheduleInput | FacegateJobUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: FacegateJobUpdateManyWithWhereWithoutScheduleInput | FacegateJobUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: FacegateJobScalarWhereInput | FacegateJobScalarWhereInput[]
  }

  export type FacegateScheduleTargetUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<FacegateScheduleTargetCreateWithoutScheduleInput, FacegateScheduleTargetUncheckedCreateWithoutScheduleInput> | FacegateScheduleTargetCreateWithoutScheduleInput[] | FacegateScheduleTargetUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateScheduleTargetCreateOrConnectWithoutScheduleInput | FacegateScheduleTargetCreateOrConnectWithoutScheduleInput[]
    upsert?: FacegateScheduleTargetUpsertWithWhereUniqueWithoutScheduleInput | FacegateScheduleTargetUpsertWithWhereUniqueWithoutScheduleInput[]
    set?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    disconnect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    delete?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    connect?: FacegateScheduleTargetWhereUniqueInput | FacegateScheduleTargetWhereUniqueInput[]
    update?: FacegateScheduleTargetUpdateWithWhereUniqueWithoutScheduleInput | FacegateScheduleTargetUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: FacegateScheduleTargetUpdateManyWithWhereWithoutScheduleInput | FacegateScheduleTargetUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: FacegateScheduleTargetScalarWhereInput | FacegateScheduleTargetScalarWhereInput[]
  }

  export type FacegateJobUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<FacegateJobCreateWithoutScheduleInput, FacegateJobUncheckedCreateWithoutScheduleInput> | FacegateJobCreateWithoutScheduleInput[] | FacegateJobUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: FacegateJobCreateOrConnectWithoutScheduleInput | FacegateJobCreateOrConnectWithoutScheduleInput[]
    upsert?: FacegateJobUpsertWithWhereUniqueWithoutScheduleInput | FacegateJobUpsertWithWhereUniqueWithoutScheduleInput[]
    set?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    disconnect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    delete?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    connect?: FacegateJobWhereUniqueInput | FacegateJobWhereUniqueInput[]
    update?: FacegateJobUpdateWithWhereUniqueWithoutScheduleInput | FacegateJobUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: FacegateJobUpdateManyWithWhereWithoutScheduleInput | FacegateJobUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: FacegateJobScalarWhereInput | FacegateJobScalarWhereInput[]
  }

  export type FacegateScheduleCreateNestedManyWithoutImageInput = {
    create?: XOR<FacegateScheduleCreateWithoutImageInput, FacegateScheduleUncheckedCreateWithoutImageInput> | FacegateScheduleCreateWithoutImageInput[] | FacegateScheduleUncheckedCreateWithoutImageInput[]
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutImageInput | FacegateScheduleCreateOrConnectWithoutImageInput[]
    connect?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
  }

  export type FacegateScheduleUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<FacegateScheduleCreateWithoutImageInput, FacegateScheduleUncheckedCreateWithoutImageInput> | FacegateScheduleCreateWithoutImageInput[] | FacegateScheduleUncheckedCreateWithoutImageInput[]
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutImageInput | FacegateScheduleCreateOrConnectWithoutImageInput[]
    connect?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
  }

  export type FacegateScheduleUpdateManyWithoutImageNestedInput = {
    create?: XOR<FacegateScheduleCreateWithoutImageInput, FacegateScheduleUncheckedCreateWithoutImageInput> | FacegateScheduleCreateWithoutImageInput[] | FacegateScheduleUncheckedCreateWithoutImageInput[]
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutImageInput | FacegateScheduleCreateOrConnectWithoutImageInput[]
    upsert?: FacegateScheduleUpsertWithWhereUniqueWithoutImageInput | FacegateScheduleUpsertWithWhereUniqueWithoutImageInput[]
    set?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    disconnect?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    delete?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    connect?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    update?: FacegateScheduleUpdateWithWhereUniqueWithoutImageInput | FacegateScheduleUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: FacegateScheduleUpdateManyWithWhereWithoutImageInput | FacegateScheduleUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: FacegateScheduleScalarWhereInput | FacegateScheduleScalarWhereInput[]
  }

  export type FacegateScheduleUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<FacegateScheduleCreateWithoutImageInput, FacegateScheduleUncheckedCreateWithoutImageInput> | FacegateScheduleCreateWithoutImageInput[] | FacegateScheduleUncheckedCreateWithoutImageInput[]
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutImageInput | FacegateScheduleCreateOrConnectWithoutImageInput[]
    upsert?: FacegateScheduleUpsertWithWhereUniqueWithoutImageInput | FacegateScheduleUpsertWithWhereUniqueWithoutImageInput[]
    set?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    disconnect?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    delete?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    connect?: FacegateScheduleWhereUniqueInput | FacegateScheduleWhereUniqueInput[]
    update?: FacegateScheduleUpdateWithWhereUniqueWithoutImageInput | FacegateScheduleUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: FacegateScheduleUpdateManyWithWhereWithoutImageInput | FacegateScheduleUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: FacegateScheduleScalarWhereInput | FacegateScheduleScalarWhereInput[]
  }

  export type FacegateScheduleCreateNestedOneWithoutTargetsInput = {
    create?: XOR<FacegateScheduleCreateWithoutTargetsInput, FacegateScheduleUncheckedCreateWithoutTargetsInput>
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutTargetsInput
    connect?: FacegateScheduleWhereUniqueInput
  }

  export type FacegateDeviceCreateNestedOneWithoutScheduleTargetsInput = {
    create?: XOR<FacegateDeviceCreateWithoutScheduleTargetsInput, FacegateDeviceUncheckedCreateWithoutScheduleTargetsInput>
    connectOrCreate?: FacegateDeviceCreateOrConnectWithoutScheduleTargetsInput
    connect?: FacegateDeviceWhereUniqueInput
  }

  export type FacegateScheduleUpdateOneRequiredWithoutTargetsNestedInput = {
    create?: XOR<FacegateScheduleCreateWithoutTargetsInput, FacegateScheduleUncheckedCreateWithoutTargetsInput>
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutTargetsInput
    upsert?: FacegateScheduleUpsertWithoutTargetsInput
    connect?: FacegateScheduleWhereUniqueInput
    update?: XOR<XOR<FacegateScheduleUpdateToOneWithWhereWithoutTargetsInput, FacegateScheduleUpdateWithoutTargetsInput>, FacegateScheduleUncheckedUpdateWithoutTargetsInput>
  }

  export type FacegateDeviceUpdateOneRequiredWithoutScheduleTargetsNestedInput = {
    create?: XOR<FacegateDeviceCreateWithoutScheduleTargetsInput, FacegateDeviceUncheckedCreateWithoutScheduleTargetsInput>
    connectOrCreate?: FacegateDeviceCreateOrConnectWithoutScheduleTargetsInput
    upsert?: FacegateDeviceUpsertWithoutScheduleTargetsInput
    connect?: FacegateDeviceWhereUniqueInput
    update?: XOR<XOR<FacegateDeviceUpdateToOneWithWhereWithoutScheduleTargetsInput, FacegateDeviceUpdateWithoutScheduleTargetsInput>, FacegateDeviceUncheckedUpdateWithoutScheduleTargetsInput>
  }

  export type FacegateScheduleCreateNestedOneWithoutJobsInput = {
    create?: XOR<FacegateScheduleCreateWithoutJobsInput, FacegateScheduleUncheckedCreateWithoutJobsInput>
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutJobsInput
    connect?: FacegateScheduleWhereUniqueInput
  }

  export type FacegateDeviceCreateNestedOneWithoutJobsInput = {
    create?: XOR<FacegateDeviceCreateWithoutJobsInput, FacegateDeviceUncheckedCreateWithoutJobsInput>
    connectOrCreate?: FacegateDeviceCreateOrConnectWithoutJobsInput
    connect?: FacegateDeviceWhereUniqueInput
  }

  export type FacegateScheduleUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<FacegateScheduleCreateWithoutJobsInput, FacegateScheduleUncheckedCreateWithoutJobsInput>
    connectOrCreate?: FacegateScheduleCreateOrConnectWithoutJobsInput
    upsert?: FacegateScheduleUpsertWithoutJobsInput
    connect?: FacegateScheduleWhereUniqueInput
    update?: XOR<XOR<FacegateScheduleUpdateToOneWithWhereWithoutJobsInput, FacegateScheduleUpdateWithoutJobsInput>, FacegateScheduleUncheckedUpdateWithoutJobsInput>
  }

  export type FacegateDeviceUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<FacegateDeviceCreateWithoutJobsInput, FacegateDeviceUncheckedCreateWithoutJobsInput>
    connectOrCreate?: FacegateDeviceCreateOrConnectWithoutJobsInput
    upsert?: FacegateDeviceUpsertWithoutJobsInput
    connect?: FacegateDeviceWhereUniqueInput
    update?: XOR<XOR<FacegateDeviceUpdateToOneWithWhereWithoutJobsInput, FacegateDeviceUpdateWithoutJobsInput>, FacegateDeviceUncheckedUpdateWithoutJobsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type PostCreateWithoutUserInput = {
    content?: string | null
    createdAt?: Date | string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaCreateNestedManyWithoutPostInput
    postLikes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: number
    content?: string | null
    createdAt?: Date | string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutPostInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type VisualMediaCreateWithoutUserInput = {
    type?: string
    fileName: string
    uploadedAt?: Date | string
    post: PostCreateNestedOneWithoutVisualMediaInput
  }

  export type VisualMediaUncheckedCreateWithoutUserInput = {
    id?: number
    type?: string
    fileName: string
    uploadedAt?: Date | string
    postId: number
  }

  export type VisualMediaCreateOrConnectWithoutUserInput = {
    where: VisualMediaWhereUniqueInput
    create: XOR<VisualMediaCreateWithoutUserInput, VisualMediaUncheckedCreateWithoutUserInput>
  }

  export type PostLikeCreateWithoutUserInput = {
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutPostLikesInput
  }

  export type PostLikeUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    postId: number
  }

  export type PostLikeCreateOrConnectWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    commentLikes?: CommentLikeCreateNestedManyWithoutCommentInput
    post: PostCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    createdAt?: Date | string
    postId: number
    parentId?: number | null
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentLikeCreateWithoutUserInput = {
    createdAt?: Date | string
    comment: CommentCreateNestedOneWithoutCommentLikesInput
  }

  export type CommentLikeUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    commentId: number
  }

  export type CommentLikeCreateOrConnectWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    create: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput>
  }

  export type FollowCreateWithoutFollowingInput = {
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowUncheckedCreateWithoutFollowingInput = {
    id?: number
    followerId: string
  }

  export type FollowCreateOrConnectWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowCreateWithoutFollowerInput = {
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateWithoutFollowerInput = {
    id?: number
    followingId: string
  }

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type ActivityCreateWithoutSourceUserInput = {
    createdAt?: Date | string
    type: string
    sourceId: number
    targetId?: number | null
    isNotificationActive?: boolean
    isNotificationRead?: boolean
    targetUser: UserCreateNestedOneWithoutNotificationsInput
  }

  export type ActivityUncheckedCreateWithoutSourceUserInput = {
    id?: number
    createdAt?: Date | string
    type: string
    sourceId: number
    targetId?: number | null
    targetUserId: string
    isNotificationActive?: boolean
    isNotificationRead?: boolean
  }

  export type ActivityCreateOrConnectWithoutSourceUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutSourceUserInput, ActivityUncheckedCreateWithoutSourceUserInput>
  }

  export type ActivityCreateWithoutTargetUserInput = {
    createdAt?: Date | string
    type: string
    sourceId: number
    targetId?: number | null
    isNotificationActive?: boolean
    isNotificationRead?: boolean
    sourceUser: UserCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutTargetUserInput = {
    id?: number
    createdAt?: Date | string
    type: string
    sourceId: number
    targetId?: number | null
    sourceUserId: string
    isNotificationActive?: boolean
    isNotificationRead?: boolean
  }

  export type ActivityCreateOrConnectWithoutTargetUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutTargetUserInput, ActivityUncheckedCreateWithoutTargetUserInput>
  }

  export type ConversationCreateWithoutParticipant1Input = {
    id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    participant2: UserCreateNestedOneWithoutConversationsAsParticipant2Input
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutParticipant1Input = {
    id: string
    participant2Id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutParticipant1Input = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutParticipant1Input, ConversationUncheckedCreateWithoutParticipant1Input>
  }

  export type ConversationCreateWithoutParticipant2Input = {
    id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    participant1: UserCreateNestedOneWithoutConversationsAsParticipant1Input
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutParticipant2Input = {
    id: string
    participant1Id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutParticipant2Input = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutParticipant2Input, ConversationUncheckedCreateWithoutParticipant2Input>
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    type?: string
    redPacketAmount?: number | null
    redPacketMessage?: string | null
    redPacketStatus?: string | null
    redPacketClaimedAt?: Date | string | null
    taskPostId?: number | null
    taskFinalAmount?: number | null
    taskCompletionStatus?: string | null
    isAIResponse?: boolean
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    content: string
    conversationId: string
    createdAt?: Date | string
    isRead?: boolean
    type?: string
    redPacketAmount?: number | null
    redPacketMessage?: string | null
    redPacketStatus?: string | null
    redPacketClaimedAt?: Date | string | null
    taskPostId?: number | null
    taskFinalAmount?: number | null
    taskCompletionStatus?: string | null
    isAIResponse?: boolean
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type WalletTransactionCreateWithoutFromUserInput = {
    id?: string
    type: string
    amount: number
    status?: string
    description?: string | null
    txHash?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    toUser?: UserCreateNestedOneWithoutReceivedTransactionsInput
  }

  export type WalletTransactionUncheckedCreateWithoutFromUserInput = {
    id?: string
    type: string
    amount: number
    status?: string
    description?: string | null
    toUserId?: string | null
    txHash?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type WalletTransactionCreateOrConnectWithoutFromUserInput = {
    where: WalletTransactionWhereUniqueInput
    create: XOR<WalletTransactionCreateWithoutFromUserInput, WalletTransactionUncheckedCreateWithoutFromUserInput>
  }

  export type WalletTransactionCreateWithoutToUserInput = {
    id?: string
    type: string
    amount: number
    status?: string
    description?: string | null
    txHash?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    fromUser?: UserCreateNestedOneWithoutSentTransactionsInput
  }

  export type WalletTransactionUncheckedCreateWithoutToUserInput = {
    id?: string
    type: string
    amount: number
    status?: string
    description?: string | null
    fromUserId?: string | null
    txHash?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type WalletTransactionCreateOrConnectWithoutToUserInput = {
    where: WalletTransactionWhereUniqueInput
    create: XOR<WalletTransactionCreateWithoutToUserInput, WalletTransactionUncheckedCreateWithoutToUserInput>
  }

  export type AIProfileCreateWithoutUserInput = {
    id?: string
    llmProvider?: string
    llmModel?: string
    temperature?: number
    maxTokens?: number
    topP?: number
    systemPrompt?: string | null
    roleTemplate?: string
    contextPrompts?: string | null
    activeVoiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    voiceTrainings?: VoiceTrainingCreateNestedManyWithoutProfileInput
  }

  export type AIProfileUncheckedCreateWithoutUserInput = {
    id?: string
    llmProvider?: string
    llmModel?: string
    temperature?: number
    maxTokens?: number
    topP?: number
    systemPrompt?: string | null
    roleTemplate?: string
    contextPrompts?: string | null
    activeVoiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    voiceTrainings?: VoiceTrainingUncheckedCreateNestedManyWithoutProfileInput
  }

  export type AIProfileCreateOrConnectWithoutUserInput = {
    where: AIProfileWhereUniqueInput
    create: XOR<AIProfileCreateWithoutUserInput, AIProfileUncheckedCreateWithoutUserInput>
  }

  export type AIMemoryCreateWithoutUserInput = {
    id?: string
    type: string
    category: string
    title: string
    content: string
    tags: string
    score?: number
    metadata?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIMemoryUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    category: string
    title: string
    content: string
    tags: string
    score?: number
    metadata?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIMemoryCreateOrConnectWithoutUserInput = {
    where: AIMemoryWhereUniqueInput
    create: XOR<AIMemoryCreateWithoutUserInput, AIMemoryUncheckedCreateWithoutUserInput>
  }

  export type FacegatePersonCreateWithoutUserInput = {
    id?: string
    phone: string
    personName: string
    localImagePath?: string | null
    imageChecksum?: string | null
    icCardId?: string | null
    idCardNo?: string | null
    memberLevel?: string | null
    memberExpiry?: Date | string | null
    isApeLord?: boolean
    passPlans?: string | null
    syncStatus?: number
    extInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordCreateNestedManyWithoutPersonInput
  }

  export type FacegatePersonUncheckedCreateWithoutUserInput = {
    id?: string
    phone: string
    personName: string
    localImagePath?: string | null
    imageChecksum?: string | null
    icCardId?: string | null
    idCardNo?: string | null
    memberLevel?: string | null
    memberExpiry?: Date | string | null
    isApeLord?: boolean
    passPlans?: string | null
    syncStatus?: number
    extInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordUncheckedCreateNestedManyWithoutPersonInput
  }

  export type FacegatePersonCreateOrConnectWithoutUserInput = {
    where: FacegatePersonWhereUniqueInput
    create: XOR<FacegatePersonCreateWithoutUserInput, FacegatePersonUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutUserInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    content?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    userId?: StringFilter<"Post"> | string
    isTask?: BoolFilter<"Post"> | boolean
    rewardAmount?: FloatFilter<"Post"> | number
    taskStatus?: StringNullableFilter<"Post"> | string | null
    completedBy?: StringNullableFilter<"Post"> | string | null
    completedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    initialPaymentAmount?: FloatNullableFilter<"Post"> | number | null
    initialPaymentAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    finalPaymentAmount?: FloatNullableFilter<"Post"> | number | null
    finalPaymentAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    completionRequestedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    completionConfirmedAt?: DateTimeNullableFilter<"Post"> | Date | string | null
    audioUrl?: StringNullableFilter<"Post"> | string | null
  }

  export type VisualMediaUpsertWithWhereUniqueWithoutUserInput = {
    where: VisualMediaWhereUniqueInput
    update: XOR<VisualMediaUpdateWithoutUserInput, VisualMediaUncheckedUpdateWithoutUserInput>
    create: XOR<VisualMediaCreateWithoutUserInput, VisualMediaUncheckedCreateWithoutUserInput>
  }

  export type VisualMediaUpdateWithWhereUniqueWithoutUserInput = {
    where: VisualMediaWhereUniqueInput
    data: XOR<VisualMediaUpdateWithoutUserInput, VisualMediaUncheckedUpdateWithoutUserInput>
  }

  export type VisualMediaUpdateManyWithWhereWithoutUserInput = {
    where: VisualMediaScalarWhereInput
    data: XOR<VisualMediaUpdateManyMutationInput, VisualMediaUncheckedUpdateManyWithoutUserInput>
  }

  export type VisualMediaScalarWhereInput = {
    AND?: VisualMediaScalarWhereInput | VisualMediaScalarWhereInput[]
    OR?: VisualMediaScalarWhereInput[]
    NOT?: VisualMediaScalarWhereInput | VisualMediaScalarWhereInput[]
    id?: IntFilter<"VisualMedia"> | number
    type?: StringFilter<"VisualMedia"> | string
    fileName?: StringFilter<"VisualMedia"> | string
    uploadedAt?: DateTimeFilter<"VisualMedia"> | Date | string
    userId?: StringFilter<"VisualMedia"> | string
    postId?: IntFilter<"VisualMedia"> | number
  }

  export type PostLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutUserInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type PostLikeScalarWhereInput = {
    AND?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
    OR?: PostLikeScalarWhereInput[]
    NOT?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
    id?: IntFilter<"PostLike"> | number
    createdAt?: DateTimeFilter<"PostLike"> | Date | string
    userId?: StringFilter<"PostLike"> | string
    postId?: IntFilter<"PostLike"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringFilter<"Comment"> | string
    postId?: IntFilter<"Comment"> | number
    parentId?: IntNullableFilter<"Comment"> | number | null
  }

  export type CommentLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    update: XOR<CommentLikeUpdateWithoutUserInput, CommentLikeUncheckedUpdateWithoutUserInput>
    create: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput>
  }

  export type CommentLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    data: XOR<CommentLikeUpdateWithoutUserInput, CommentLikeUncheckedUpdateWithoutUserInput>
  }

  export type CommentLikeUpdateManyWithWhereWithoutUserInput = {
    where: CommentLikeScalarWhereInput
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentLikeScalarWhereInput = {
    AND?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
    OR?: CommentLikeScalarWhereInput[]
    NOT?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
    id?: IntFilter<"CommentLike"> | number
    createdAt?: DateTimeFilter<"CommentLike"> | Date | string
    userId?: StringFilter<"CommentLike"> | string
    commentId?: IntFilter<"CommentLike"> | number
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[]
    OR?: FollowScalarWhereInput[]
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[]
    id?: IntFilter<"Follow"> | number
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowerInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutSourceUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutSourceUserInput, ActivityUncheckedUpdateWithoutSourceUserInput>
    create: XOR<ActivityCreateWithoutSourceUserInput, ActivityUncheckedCreateWithoutSourceUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutSourceUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutSourceUserInput, ActivityUncheckedUpdateWithoutSourceUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutSourceUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutSourceUserInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: IntFilter<"Activity"> | number
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    type?: StringFilter<"Activity"> | string
    sourceId?: IntFilter<"Activity"> | number
    targetId?: IntNullableFilter<"Activity"> | number | null
    sourceUserId?: StringFilter<"Activity"> | string
    targetUserId?: StringFilter<"Activity"> | string
    isNotificationActive?: BoolFilter<"Activity"> | boolean
    isNotificationRead?: BoolFilter<"Activity"> | boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutTargetUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutTargetUserInput, ActivityUncheckedUpdateWithoutTargetUserInput>
    create: XOR<ActivityCreateWithoutTargetUserInput, ActivityUncheckedCreateWithoutTargetUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutTargetUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutTargetUserInput, ActivityUncheckedUpdateWithoutTargetUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutTargetUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutTargetUserInput>
  }

  export type ConversationUpsertWithWhereUniqueWithoutParticipant1Input = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutParticipant1Input, ConversationUncheckedUpdateWithoutParticipant1Input>
    create: XOR<ConversationCreateWithoutParticipant1Input, ConversationUncheckedCreateWithoutParticipant1Input>
  }

  export type ConversationUpdateWithWhereUniqueWithoutParticipant1Input = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutParticipant1Input, ConversationUncheckedUpdateWithoutParticipant1Input>
  }

  export type ConversationUpdateManyWithWhereWithoutParticipant1Input = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutParticipant1Input>
  }

  export type ConversationScalarWhereInput = {
    AND?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    OR?: ConversationScalarWhereInput[]
    NOT?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    id?: StringFilter<"Conversation"> | string
    participant1Id?: StringFilter<"Conversation"> | string
    participant2Id?: StringFilter<"Conversation"> | string
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    lastMessageAt?: DateTimeFilter<"Conversation"> | Date | string
  }

  export type ConversationUpsertWithWhereUniqueWithoutParticipant2Input = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutParticipant2Input, ConversationUncheckedUpdateWithoutParticipant2Input>
    create: XOR<ConversationCreateWithoutParticipant2Input, ConversationUncheckedCreateWithoutParticipant2Input>
  }

  export type ConversationUpdateWithWhereUniqueWithoutParticipant2Input = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutParticipant2Input, ConversationUncheckedUpdateWithoutParticipant2Input>
  }

  export type ConversationUpdateManyWithWhereWithoutParticipant2Input = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutParticipant2Input>
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    isRead?: BoolFilter<"Message"> | boolean
    type?: StringFilter<"Message"> | string
    redPacketAmount?: FloatNullableFilter<"Message"> | number | null
    redPacketMessage?: StringNullableFilter<"Message"> | string | null
    redPacketStatus?: StringNullableFilter<"Message"> | string | null
    redPacketClaimedAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    taskPostId?: IntNullableFilter<"Message"> | number | null
    taskFinalAmount?: FloatNullableFilter<"Message"> | number | null
    taskCompletionStatus?: StringNullableFilter<"Message"> | string | null
    isAIResponse?: BoolFilter<"Message"> | boolean
  }

  export type WalletTransactionUpsertWithWhereUniqueWithoutFromUserInput = {
    where: WalletTransactionWhereUniqueInput
    update: XOR<WalletTransactionUpdateWithoutFromUserInput, WalletTransactionUncheckedUpdateWithoutFromUserInput>
    create: XOR<WalletTransactionCreateWithoutFromUserInput, WalletTransactionUncheckedCreateWithoutFromUserInput>
  }

  export type WalletTransactionUpdateWithWhereUniqueWithoutFromUserInput = {
    where: WalletTransactionWhereUniqueInput
    data: XOR<WalletTransactionUpdateWithoutFromUserInput, WalletTransactionUncheckedUpdateWithoutFromUserInput>
  }

  export type WalletTransactionUpdateManyWithWhereWithoutFromUserInput = {
    where: WalletTransactionScalarWhereInput
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyWithoutFromUserInput>
  }

  export type WalletTransactionScalarWhereInput = {
    AND?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
    OR?: WalletTransactionScalarWhereInput[]
    NOT?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
    id?: StringFilter<"WalletTransaction"> | string
    type?: StringFilter<"WalletTransaction"> | string
    amount?: FloatFilter<"WalletTransaction"> | number
    status?: StringFilter<"WalletTransaction"> | string
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    fromUserId?: StringNullableFilter<"WalletTransaction"> | string | null
    toUserId?: StringNullableFilter<"WalletTransaction"> | string | null
    txHash?: StringNullableFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableFilter<"WalletTransaction"> | Date | string | null
  }

  export type WalletTransactionUpsertWithWhereUniqueWithoutToUserInput = {
    where: WalletTransactionWhereUniqueInput
    update: XOR<WalletTransactionUpdateWithoutToUserInput, WalletTransactionUncheckedUpdateWithoutToUserInput>
    create: XOR<WalletTransactionCreateWithoutToUserInput, WalletTransactionUncheckedCreateWithoutToUserInput>
  }

  export type WalletTransactionUpdateWithWhereUniqueWithoutToUserInput = {
    where: WalletTransactionWhereUniqueInput
    data: XOR<WalletTransactionUpdateWithoutToUserInput, WalletTransactionUncheckedUpdateWithoutToUserInput>
  }

  export type WalletTransactionUpdateManyWithWhereWithoutToUserInput = {
    where: WalletTransactionScalarWhereInput
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyWithoutToUserInput>
  }

  export type AIProfileUpsertWithoutUserInput = {
    update: XOR<AIProfileUpdateWithoutUserInput, AIProfileUncheckedUpdateWithoutUserInput>
    create: XOR<AIProfileCreateWithoutUserInput, AIProfileUncheckedCreateWithoutUserInput>
    where?: AIProfileWhereInput
  }

  export type AIProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: AIProfileWhereInput
    data: XOR<AIProfileUpdateWithoutUserInput, AIProfileUncheckedUpdateWithoutUserInput>
  }

  export type AIProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voiceTrainings?: VoiceTrainingUpdateManyWithoutProfileNestedInput
  }

  export type AIProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    voiceTrainings?: VoiceTrainingUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type AIMemoryUpsertWithWhereUniqueWithoutUserInput = {
    where: AIMemoryWhereUniqueInput
    update: XOR<AIMemoryUpdateWithoutUserInput, AIMemoryUncheckedUpdateWithoutUserInput>
    create: XOR<AIMemoryCreateWithoutUserInput, AIMemoryUncheckedCreateWithoutUserInput>
  }

  export type AIMemoryUpdateWithWhereUniqueWithoutUserInput = {
    where: AIMemoryWhereUniqueInput
    data: XOR<AIMemoryUpdateWithoutUserInput, AIMemoryUncheckedUpdateWithoutUserInput>
  }

  export type AIMemoryUpdateManyWithWhereWithoutUserInput = {
    where: AIMemoryScalarWhereInput
    data: XOR<AIMemoryUpdateManyMutationInput, AIMemoryUncheckedUpdateManyWithoutUserInput>
  }

  export type AIMemoryScalarWhereInput = {
    AND?: AIMemoryScalarWhereInput | AIMemoryScalarWhereInput[]
    OR?: AIMemoryScalarWhereInput[]
    NOT?: AIMemoryScalarWhereInput | AIMemoryScalarWhereInput[]
    id?: StringFilter<"AIMemory"> | string
    userId?: StringFilter<"AIMemory"> | string
    type?: StringFilter<"AIMemory"> | string
    category?: StringFilter<"AIMemory"> | string
    title?: StringFilter<"AIMemory"> | string
    content?: StringFilter<"AIMemory"> | string
    tags?: StringFilter<"AIMemory"> | string
    score?: FloatFilter<"AIMemory"> | number
    metadata?: StringNullableFilter<"AIMemory"> | string | null
    expiresAt?: DateTimeNullableFilter<"AIMemory"> | Date | string | null
    createdAt?: DateTimeFilter<"AIMemory"> | Date | string
    updatedAt?: DateTimeFilter<"AIMemory"> | Date | string
  }

  export type FacegatePersonUpsertWithoutUserInput = {
    update: XOR<FacegatePersonUpdateWithoutUserInput, FacegatePersonUncheckedUpdateWithoutUserInput>
    create: XOR<FacegatePersonCreateWithoutUserInput, FacegatePersonUncheckedCreateWithoutUserInput>
    where?: FacegatePersonWhereInput
  }

  export type FacegatePersonUpdateToOneWithWhereWithoutUserInput = {
    where?: FacegatePersonWhereInput
    data: XOR<FacegatePersonUpdateWithoutUserInput, FacegatePersonUncheckedUpdateWithoutUserInput>
  }

  export type FacegatePersonUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUpdateManyWithoutPersonNestedInput
  }

  export type FacegatePersonUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type VisualMediaCreateWithoutPostInput = {
    type?: string
    fileName: string
    uploadedAt?: Date | string
    user: UserCreateNestedOneWithoutVisualMediaInput
  }

  export type VisualMediaUncheckedCreateWithoutPostInput = {
    id?: number
    type?: string
    fileName: string
    uploadedAt?: Date | string
    userId: string
  }

  export type VisualMediaCreateOrConnectWithoutPostInput = {
    where: VisualMediaWhereUniqueInput
    create: XOR<VisualMediaCreateWithoutPostInput, VisualMediaUncheckedCreateWithoutPostInput>
  }

  export type UserCreateWithoutPostInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type PostLikeCreateWithoutPostInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPostLikesInput
  }

  export type PostLikeUncheckedCreateWithoutPostInput = {
    id?: number
    createdAt?: Date | string
    userId: string
  }

  export type PostLikeCreateOrConnectWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateWithoutPostInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    commentLikes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: number
    content: string
    createdAt?: Date | string
    userId: string
    parentId?: number | null
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type VisualMediaUpsertWithWhereUniqueWithoutPostInput = {
    where: VisualMediaWhereUniqueInput
    update: XOR<VisualMediaUpdateWithoutPostInput, VisualMediaUncheckedUpdateWithoutPostInput>
    create: XOR<VisualMediaCreateWithoutPostInput, VisualMediaUncheckedCreateWithoutPostInput>
  }

  export type VisualMediaUpdateWithWhereUniqueWithoutPostInput = {
    where: VisualMediaWhereUniqueInput
    data: XOR<VisualMediaUpdateWithoutPostInput, VisualMediaUncheckedUpdateWithoutPostInput>
  }

  export type VisualMediaUpdateManyWithWhereWithoutPostInput = {
    where: VisualMediaScalarWhereInput
    data: XOR<VisualMediaUpdateManyMutationInput, VisualMediaUncheckedUpdateManyWithoutPostInput>
  }

  export type UserUpsertWithoutPostInput = {
    update: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
  }

  export type UserUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PostLikeUpsertWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutPostInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutPostInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>
  }

  export type UserCreateWithoutPostLikesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostLikesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
  }

  export type PostCreateWithoutPostLikesInput = {
    content?: string | null
    createdAt?: Date | string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostInput
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPostLikesInput = {
    id?: number
    content?: string | null
    createdAt?: Date | string
    userId: string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutPostInput
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPostLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPostLikesInput, PostUncheckedCreateWithoutPostLikesInput>
  }

  export type UserUpsertWithoutPostLikesInput = {
    update: XOR<UserUpdateWithoutPostLikesInput, UserUncheckedUpdateWithoutPostLikesInput>
    create: XOR<UserCreateWithoutPostLikesInput, UserUncheckedCreateWithoutPostLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostLikesInput, UserUncheckedUpdateWithoutPostLikesInput>
  }

  export type UserUpdateWithoutPostLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PostUpsertWithoutPostLikesInput = {
    update: XOR<PostUpdateWithoutPostLikesInput, PostUncheckedUpdateWithoutPostLikesInput>
    create: XOR<PostCreateWithoutPostLikesInput, PostUncheckedCreateWithoutPostLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutPostLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutPostLikesInput, PostUncheckedUpdateWithoutPostLikesInput>
  }

  export type PostUpdateWithoutPostLikesInput = {
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPostLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutPostNestedInput
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type CommentLikeCreateWithoutCommentInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentLikesInput
  }

  export type CommentLikeUncheckedCreateWithoutCommentInput = {
    id?: number
    createdAt?: Date | string
    userId: string
  }

  export type CommentLikeCreateOrConnectWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    create: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput>
  }

  export type PostCreateWithoutCommentsInput = {
    content?: string | null
    createdAt?: Date | string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostInput
    postLikes?: PostLikeCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: number
    content?: string | null
    createdAt?: Date | string
    userId: string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutPostInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type CommentCreateWithoutRepliesInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    commentLikes?: CommentLikeCreateNestedManyWithoutCommentInput
    post: PostCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
  }

  export type CommentUncheckedCreateWithoutRepliesInput = {
    id?: number
    content: string
    createdAt?: Date | string
    userId: string
    postId: number
    parentId?: number | null
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutRepliesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
  }

  export type CommentCreateWithoutParentInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    commentLikes?: CommentLikeCreateNestedManyWithoutCommentInput
    post: PostCreateNestedOneWithoutCommentsInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutParentInput = {
    id?: number
    content: string
    createdAt?: Date | string
    userId: string
    postId: number
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutParentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CommentLikeUpsertWithWhereUniqueWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    update: XOR<CommentLikeUpdateWithoutCommentInput, CommentLikeUncheckedUpdateWithoutCommentInput>
    create: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput>
  }

  export type CommentLikeUpdateWithWhereUniqueWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    data: XOR<CommentLikeUpdateWithoutCommentInput, CommentLikeUncheckedUpdateWithoutCommentInput>
  }

  export type CommentLikeUpdateManyWithWhereWithoutCommentInput = {
    where: CommentLikeScalarWhereInput
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyWithoutCommentInput>
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    postLikes?: PostLikeUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutPostNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type CommentUpsertWithoutRepliesInput = {
    update: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateWithoutRepliesInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutCommentNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
  }

  export type CommentUncheckedUpdateWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentInput>
  }

  export type UserCreateWithoutCommentLikesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentLikesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
  }

  export type CommentCreateWithoutCommentLikesInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutCommentLikesInput = {
    id?: number
    content: string
    createdAt?: Date | string
    userId: string
    postId: number
    parentId?: number | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutCommentLikesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCommentLikesInput, CommentUncheckedCreateWithoutCommentLikesInput>
  }

  export type UserUpsertWithoutCommentLikesInput = {
    update: XOR<UserUpdateWithoutCommentLikesInput, UserUncheckedUpdateWithoutCommentLikesInput>
    create: XOR<UserCreateWithoutCommentLikesInput, UserUncheckedCreateWithoutCommentLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentLikesInput, UserUncheckedUpdateWithoutCommentLikesInput>
  }

  export type UserUpdateWithoutCommentLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CommentUpsertWithoutCommentLikesInput = {
    update: XOR<CommentUpdateWithoutCommentLikesInput, CommentUncheckedUpdateWithoutCommentLikesInput>
    create: XOR<CommentCreateWithoutCommentLikesInput, CommentUncheckedCreateWithoutCommentLikesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutCommentLikesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutCommentLikesInput, CommentUncheckedUpdateWithoutCommentLikesInput>
  }

  export type CommentUpdateWithoutCommentLikesInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutCommentLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserCreateWithoutVisualMediaInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVisualMediaInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVisualMediaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVisualMediaInput, UserUncheckedCreateWithoutVisualMediaInput>
  }

  export type PostCreateWithoutVisualMediaInput = {
    content?: string | null
    createdAt?: Date | string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    user: UserCreateNestedOneWithoutPostInput
    postLikes?: PostLikeCreateNestedManyWithoutPostInput
    comments?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutVisualMediaInput = {
    id?: number
    content?: string | null
    createdAt?: Date | string
    userId: string
    isTask?: boolean
    rewardAmount?: number
    taskStatus?: string | null
    completedBy?: string | null
    completedAt?: Date | string | null
    initialPaymentAmount?: number | null
    initialPaymentAt?: Date | string | null
    finalPaymentAmount?: number | null
    finalPaymentAt?: Date | string | null
    completionRequestedAt?: Date | string | null
    completionConfirmedAt?: Date | string | null
    audioUrl?: string | null
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutVisualMediaInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutVisualMediaInput, PostUncheckedCreateWithoutVisualMediaInput>
  }

  export type UserUpsertWithoutVisualMediaInput = {
    update: XOR<UserUpdateWithoutVisualMediaInput, UserUncheckedUpdateWithoutVisualMediaInput>
    create: XOR<UserCreateWithoutVisualMediaInput, UserUncheckedCreateWithoutVisualMediaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVisualMediaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVisualMediaInput, UserUncheckedUpdateWithoutVisualMediaInput>
  }

  export type UserUpdateWithoutVisualMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVisualMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PostUpsertWithoutVisualMediaInput = {
    update: XOR<PostUpdateWithoutVisualMediaInput, PostUncheckedUpdateWithoutVisualMediaInput>
    create: XOR<PostCreateWithoutVisualMediaInput, PostUncheckedCreateWithoutVisualMediaInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutVisualMediaInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutVisualMediaInput, PostUncheckedUpdateWithoutVisualMediaInput>
  }

  export type PostUpdateWithoutVisualMediaInput = {
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    postLikes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutVisualMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    postLikes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutConversationsAsParticipant1Input = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConversationsAsParticipant1Input = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConversationsAsParticipant1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationsAsParticipant1Input, UserUncheckedCreateWithoutConversationsAsParticipant1Input>
  }

  export type UserCreateWithoutConversationsAsParticipant2Input = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConversationsAsParticipant2Input = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConversationsAsParticipant2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationsAsParticipant2Input, UserUncheckedCreateWithoutConversationsAsParticipant2Input>
  }

  export type MessageCreateWithoutConversationInput = {
    id?: string
    content: string
    createdAt?: Date | string
    isRead?: boolean
    type?: string
    redPacketAmount?: number | null
    redPacketMessage?: string | null
    redPacketStatus?: string | null
    redPacketClaimedAt?: Date | string | null
    taskPostId?: number | null
    taskFinalAmount?: number | null
    taskCompletionStatus?: string | null
    isAIResponse?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutConversationInput = {
    id?: string
    content: string
    senderId: string
    createdAt?: Date | string
    isRead?: boolean
    type?: string
    redPacketAmount?: number | null
    redPacketMessage?: string | null
    redPacketStatus?: string | null
    redPacketClaimedAt?: Date | string | null
    taskPostId?: number | null
    taskFinalAmount?: number | null
    taskCompletionStatus?: string | null
    isAIResponse?: boolean
  }

  export type MessageCreateOrConnectWithoutConversationInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type UserUpsertWithoutConversationsAsParticipant1Input = {
    update: XOR<UserUpdateWithoutConversationsAsParticipant1Input, UserUncheckedUpdateWithoutConversationsAsParticipant1Input>
    create: XOR<UserCreateWithoutConversationsAsParticipant1Input, UserUncheckedCreateWithoutConversationsAsParticipant1Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationsAsParticipant1Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationsAsParticipant1Input, UserUncheckedUpdateWithoutConversationsAsParticipant1Input>
  }

  export type UserUpdateWithoutConversationsAsParticipant1Input = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationsAsParticipant1Input = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutConversationsAsParticipant2Input = {
    update: XOR<UserUpdateWithoutConversationsAsParticipant2Input, UserUncheckedUpdateWithoutConversationsAsParticipant2Input>
    create: XOR<UserCreateWithoutConversationsAsParticipant2Input, UserUncheckedCreateWithoutConversationsAsParticipant2Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationsAsParticipant2Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationsAsParticipant2Input, UserUncheckedUpdateWithoutConversationsAsParticipant2Input>
  }

  export type UserUpdateWithoutConversationsAsParticipant2Input = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationsAsParticipant2Input = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithWhereWithoutConversationInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type ConversationCreateWithoutMessagesInput = {
    id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
    participant1: UserCreateNestedOneWithoutConversationsAsParticipant1Input
    participant2: UserCreateNestedOneWithoutConversationsAsParticipant2Input
  }

  export type ConversationUncheckedCreateWithoutMessagesInput = {
    id: string
    participant1Id: string
    participant2Id: string
    createdAt?: Date | string
    lastMessageAt?: Date | string
  }

  export type ConversationCreateOrConnectWithoutMessagesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ConversationUpsertWithoutMessagesInput = {
    update: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participant1?: UserUpdateOneRequiredWithoutConversationsAsParticipant1NestedInput
    participant2?: UserUpdateOneRequiredWithoutConversationsAsParticipant2NestedInput
  }

  export type ConversationUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant1Id?: StringFieldUpdateOperationsInput | string
    participant2Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSentTransactionsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentTransactionsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentTransactionsInput, UserUncheckedCreateWithoutSentTransactionsInput>
  }

  export type UserCreateWithoutReceivedTransactionsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedTransactionsInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
  }

  export type UserUpsertWithoutSentTransactionsInput = {
    update: XOR<UserUpdateWithoutSentTransactionsInput, UserUncheckedUpdateWithoutSentTransactionsInput>
    create: XOR<UserCreateWithoutSentTransactionsInput, UserUncheckedCreateWithoutSentTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentTransactionsInput, UserUncheckedUpdateWithoutSentTransactionsInput>
  }

  export type UserUpdateWithoutSentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedTransactionsInput = {
    update: XOR<UserUpdateWithoutReceivedTransactionsInput, UserUncheckedUpdateWithoutReceivedTransactionsInput>
    create: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedTransactionsInput, UserUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type UserUpdateWithoutReceivedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAiProfileInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAiProfileInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAiProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAiProfileInput, UserUncheckedCreateWithoutAiProfileInput>
  }

  export type VoiceTrainingCreateWithoutProfileInput = {
    id?: string
    userId: string
    name: string
    version: string
    status?: string
    progress?: number
    sampleKeys: string
    modelKey?: string | null
    sampleCount?: number
    duration?: number
    accuracy?: number | null
    trainingStartedAt?: Date | string | null
    trainingCompletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoiceTrainingUncheckedCreateWithoutProfileInput = {
    id?: string
    userId: string
    name: string
    version: string
    status?: string
    progress?: number
    sampleKeys: string
    modelKey?: string | null
    sampleCount?: number
    duration?: number
    accuracy?: number | null
    trainingStartedAt?: Date | string | null
    trainingCompletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoiceTrainingCreateOrConnectWithoutProfileInput = {
    where: VoiceTrainingWhereUniqueInput
    create: XOR<VoiceTrainingCreateWithoutProfileInput, VoiceTrainingUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutAiProfileInput = {
    update: XOR<UserUpdateWithoutAiProfileInput, UserUncheckedUpdateWithoutAiProfileInput>
    create: XOR<UserCreateWithoutAiProfileInput, UserUncheckedCreateWithoutAiProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAiProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAiProfileInput, UserUncheckedUpdateWithoutAiProfileInput>
  }

  export type UserUpdateWithoutAiProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAiProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type VoiceTrainingUpsertWithWhereUniqueWithoutProfileInput = {
    where: VoiceTrainingWhereUniqueInput
    update: XOR<VoiceTrainingUpdateWithoutProfileInput, VoiceTrainingUncheckedUpdateWithoutProfileInput>
    create: XOR<VoiceTrainingCreateWithoutProfileInput, VoiceTrainingUncheckedCreateWithoutProfileInput>
  }

  export type VoiceTrainingUpdateWithWhereUniqueWithoutProfileInput = {
    where: VoiceTrainingWhereUniqueInput
    data: XOR<VoiceTrainingUpdateWithoutProfileInput, VoiceTrainingUncheckedUpdateWithoutProfileInput>
  }

  export type VoiceTrainingUpdateManyWithWhereWithoutProfileInput = {
    where: VoiceTrainingScalarWhereInput
    data: XOR<VoiceTrainingUpdateManyMutationInput, VoiceTrainingUncheckedUpdateManyWithoutProfileInput>
  }

  export type VoiceTrainingScalarWhereInput = {
    AND?: VoiceTrainingScalarWhereInput | VoiceTrainingScalarWhereInput[]
    OR?: VoiceTrainingScalarWhereInput[]
    NOT?: VoiceTrainingScalarWhereInput | VoiceTrainingScalarWhereInput[]
    id?: StringFilter<"VoiceTraining"> | string
    userId?: StringFilter<"VoiceTraining"> | string
    profileId?: StringFilter<"VoiceTraining"> | string
    name?: StringFilter<"VoiceTraining"> | string
    version?: StringFilter<"VoiceTraining"> | string
    status?: StringFilter<"VoiceTraining"> | string
    progress?: IntFilter<"VoiceTraining"> | number
    sampleKeys?: StringFilter<"VoiceTraining"> | string
    modelKey?: StringNullableFilter<"VoiceTraining"> | string | null
    sampleCount?: IntFilter<"VoiceTraining"> | number
    duration?: IntFilter<"VoiceTraining"> | number
    accuracy?: FloatNullableFilter<"VoiceTraining"> | number | null
    trainingStartedAt?: DateTimeNullableFilter<"VoiceTraining"> | Date | string | null
    trainingCompletedAt?: DateTimeNullableFilter<"VoiceTraining"> | Date | string | null
    createdAt?: DateTimeFilter<"VoiceTraining"> | Date | string
    updatedAt?: DateTimeFilter<"VoiceTraining"> | Date | string
  }

  export type UserCreateWithoutAiMemoriesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    facegatePerson?: FacegatePersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAiMemoriesInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    facegatePerson?: FacegatePersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAiMemoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAiMemoriesInput, UserUncheckedCreateWithoutAiMemoriesInput>
  }

  export type UserUpsertWithoutAiMemoriesInput = {
    update: XOR<UserUpdateWithoutAiMemoriesInput, UserUncheckedUpdateWithoutAiMemoriesInput>
    create: XOR<UserCreateWithoutAiMemoriesInput, UserUncheckedCreateWithoutAiMemoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAiMemoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAiMemoriesInput, UserUncheckedUpdateWithoutAiMemoriesInput>
  }

  export type UserUpdateWithoutAiMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    facegatePerson?: FacegatePersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAiMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    facegatePerson?: FacegatePersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AIProfileCreateWithoutVoiceTrainingsInput = {
    id?: string
    llmProvider?: string
    llmModel?: string
    temperature?: number
    maxTokens?: number
    topP?: number
    systemPrompt?: string | null
    roleTemplate?: string
    contextPrompts?: string | null
    activeVoiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAiProfileInput
  }

  export type AIProfileUncheckedCreateWithoutVoiceTrainingsInput = {
    id?: string
    userId: string
    llmProvider?: string
    llmModel?: string
    temperature?: number
    maxTokens?: number
    topP?: number
    systemPrompt?: string | null
    roleTemplate?: string
    contextPrompts?: string | null
    activeVoiceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIProfileCreateOrConnectWithoutVoiceTrainingsInput = {
    where: AIProfileWhereUniqueInput
    create: XOR<AIProfileCreateWithoutVoiceTrainingsInput, AIProfileUncheckedCreateWithoutVoiceTrainingsInput>
  }

  export type AIProfileUpsertWithoutVoiceTrainingsInput = {
    update: XOR<AIProfileUpdateWithoutVoiceTrainingsInput, AIProfileUncheckedUpdateWithoutVoiceTrainingsInput>
    create: XOR<AIProfileCreateWithoutVoiceTrainingsInput, AIProfileUncheckedCreateWithoutVoiceTrainingsInput>
    where?: AIProfileWhereInput
  }

  export type AIProfileUpdateToOneWithWhereWithoutVoiceTrainingsInput = {
    where?: AIProfileWhereInput
    data: XOR<AIProfileUpdateWithoutVoiceTrainingsInput, AIProfileUncheckedUpdateWithoutVoiceTrainingsInput>
  }

  export type AIProfileUpdateWithoutVoiceTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAiProfileNestedInput
  }

  export type AIProfileUncheckedUpdateWithoutVoiceTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    llmProvider?: StringFieldUpdateOperationsInput | string
    llmModel?: StringFieldUpdateOperationsInput | string
    temperature?: FloatFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    systemPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    roleTemplate?: StringFieldUpdateOperationsInput | string
    contextPrompts?: NullableStringFieldUpdateOperationsInput | string | null
    activeVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordCreateWithoutDeviceInput = {
    id?: string
    recordId: bigint | number
    recordTime: bigint | number
    recordType: number
    recordPass: number
    similarity?: number | null
    temperature?: number | null
    qrcode?: string | null
    healthCodeColor?: string | null
    recordPicUrl?: string | null
    idCardPicUrl?: string | null
    raw?: string | null
    createdAt?: Date | string
    person?: FacegatePersonCreateNestedOneWithoutRecordsInput
  }

  export type FacegateRecordUncheckedCreateWithoutDeviceInput = {
    id?: string
    recordId: bigint | number
    personPhone?: string | null
    recordTime: bigint | number
    recordType: number
    recordPass: number
    similarity?: number | null
    temperature?: number | null
    qrcode?: string | null
    healthCodeColor?: string | null
    recordPicUrl?: string | null
    idCardPicUrl?: string | null
    raw?: string | null
    createdAt?: Date | string
  }

  export type FacegateRecordCreateOrConnectWithoutDeviceInput = {
    where: FacegateRecordWhereUniqueInput
    create: XOR<FacegateRecordCreateWithoutDeviceInput, FacegateRecordUncheckedCreateWithoutDeviceInput>
  }

  export type FacegateScheduleTargetCreateWithoutDeviceInput = {
    id?: string
    schedule: FacegateScheduleCreateNestedOneWithoutTargetsInput
  }

  export type FacegateScheduleTargetUncheckedCreateWithoutDeviceInput = {
    id?: string
    scheduleId: string
  }

  export type FacegateScheduleTargetCreateOrConnectWithoutDeviceInput = {
    where: FacegateScheduleTargetWhereUniqueInput
    create: XOR<FacegateScheduleTargetCreateWithoutDeviceInput, FacegateScheduleTargetUncheckedCreateWithoutDeviceInput>
  }

  export type FacegateJobCreateWithoutDeviceInput = {
    id?: string
    state?: string
    retryCount?: number
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    schedule: FacegateScheduleCreateNestedOneWithoutJobsInput
  }

  export type FacegateJobUncheckedCreateWithoutDeviceInput = {
    id?: string
    scheduleId: string
    state?: string
    retryCount?: number
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacegateJobCreateOrConnectWithoutDeviceInput = {
    where: FacegateJobWhereUniqueInput
    create: XOR<FacegateJobCreateWithoutDeviceInput, FacegateJobUncheckedCreateWithoutDeviceInput>
  }

  export type FacegateRecordUpsertWithWhereUniqueWithoutDeviceInput = {
    where: FacegateRecordWhereUniqueInput
    update: XOR<FacegateRecordUpdateWithoutDeviceInput, FacegateRecordUncheckedUpdateWithoutDeviceInput>
    create: XOR<FacegateRecordCreateWithoutDeviceInput, FacegateRecordUncheckedCreateWithoutDeviceInput>
  }

  export type FacegateRecordUpdateWithWhereUniqueWithoutDeviceInput = {
    where: FacegateRecordWhereUniqueInput
    data: XOR<FacegateRecordUpdateWithoutDeviceInput, FacegateRecordUncheckedUpdateWithoutDeviceInput>
  }

  export type FacegateRecordUpdateManyWithWhereWithoutDeviceInput = {
    where: FacegateRecordScalarWhereInput
    data: XOR<FacegateRecordUpdateManyMutationInput, FacegateRecordUncheckedUpdateManyWithoutDeviceInput>
  }

  export type FacegateRecordScalarWhereInput = {
    AND?: FacegateRecordScalarWhereInput | FacegateRecordScalarWhereInput[]
    OR?: FacegateRecordScalarWhereInput[]
    NOT?: FacegateRecordScalarWhereInput | FacegateRecordScalarWhereInput[]
    id?: StringFilter<"FacegateRecord"> | string
    deviceId?: StringFilter<"FacegateRecord"> | string
    recordId?: BigIntFilter<"FacegateRecord"> | bigint | number
    personPhone?: StringNullableFilter<"FacegateRecord"> | string | null
    recordTime?: BigIntFilter<"FacegateRecord"> | bigint | number
    recordType?: IntFilter<"FacegateRecord"> | number
    recordPass?: IntFilter<"FacegateRecord"> | number
    similarity?: FloatNullableFilter<"FacegateRecord"> | number | null
    temperature?: FloatNullableFilter<"FacegateRecord"> | number | null
    qrcode?: StringNullableFilter<"FacegateRecord"> | string | null
    healthCodeColor?: StringNullableFilter<"FacegateRecord"> | string | null
    recordPicUrl?: StringNullableFilter<"FacegateRecord"> | string | null
    idCardPicUrl?: StringNullableFilter<"FacegateRecord"> | string | null
    raw?: StringNullableFilter<"FacegateRecord"> | string | null
    createdAt?: DateTimeFilter<"FacegateRecord"> | Date | string
  }

  export type FacegateScheduleTargetUpsertWithWhereUniqueWithoutDeviceInput = {
    where: FacegateScheduleTargetWhereUniqueInput
    update: XOR<FacegateScheduleTargetUpdateWithoutDeviceInput, FacegateScheduleTargetUncheckedUpdateWithoutDeviceInput>
    create: XOR<FacegateScheduleTargetCreateWithoutDeviceInput, FacegateScheduleTargetUncheckedCreateWithoutDeviceInput>
  }

  export type FacegateScheduleTargetUpdateWithWhereUniqueWithoutDeviceInput = {
    where: FacegateScheduleTargetWhereUniqueInput
    data: XOR<FacegateScheduleTargetUpdateWithoutDeviceInput, FacegateScheduleTargetUncheckedUpdateWithoutDeviceInput>
  }

  export type FacegateScheduleTargetUpdateManyWithWhereWithoutDeviceInput = {
    where: FacegateScheduleTargetScalarWhereInput
    data: XOR<FacegateScheduleTargetUpdateManyMutationInput, FacegateScheduleTargetUncheckedUpdateManyWithoutDeviceInput>
  }

  export type FacegateScheduleTargetScalarWhereInput = {
    AND?: FacegateScheduleTargetScalarWhereInput | FacegateScheduleTargetScalarWhereInput[]
    OR?: FacegateScheduleTargetScalarWhereInput[]
    NOT?: FacegateScheduleTargetScalarWhereInput | FacegateScheduleTargetScalarWhereInput[]
    id?: StringFilter<"FacegateScheduleTarget"> | string
    scheduleId?: StringFilter<"FacegateScheduleTarget"> | string
    deviceId?: StringFilter<"FacegateScheduleTarget"> | string
  }

  export type FacegateJobUpsertWithWhereUniqueWithoutDeviceInput = {
    where: FacegateJobWhereUniqueInput
    update: XOR<FacegateJobUpdateWithoutDeviceInput, FacegateJobUncheckedUpdateWithoutDeviceInput>
    create: XOR<FacegateJobCreateWithoutDeviceInput, FacegateJobUncheckedCreateWithoutDeviceInput>
  }

  export type FacegateJobUpdateWithWhereUniqueWithoutDeviceInput = {
    where: FacegateJobWhereUniqueInput
    data: XOR<FacegateJobUpdateWithoutDeviceInput, FacegateJobUncheckedUpdateWithoutDeviceInput>
  }

  export type FacegateJobUpdateManyWithWhereWithoutDeviceInput = {
    where: FacegateJobScalarWhereInput
    data: XOR<FacegateJobUpdateManyMutationInput, FacegateJobUncheckedUpdateManyWithoutDeviceInput>
  }

  export type FacegateJobScalarWhereInput = {
    AND?: FacegateJobScalarWhereInput | FacegateJobScalarWhereInput[]
    OR?: FacegateJobScalarWhereInput[]
    NOT?: FacegateJobScalarWhereInput | FacegateJobScalarWhereInput[]
    id?: StringFilter<"FacegateJob"> | string
    scheduleId?: StringFilter<"FacegateJob"> | string
    deviceId?: StringFilter<"FacegateJob"> | string
    state?: StringFilter<"FacegateJob"> | string
    retryCount?: IntFilter<"FacegateJob"> | number
    lastError?: StringNullableFilter<"FacegateJob"> | string | null
    createdAt?: DateTimeFilter<"FacegateJob"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateJob"> | Date | string
  }

  export type UserCreateWithoutFacegatePersonInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    post?: PostCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaCreateNestedManyWithoutUserInput
    postLikes?: PostLikeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    activities?: ActivityCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationCreateNestedManyWithoutParticipant2Input
    messages?: MessageCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFacegatePersonInput = {
    id?: string
    username?: string | null
    email?: string | null
    name?: string | null
    gender?: string | null
    birthDate?: Date | string | null
    phoneNumber?: string | null
    address?: string | null
    bio?: string | null
    website?: string | null
    relationshipStatus?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    profilePhoto?: string | null
    coverPhoto?: string | null
    passwordHash?: string | null
    walletAddress?: string | null
    apeBalance?: number
    walletCreatedAt?: Date | string | null
    featured?: boolean
    ttsModelId?: string | null
    ttsVoiceId?: string | null
    ttsPlaybackSpeed?: number | null
    punked?: boolean
    appessoBalance?: number | null
    appessoBalanceUpdatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    visualMedia?: VisualMediaUncheckedCreateNestedManyWithoutUserInput
    postLikes?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    commentLikes?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    activities?: ActivityUncheckedCreateNestedManyWithoutSourceUserInput
    notifications?: ActivityUncheckedCreateNestedManyWithoutTargetUserInput
    conversationsAsParticipant1?: ConversationUncheckedCreateNestedManyWithoutParticipant1Input
    conversationsAsParticipant2?: ConversationUncheckedCreateNestedManyWithoutParticipant2Input
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransactions?: WalletTransactionUncheckedCreateNestedManyWithoutToUserInput
    aiProfile?: AIProfileUncheckedCreateNestedOneWithoutUserInput
    aiMemories?: AIMemoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFacegatePersonInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFacegatePersonInput, UserUncheckedCreateWithoutFacegatePersonInput>
  }

  export type FacegateRecordCreateWithoutPersonInput = {
    id?: string
    recordId: bigint | number
    recordTime: bigint | number
    recordType: number
    recordPass: number
    similarity?: number | null
    temperature?: number | null
    qrcode?: string | null
    healthCodeColor?: string | null
    recordPicUrl?: string | null
    idCardPicUrl?: string | null
    raw?: string | null
    createdAt?: Date | string
    device: FacegateDeviceCreateNestedOneWithoutRecordsInput
  }

  export type FacegateRecordUncheckedCreateWithoutPersonInput = {
    id?: string
    deviceId: string
    recordId: bigint | number
    recordTime: bigint | number
    recordType: number
    recordPass: number
    similarity?: number | null
    temperature?: number | null
    qrcode?: string | null
    healthCodeColor?: string | null
    recordPicUrl?: string | null
    idCardPicUrl?: string | null
    raw?: string | null
    createdAt?: Date | string
  }

  export type FacegateRecordCreateOrConnectWithoutPersonInput = {
    where: FacegateRecordWhereUniqueInput
    create: XOR<FacegateRecordCreateWithoutPersonInput, FacegateRecordUncheckedCreateWithoutPersonInput>
  }

  export type UserUpsertWithoutFacegatePersonInput = {
    update: XOR<UserUpdateWithoutFacegatePersonInput, UserUncheckedUpdateWithoutFacegatePersonInput>
    create: XOR<UserCreateWithoutFacegatePersonInput, UserUncheckedCreateWithoutFacegatePersonInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFacegatePersonInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFacegatePersonInput, UserUncheckedUpdateWithoutFacegatePersonInput>
  }

  export type UserUpdateWithoutFacegatePersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFacegatePersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    relationshipStatus?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    coverPhoto?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    apeBalance?: FloatFieldUpdateOperationsInput | number
    walletCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    ttsModelId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsVoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    ttsPlaybackSpeed?: NullableFloatFieldUpdateOperationsInput | number | null
    punked?: BoolFieldUpdateOperationsInput | boolean
    appessoBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    appessoBalanceUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutUserNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutSourceUserNestedInput
    notifications?: ActivityUncheckedUpdateManyWithoutTargetUserNestedInput
    conversationsAsParticipant1?: ConversationUncheckedUpdateManyWithoutParticipant1NestedInput
    conversationsAsParticipant2?: ConversationUncheckedUpdateManyWithoutParticipant2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentTransactions?: WalletTransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransactions?: WalletTransactionUncheckedUpdateManyWithoutToUserNestedInput
    aiProfile?: AIProfileUncheckedUpdateOneWithoutUserNestedInput
    aiMemories?: AIMemoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FacegateRecordUpsertWithWhereUniqueWithoutPersonInput = {
    where: FacegateRecordWhereUniqueInput
    update: XOR<FacegateRecordUpdateWithoutPersonInput, FacegateRecordUncheckedUpdateWithoutPersonInput>
    create: XOR<FacegateRecordCreateWithoutPersonInput, FacegateRecordUncheckedCreateWithoutPersonInput>
  }

  export type FacegateRecordUpdateWithWhereUniqueWithoutPersonInput = {
    where: FacegateRecordWhereUniqueInput
    data: XOR<FacegateRecordUpdateWithoutPersonInput, FacegateRecordUncheckedUpdateWithoutPersonInput>
  }

  export type FacegateRecordUpdateManyWithWhereWithoutPersonInput = {
    where: FacegateRecordScalarWhereInput
    data: XOR<FacegateRecordUpdateManyMutationInput, FacegateRecordUncheckedUpdateManyWithoutPersonInput>
  }

  export type FacegateDeviceCreateWithoutRecordsInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleTargets?: FacegateScheduleTargetCreateNestedManyWithoutDeviceInput
    jobs?: FacegateJobCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceUncheckedCreateWithoutRecordsInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleTargets?: FacegateScheduleTargetUncheckedCreateNestedManyWithoutDeviceInput
    jobs?: FacegateJobUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceCreateOrConnectWithoutRecordsInput = {
    where: FacegateDeviceWhereUniqueInput
    create: XOR<FacegateDeviceCreateWithoutRecordsInput, FacegateDeviceUncheckedCreateWithoutRecordsInput>
  }

  export type FacegatePersonCreateWithoutRecordsInput = {
    id?: string
    phone: string
    personName: string
    localImagePath?: string | null
    imageChecksum?: string | null
    icCardId?: string | null
    idCardNo?: string | null
    memberLevel?: string | null
    memberExpiry?: Date | string | null
    isApeLord?: boolean
    passPlans?: string | null
    syncStatus?: number
    extInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutFacegatePersonInput
  }

  export type FacegatePersonUncheckedCreateWithoutRecordsInput = {
    id?: string
    userId?: string | null
    phone: string
    personName: string
    localImagePath?: string | null
    imageChecksum?: string | null
    icCardId?: string | null
    idCardNo?: string | null
    memberLevel?: string | null
    memberExpiry?: Date | string | null
    isApeLord?: boolean
    passPlans?: string | null
    syncStatus?: number
    extInfo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacegatePersonCreateOrConnectWithoutRecordsInput = {
    where: FacegatePersonWhereUniqueInput
    create: XOR<FacegatePersonCreateWithoutRecordsInput, FacegatePersonUncheckedCreateWithoutRecordsInput>
  }

  export type FacegateDeviceUpsertWithoutRecordsInput = {
    update: XOR<FacegateDeviceUpdateWithoutRecordsInput, FacegateDeviceUncheckedUpdateWithoutRecordsInput>
    create: XOR<FacegateDeviceCreateWithoutRecordsInput, FacegateDeviceUncheckedCreateWithoutRecordsInput>
    where?: FacegateDeviceWhereInput
  }

  export type FacegateDeviceUpdateToOneWithWhereWithoutRecordsInput = {
    where?: FacegateDeviceWhereInput
    data: XOR<FacegateDeviceUpdateWithoutRecordsInput, FacegateDeviceUncheckedUpdateWithoutRecordsInput>
  }

  export type FacegateDeviceUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleTargets?: FacegateScheduleTargetUpdateManyWithoutDeviceNestedInput
    jobs?: FacegateJobUpdateManyWithoutDeviceNestedInput
  }

  export type FacegateDeviceUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleTargets?: FacegateScheduleTargetUncheckedUpdateManyWithoutDeviceNestedInput
    jobs?: FacegateJobUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type FacegatePersonUpsertWithoutRecordsInput = {
    update: XOR<FacegatePersonUpdateWithoutRecordsInput, FacegatePersonUncheckedUpdateWithoutRecordsInput>
    create: XOR<FacegatePersonCreateWithoutRecordsInput, FacegatePersonUncheckedCreateWithoutRecordsInput>
    where?: FacegatePersonWhereInput
  }

  export type FacegatePersonUpdateToOneWithWhereWithoutRecordsInput = {
    where?: FacegatePersonWhereInput
    data: XOR<FacegatePersonUpdateWithoutRecordsInput, FacegatePersonUncheckedUpdateWithoutRecordsInput>
  }

  export type FacegatePersonUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutFacegatePersonNestedInput
  }

  export type FacegatePersonUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    personName?: StringFieldUpdateOperationsInput | string
    localImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    imageChecksum?: NullableStringFieldUpdateOperationsInput | string | null
    icCardId?: NullableStringFieldUpdateOperationsInput | string | null
    idCardNo?: NullableStringFieldUpdateOperationsInput | string | null
    memberLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isApeLord?: BoolFieldUpdateOperationsInput | boolean
    passPlans?: NullableStringFieldUpdateOperationsInput | string | null
    syncStatus?: IntFieldUpdateOperationsInput | number
    extInfo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateImageCreateWithoutSchedulesInput = {
    id?: string
    userPhone: string
    localPath: string
    fileName: string
    url?: string | null
    createdAt?: Date | string
  }

  export type FacegateImageUncheckedCreateWithoutSchedulesInput = {
    id?: string
    userPhone: string
    localPath: string
    fileName: string
    url?: string | null
    createdAt?: Date | string
  }

  export type FacegateImageCreateOrConnectWithoutSchedulesInput = {
    where: FacegateImageWhereUniqueInput
    create: XOR<FacegateImageCreateWithoutSchedulesInput, FacegateImageUncheckedCreateWithoutSchedulesInput>
  }

  export type FacegateScheduleTargetCreateWithoutScheduleInput = {
    id?: string
    device: FacegateDeviceCreateNestedOneWithoutScheduleTargetsInput
  }

  export type FacegateScheduleTargetUncheckedCreateWithoutScheduleInput = {
    id?: string
    deviceId: string
  }

  export type FacegateScheduleTargetCreateOrConnectWithoutScheduleInput = {
    where: FacegateScheduleTargetWhereUniqueInput
    create: XOR<FacegateScheduleTargetCreateWithoutScheduleInput, FacegateScheduleTargetUncheckedCreateWithoutScheduleInput>
  }

  export type FacegateJobCreateWithoutScheduleInput = {
    id?: string
    state?: string
    retryCount?: number
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    device: FacegateDeviceCreateNestedOneWithoutJobsInput
  }

  export type FacegateJobUncheckedCreateWithoutScheduleInput = {
    id?: string
    deviceId: string
    state?: string
    retryCount?: number
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacegateJobCreateOrConnectWithoutScheduleInput = {
    where: FacegateJobWhereUniqueInput
    create: XOR<FacegateJobCreateWithoutScheduleInput, FacegateJobUncheckedCreateWithoutScheduleInput>
  }

  export type FacegateImageUpsertWithoutSchedulesInput = {
    update: XOR<FacegateImageUpdateWithoutSchedulesInput, FacegateImageUncheckedUpdateWithoutSchedulesInput>
    create: XOR<FacegateImageCreateWithoutSchedulesInput, FacegateImageUncheckedCreateWithoutSchedulesInput>
    where?: FacegateImageWhereInput
  }

  export type FacegateImageUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: FacegateImageWhereInput
    data: XOR<FacegateImageUpdateWithoutSchedulesInput, FacegateImageUncheckedUpdateWithoutSchedulesInput>
  }

  export type FacegateImageUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateImageUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleTargetUpsertWithWhereUniqueWithoutScheduleInput = {
    where: FacegateScheduleTargetWhereUniqueInput
    update: XOR<FacegateScheduleTargetUpdateWithoutScheduleInput, FacegateScheduleTargetUncheckedUpdateWithoutScheduleInput>
    create: XOR<FacegateScheduleTargetCreateWithoutScheduleInput, FacegateScheduleTargetUncheckedCreateWithoutScheduleInput>
  }

  export type FacegateScheduleTargetUpdateWithWhereUniqueWithoutScheduleInput = {
    where: FacegateScheduleTargetWhereUniqueInput
    data: XOR<FacegateScheduleTargetUpdateWithoutScheduleInput, FacegateScheduleTargetUncheckedUpdateWithoutScheduleInput>
  }

  export type FacegateScheduleTargetUpdateManyWithWhereWithoutScheduleInput = {
    where: FacegateScheduleTargetScalarWhereInput
    data: XOR<FacegateScheduleTargetUpdateManyMutationInput, FacegateScheduleTargetUncheckedUpdateManyWithoutScheduleInput>
  }

  export type FacegateJobUpsertWithWhereUniqueWithoutScheduleInput = {
    where: FacegateJobWhereUniqueInput
    update: XOR<FacegateJobUpdateWithoutScheduleInput, FacegateJobUncheckedUpdateWithoutScheduleInput>
    create: XOR<FacegateJobCreateWithoutScheduleInput, FacegateJobUncheckedCreateWithoutScheduleInput>
  }

  export type FacegateJobUpdateWithWhereUniqueWithoutScheduleInput = {
    where: FacegateJobWhereUniqueInput
    data: XOR<FacegateJobUpdateWithoutScheduleInput, FacegateJobUncheckedUpdateWithoutScheduleInput>
  }

  export type FacegateJobUpdateManyWithWhereWithoutScheduleInput = {
    where: FacegateJobScalarWhereInput
    data: XOR<FacegateJobUpdateManyMutationInput, FacegateJobUncheckedUpdateManyWithoutScheduleInput>
  }

  export type FacegateScheduleCreateWithoutImageInput = {
    id?: string
    userPhone: string
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targets?: FacegateScheduleTargetCreateNestedManyWithoutScheduleInput
    jobs?: FacegateJobCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleUncheckedCreateWithoutImageInput = {
    id?: string
    userPhone: string
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targets?: FacegateScheduleTargetUncheckedCreateNestedManyWithoutScheduleInput
    jobs?: FacegateJobUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleCreateOrConnectWithoutImageInput = {
    where: FacegateScheduleWhereUniqueInput
    create: XOR<FacegateScheduleCreateWithoutImageInput, FacegateScheduleUncheckedCreateWithoutImageInput>
  }

  export type FacegateScheduleUpsertWithWhereUniqueWithoutImageInput = {
    where: FacegateScheduleWhereUniqueInput
    update: XOR<FacegateScheduleUpdateWithoutImageInput, FacegateScheduleUncheckedUpdateWithoutImageInput>
    create: XOR<FacegateScheduleCreateWithoutImageInput, FacegateScheduleUncheckedCreateWithoutImageInput>
  }

  export type FacegateScheduleUpdateWithWhereUniqueWithoutImageInput = {
    where: FacegateScheduleWhereUniqueInput
    data: XOR<FacegateScheduleUpdateWithoutImageInput, FacegateScheduleUncheckedUpdateWithoutImageInput>
  }

  export type FacegateScheduleUpdateManyWithWhereWithoutImageInput = {
    where: FacegateScheduleScalarWhereInput
    data: XOR<FacegateScheduleUpdateManyMutationInput, FacegateScheduleUncheckedUpdateManyWithoutImageInput>
  }

  export type FacegateScheduleScalarWhereInput = {
    AND?: FacegateScheduleScalarWhereInput | FacegateScheduleScalarWhereInput[]
    OR?: FacegateScheduleScalarWhereInput[]
    NOT?: FacegateScheduleScalarWhereInput | FacegateScheduleScalarWhereInput[]
    id?: StringFilter<"FacegateSchedule"> | string
    userPhone?: StringFilter<"FacegateSchedule"> | string
    imageId?: StringNullableFilter<"FacegateSchedule"> | string | null
    payloadType?: StringFilter<"FacegateSchedule"> | string
    startAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    endAt?: DateTimeNullableFilter<"FacegateSchedule"> | Date | string | null
    cron?: StringNullableFilter<"FacegateSchedule"> | string | null
    status?: IntFilter<"FacegateSchedule"> | number
    createdAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"FacegateSchedule"> | Date | string
  }

  export type FacegateScheduleCreateWithoutTargetsInput = {
    id?: string
    userPhone: string
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: FacegateImageCreateNestedOneWithoutSchedulesInput
    jobs?: FacegateJobCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleUncheckedCreateWithoutTargetsInput = {
    id?: string
    userPhone: string
    imageId?: string | null
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: FacegateJobUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleCreateOrConnectWithoutTargetsInput = {
    where: FacegateScheduleWhereUniqueInput
    create: XOR<FacegateScheduleCreateWithoutTargetsInput, FacegateScheduleUncheckedCreateWithoutTargetsInput>
  }

  export type FacegateDeviceCreateWithoutScheduleTargetsInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordCreateNestedManyWithoutDeviceInput
    jobs?: FacegateJobCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceUncheckedCreateWithoutScheduleTargetsInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordUncheckedCreateNestedManyWithoutDeviceInput
    jobs?: FacegateJobUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceCreateOrConnectWithoutScheduleTargetsInput = {
    where: FacegateDeviceWhereUniqueInput
    create: XOR<FacegateDeviceCreateWithoutScheduleTargetsInput, FacegateDeviceUncheckedCreateWithoutScheduleTargetsInput>
  }

  export type FacegateScheduleUpsertWithoutTargetsInput = {
    update: XOR<FacegateScheduleUpdateWithoutTargetsInput, FacegateScheduleUncheckedUpdateWithoutTargetsInput>
    create: XOR<FacegateScheduleCreateWithoutTargetsInput, FacegateScheduleUncheckedCreateWithoutTargetsInput>
    where?: FacegateScheduleWhereInput
  }

  export type FacegateScheduleUpdateToOneWithWhereWithoutTargetsInput = {
    where?: FacegateScheduleWhereInput
    data: XOR<FacegateScheduleUpdateWithoutTargetsInput, FacegateScheduleUncheckedUpdateWithoutTargetsInput>
  }

  export type FacegateScheduleUpdateWithoutTargetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FacegateImageUpdateOneWithoutSchedulesNestedInput
    jobs?: FacegateJobUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateScheduleUncheckedUpdateWithoutTargetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: FacegateJobUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateDeviceUpsertWithoutScheduleTargetsInput = {
    update: XOR<FacegateDeviceUpdateWithoutScheduleTargetsInput, FacegateDeviceUncheckedUpdateWithoutScheduleTargetsInput>
    create: XOR<FacegateDeviceCreateWithoutScheduleTargetsInput, FacegateDeviceUncheckedCreateWithoutScheduleTargetsInput>
    where?: FacegateDeviceWhereInput
  }

  export type FacegateDeviceUpdateToOneWithWhereWithoutScheduleTargetsInput = {
    where?: FacegateDeviceWhereInput
    data: XOR<FacegateDeviceUpdateWithoutScheduleTargetsInput, FacegateDeviceUncheckedUpdateWithoutScheduleTargetsInput>
  }

  export type FacegateDeviceUpdateWithoutScheduleTargetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUpdateManyWithoutDeviceNestedInput
    jobs?: FacegateJobUpdateManyWithoutDeviceNestedInput
  }

  export type FacegateDeviceUncheckedUpdateWithoutScheduleTargetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUncheckedUpdateManyWithoutDeviceNestedInput
    jobs?: FacegateJobUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type FacegateScheduleCreateWithoutJobsInput = {
    id?: string
    userPhone: string
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: FacegateImageCreateNestedOneWithoutSchedulesInput
    targets?: FacegateScheduleTargetCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleUncheckedCreateWithoutJobsInput = {
    id?: string
    userPhone: string
    imageId?: string | null
    payloadType?: string
    startAt: Date | string
    endAt?: Date | string | null
    cron?: string | null
    status?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    targets?: FacegateScheduleTargetUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type FacegateScheduleCreateOrConnectWithoutJobsInput = {
    where: FacegateScheduleWhereUniqueInput
    create: XOR<FacegateScheduleCreateWithoutJobsInput, FacegateScheduleUncheckedCreateWithoutJobsInput>
  }

  export type FacegateDeviceCreateWithoutJobsInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordCreateNestedManyWithoutDeviceInput
    scheduleTargets?: FacegateScheduleTargetCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceUncheckedCreateWithoutJobsInput = {
    id?: string
    deviceId: string
    prodType?: string | null
    prodName?: string | null
    relaySlots?: number
    lastSeenTs?: bigint | number | null
    fwVersion?: string | null
    status?: number
    online?: boolean
    tz?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    records?: FacegateRecordUncheckedCreateNestedManyWithoutDeviceInput
    scheduleTargets?: FacegateScheduleTargetUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type FacegateDeviceCreateOrConnectWithoutJobsInput = {
    where: FacegateDeviceWhereUniqueInput
    create: XOR<FacegateDeviceCreateWithoutJobsInput, FacegateDeviceUncheckedCreateWithoutJobsInput>
  }

  export type FacegateScheduleUpsertWithoutJobsInput = {
    update: XOR<FacegateScheduleUpdateWithoutJobsInput, FacegateScheduleUncheckedUpdateWithoutJobsInput>
    create: XOR<FacegateScheduleCreateWithoutJobsInput, FacegateScheduleUncheckedCreateWithoutJobsInput>
    where?: FacegateScheduleWhereInput
  }

  export type FacegateScheduleUpdateToOneWithWhereWithoutJobsInput = {
    where?: FacegateScheduleWhereInput
    data: XOR<FacegateScheduleUpdateWithoutJobsInput, FacegateScheduleUncheckedUpdateWithoutJobsInput>
  }

  export type FacegateScheduleUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: FacegateImageUpdateOneWithoutSchedulesNestedInput
    targets?: FacegateScheduleTargetUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateScheduleUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    imageId?: NullableStringFieldUpdateOperationsInput | string | null
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targets?: FacegateScheduleTargetUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateDeviceUpsertWithoutJobsInput = {
    update: XOR<FacegateDeviceUpdateWithoutJobsInput, FacegateDeviceUncheckedUpdateWithoutJobsInput>
    create: XOR<FacegateDeviceCreateWithoutJobsInput, FacegateDeviceUncheckedCreateWithoutJobsInput>
    where?: FacegateDeviceWhereInput
  }

  export type FacegateDeviceUpdateToOneWithWhereWithoutJobsInput = {
    where?: FacegateDeviceWhereInput
    data: XOR<FacegateDeviceUpdateWithoutJobsInput, FacegateDeviceUncheckedUpdateWithoutJobsInput>
  }

  export type FacegateDeviceUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUpdateManyWithoutDeviceNestedInput
    scheduleTargets?: FacegateScheduleTargetUpdateManyWithoutDeviceNestedInput
  }

  export type FacegateDeviceUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    prodType?: NullableStringFieldUpdateOperationsInput | string | null
    prodName?: NullableStringFieldUpdateOperationsInput | string | null
    relaySlots?: IntFieldUpdateOperationsInput | number
    lastSeenTs?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    fwVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    online?: BoolFieldUpdateOperationsInput | boolean
    tz?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: FacegateRecordUncheckedUpdateManyWithoutDeviceNestedInput
    scheduleTargets?: FacegateScheduleTargetUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutUserInput = {
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUpdateManyWithoutPostNestedInput
    postLikes?: PostLikeUpdateManyWithoutPostNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    visualMedia?: VisualMediaUncheckedUpdateManyWithoutPostNestedInput
    postLikes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isTask?: BoolFieldUpdateOperationsInput | boolean
    rewardAmount?: FloatFieldUpdateOperationsInput | number
    taskStatus?: NullableStringFieldUpdateOperationsInput | string | null
    completedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    initialPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    initialPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    finalPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionRequestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VisualMediaUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutVisualMediaNestedInput
  }

  export type VisualMediaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type VisualMediaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutPostLikesNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type PostLikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentLikes?: CommentLikeUpdateManyWithoutCommentNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentLikeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUpdateOneRequiredWithoutCommentLikesNestedInput
  }

  export type CommentLikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentLikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowUpdateWithoutFollowingInput = {
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUpdateWithoutFollowerInput = {
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    id?: IntFieldUpdateOperationsInput | number
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: IntFieldUpdateOperationsInput | number
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityUpdateWithoutSourceUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
    targetUser?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type ActivityUncheckedUpdateWithoutSourceUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    targetUserId?: StringFieldUpdateOperationsInput | string
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUncheckedUpdateManyWithoutSourceUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    targetUserId?: StringFieldUpdateOperationsInput | string
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUpdateWithoutTargetUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
    sourceUser?: UserUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutTargetUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    sourceUserId?: StringFieldUpdateOperationsInput | string
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUncheckedUpdateManyWithoutTargetUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: NullableIntFieldUpdateOperationsInput | number | null
    sourceUserId?: StringFieldUpdateOperationsInput | string
    isNotificationActive?: BoolFieldUpdateOperationsInput | boolean
    isNotificationRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationUpdateWithoutParticipant1Input = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participant2?: UserUpdateOneRequiredWithoutConversationsAsParticipant2NestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutParticipant1Input = {
    id?: StringFieldUpdateOperationsInput | string
    participant2Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutParticipant1Input = {
    id?: StringFieldUpdateOperationsInput | string
    participant2Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUpdateWithoutParticipant2Input = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participant1?: UserUpdateOneRequiredWithoutConversationsAsParticipant1NestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutParticipant2Input = {
    id?: StringFieldUpdateOperationsInput | string
    participant1Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutParticipant2Input = {
    id?: StringFieldUpdateOperationsInput | string
    participant1Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WalletTransactionUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    toUser?: UserUpdateOneWithoutReceivedTransactionsNestedInput
  }

  export type WalletTransactionUncheckedUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUncheckedUpdateManyWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fromUser?: UserUpdateOneWithoutSentTransactionsNestedInput
  }

  export type WalletTransactionUncheckedUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUncheckedUpdateManyWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AIMemoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIMemoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIMemoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisualMediaUpdateWithoutPostInput = {
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVisualMediaNestedInput
  }

  export type VisualMediaUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VisualMediaUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPostLikesNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutPostInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentLikeUpdateWithoutCommentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentLikesNestedInput
  }

  export type CommentLikeUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutParentInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    commentLikes?: CommentLikeUpdateManyWithoutCommentNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    commentLikes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    redPacketAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    redPacketMessage?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketStatus?: NullableStringFieldUpdateOperationsInput | string | null
    redPacketClaimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    taskPostId?: NullableIntFieldUpdateOperationsInput | number | null
    taskFinalAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    taskCompletionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    isAIResponse?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VoiceTrainingUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceTrainingUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoiceTrainingUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    sampleKeys?: StringFieldUpdateOperationsInput | string
    modelKey?: NullableStringFieldUpdateOperationsInput | string | null
    sampleCount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    trainingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trainingCompletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: FacegatePersonUpdateOneWithoutRecordsNestedInput
  }

  export type FacegateRecordUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    personPhone?: NullableStringFieldUpdateOperationsInput | string | null
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    personPhone?: NullableStringFieldUpdateOperationsInput | string | null
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleTargetUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    schedule?: FacegateScheduleUpdateOneRequiredWithoutTargetsNestedInput
  }

  export type FacegateScheduleTargetUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateScheduleTargetUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateJobUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedule?: FacegateScheduleUpdateOneRequiredWithoutJobsNestedInput
  }

  export type FacegateJobUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateJobUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: FacegateDeviceUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type FacegateRecordUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateRecordUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    recordId?: BigIntFieldUpdateOperationsInput | bigint | number
    recordTime?: BigIntFieldUpdateOperationsInput | bigint | number
    recordType?: IntFieldUpdateOperationsInput | number
    recordPass?: IntFieldUpdateOperationsInput | number
    similarity?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    qrcode?: NullableStringFieldUpdateOperationsInput | string | null
    healthCodeColor?: NullableStringFieldUpdateOperationsInput | string | null
    recordPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    idCardPicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    raw?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleTargetUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    device?: FacegateDeviceUpdateOneRequiredWithoutScheduleTargetsNestedInput
  }

  export type FacegateScheduleTargetUncheckedUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateScheduleTargetUncheckedUpdateManyWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type FacegateJobUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: FacegateDeviceUpdateOneRequiredWithoutJobsNestedInput
  }

  export type FacegateJobUncheckedUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateJobUncheckedUpdateManyWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacegateScheduleUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targets?: FacegateScheduleTargetUpdateManyWithoutScheduleNestedInput
    jobs?: FacegateJobUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateScheduleUncheckedUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targets?: FacegateScheduleTargetUncheckedUpdateManyWithoutScheduleNestedInput
    jobs?: FacegateJobUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type FacegateScheduleUncheckedUpdateManyWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userPhone?: StringFieldUpdateOperationsInput | string
    payloadType?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cron?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}