
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  name: 'name',
  gender: 'gender',
  birthDate: 'birthDate',
  phoneNumber: 'phoneNumber',
  address: 'address',
  bio: 'bio',
  website: 'website',
  relationshipStatus: 'relationshipStatus',
  emailVerified: 'emailVerified',
  image: 'image',
  profilePhoto: 'profilePhoto',
  coverPhoto: 'coverPhoto',
  passwordHash: 'passwordHash',
  walletAddress: 'walletAddress',
  apeBalance: 'apeBalance',
  walletCreatedAt: 'walletCreatedAt',
  featured: 'featured',
  ttsModelId: 'ttsModelId',
  ttsVoiceId: 'ttsVoiceId',
  ttsPlaybackSpeed: 'ttsPlaybackSpeed',
  punked: 'punked',
  appessoBalance: 'appessoBalance',
  appessoBalanceUpdatedAt: 'appessoBalanceUpdatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  userId: 'userId',
  isTask: 'isTask',
  rewardAmount: 'rewardAmount',
  taskStatus: 'taskStatus',
  completedBy: 'completedBy',
  completedAt: 'completedAt',
  initialPaymentAmount: 'initialPaymentAmount',
  initialPaymentAt: 'initialPaymentAt',
  finalPaymentAmount: 'finalPaymentAmount',
  finalPaymentAt: 'finalPaymentAt',
  completionRequestedAt: 'completionRequestedAt',
  completionConfirmedAt: 'completionConfirmedAt',
  audioUrl: 'audioUrl'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId',
  parentId: 'parentId'
};

exports.Prisma.CommentLikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  commentId: 'commentId'
};

exports.Prisma.VisualMediaScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileName: 'fileName',
  uploadedAt: 'uploadedAt',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  sourceId: 'sourceId',
  targetId: 'targetId',
  sourceUserId: 'sourceUserId',
  targetUserId: 'targetUserId',
  isNotificationActive: 'isNotificationActive',
  isNotificationRead: 'isNotificationRead'
};

exports.Prisma.ActivityTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.VisualMediaTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.GenderScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RelationshipStatusScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  participant1Id: 'participant1Id',
  participant2Id: 'participant2Id',
  createdAt: 'createdAt',
  lastMessageAt: 'lastMessageAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  conversationId: 'conversationId',
  senderId: 'senderId',
  createdAt: 'createdAt',
  isRead: 'isRead',
  type: 'type',
  redPacketAmount: 'redPacketAmount',
  redPacketMessage: 'redPacketMessage',
  redPacketStatus: 'redPacketStatus',
  redPacketClaimedAt: 'redPacketClaimedAt',
  taskPostId: 'taskPostId',
  taskFinalAmount: 'taskFinalAmount',
  taskCompletionStatus: 'taskCompletionStatus',
  isAIResponse: 'isAIResponse'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  status: 'status',
  description: 'description',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  txHash: 'txHash',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.AIProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  llmProvider: 'llmProvider',
  llmModel: 'llmModel',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  topP: 'topP',
  systemPrompt: 'systemPrompt',
  roleTemplate: 'roleTemplate',
  contextPrompts: 'contextPrompts',
  activeVoiceId: 'activeVoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIMemoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  category: 'category',
  title: 'title',
  content: 'content',
  tags: 'tags',
  score: 'score',
  metadata: 'metadata',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoiceTrainingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileId: 'profileId',
  name: 'name',
  version: 'version',
  status: 'status',
  progress: 'progress',
  sampleKeys: 'sampleKeys',
  modelKey: 'modelKey',
  sampleCount: 'sampleCount',
  duration: 'duration',
  accuracy: 'accuracy',
  trainingStartedAt: 'trainingStartedAt',
  trainingCompletedAt: 'trainingCompletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegateDeviceScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  prodType: 'prodType',
  prodName: 'prodName',
  relaySlots: 'relaySlots',
  lastSeenTs: 'lastSeenTs',
  fwVersion: 'fwVersion',
  status: 'status',
  online: 'online',
  tz: 'tz',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegatePersonScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  personName: 'personName',
  localImagePath: 'localImagePath',
  imageChecksum: 'imageChecksum',
  icCardId: 'icCardId',
  idCardNo: 'idCardNo',
  memberLevel: 'memberLevel',
  memberExpiry: 'memberExpiry',
  isApeLord: 'isApeLord',
  passPlans: 'passPlans',
  syncStatus: 'syncStatus',
  extInfo: 'extInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegateRecordScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  recordId: 'recordId',
  personPhone: 'personPhone',
  recordTime: 'recordTime',
  recordType: 'recordType',
  recordPass: 'recordPass',
  similarity: 'similarity',
  temperature: 'temperature',
  qrcode: 'qrcode',
  healthCodeColor: 'healthCodeColor',
  recordPicUrl: 'recordPicUrl',
  idCardPicUrl: 'idCardPicUrl',
  raw: 'raw',
  createdAt: 'createdAt'
};

exports.Prisma.FacegateScheduleScalarFieldEnum = {
  id: 'id',
  userPhone: 'userPhone',
  imageId: 'imageId',
  payloadType: 'payloadType',
  startAt: 'startAt',
  endAt: 'endAt',
  cron: 'cron',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegateImageScalarFieldEnum = {
  id: 'id',
  userPhone: 'userPhone',
  localPath: 'localPath',
  fileName: 'fileName',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.FacegateScheduleTargetScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  deviceId: 'deviceId'
};

exports.Prisma.FacegateJobScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  deviceId: 'deviceId',
  state: 'state',
  retryCount: 'retryCount',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Follow: 'Follow',
  Post: 'Post',
  PostLike: 'PostLike',
  Comment: 'Comment',
  CommentLike: 'CommentLike',
  VisualMedia: 'VisualMedia',
  Activity: 'Activity',
  ActivityType: 'ActivityType',
  VisualMediaType: 'VisualMediaType',
  Gender: 'Gender',
  RelationshipStatus: 'RelationshipStatus',
  Conversation: 'Conversation',
  Message: 'Message',
  WalletTransaction: 'WalletTransaction',
  AIProfile: 'AIProfile',
  AIMemory: 'AIMemory',
  VoiceTraining: 'VoiceTraining',
  FacegateDevice: 'FacegateDevice',
  FacegatePerson: 'FacegatePerson',
  FacegateRecord: 'FacegateRecord',
  FacegateSchedule: 'FacegateSchedule',
  FacegateImage: 'FacegateImage',
  FacegateScheduleTarget: 'FacegateScheduleTarget',
  FacegateJob: 'FacegateJob'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/ketoz/Documents/munia/ws-server/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "fullTextSearch"
    ],
    "sourceFilePath": "/Users/ketoz/Documents/munia/ws-server/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": null,
        "value": "file:./dev.db"
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"fullTextSearch\"]\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel User {\n  // Do not change the `id` field, it must be permanent and immutable.\n  id                          String         @id @default(cuid())\n  // The `username` can be updated anytime by the user.\n  // It will acquire the `id` as its default value.\n  username                    String?        @unique\n  email                       String?        @unique\n  name                        String?\n  gender                      String?\n  birthDate                   DateTime?\n  phoneNumber                 String?        @unique\n  address                     String?\n  bio                         String?\n  website                     String?\n  relationshipStatus          String?\n  emailVerified               DateTime?\n  image                       String?\n  accounts                    Account[]\n  sessions                    Session[]\n  profilePhoto                String?\n  coverPhoto                  String?\n  post                        Post[]\n  visualMedia                 VisualMedia[]\n  postLikes                   PostLike[]\n  comments                    Comment[]\n  commentLikes                CommentLike[]\n  followers                   Follow[]       @relation(\"following\")\n  following                   Follow[]       @relation(\"follower\")\n  activities                  Activity[]     @relation(\"activity\")\n  notifications               Activity[]     @relation(\"notification\")\n  passwordHash                String? // For phone+password authentication\n  conversationsAsParticipant1 Conversation[] @relation(\"ConversationParticipant1\")\n  conversationsAsParticipant2 Conversation[] @relation(\"ConversationParticipant2\")\n  messages                    Message[]\n\n  // Wallet fields\n  walletAddress        String?             @unique\n  apeBalance           Float               @default(0)\n  walletCreatedAt      DateTime?\n  sentTransactions     WalletTransaction[] @relation(\"sender\")\n  receivedTransactions WalletTransaction[] @relation(\"receiver\")\n\n  // TTS fields for featured users\n  featured         Boolean @default(false)\n  ttsModelId       String?\n  ttsVoiceId       String?\n  ttsPlaybackSpeed Float?  @default(1.0)\n\n  // Punked member status - members with custom voices who can override public voices\n  punked Boolean @default(false)\n\n  // Pospal balance caching fields\n  appessoBalance          Float? // Cached Appesso balance\n  appessoBalanceUpdatedAt DateTime? // When the balance was last fetched from Pospal\n\n  // AI Profile relation\n  aiProfile  AIProfile?\n  aiMemories AIMemory[]\n\n  // Facegate relation\n  facegatePerson FacegatePerson?\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Follow {\n  id          Int    @id @default(autoincrement())\n  follower    User   @relation(\"follower\", fields: [followerId], references: [id], onDelete: Cascade)\n  followerId  String\n  following   User   @relation(\"following\", fields: [followingId], references: [id], onDelete: Cascade)\n  followingId String\n\n  @@unique([followerId, followingId])\n}\n\nmodel Post {\n  id           Int           @id @default(autoincrement())\n  content      String?\n  createdAt    DateTime      @default(now())\n  visualMedia  VisualMedia[]\n  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId       String\n  postLikes    PostLike[]\n  comments     Comment[]\n  isTask       Boolean       @default(false)\n  rewardAmount Float         @default(0)\n  taskStatus   String? // OPEN, IN_PROGRESS, COMPLETION_REQUESTED, COMPLETED, REJECTED\n  completedBy  String? // UserId who accepted the task\n  completedAt  DateTime? // When task was accepted\n\n  // Commission payment tracking\n  initialPaymentAmount  Float? // 50% paid on acceptance\n  initialPaymentAt      DateTime? // When initial payment was made\n  finalPaymentAmount    Float? // Remaining 50%\n  finalPaymentAt        DateTime? // When final payment was made\n  completionRequestedAt DateTime? // When acceptor requested completion\n  completionConfirmedAt DateTime? // When owner confirmed completion\n\n  // TTS audio field\n  audioUrl String?\n}\n\nmodel PostLike {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId    String\n  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)\n  postId    Int\n\n  @@unique([userId, postId])\n}\n\nmodel Comment {\n  id           Int           @id @default(autoincrement())\n  content      String\n  createdAt    DateTime      @default(now())\n  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId       String\n  commentLikes CommentLike[]\n\n  // If there is a `postId`, it is a comment\n  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)\n  postId Int\n\n  // If there is a `parentId`, it is a reply\n  parent   Comment? @relation(\"Replies\", fields: [parentId], references: [id], onDelete: Cascade)\n  parentId Int?\n\n  // Self-referential relation\n  replies Comment[] @relation(\"Replies\")\n}\n\nmodel CommentLike {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId    String\n  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)\n  commentId Int\n\n  @@unique([userId, commentId])\n}\n\nmodel VisualMedia {\n  id         Int      @id @default(autoincrement())\n  type       String   @default(\"PHOTO\")\n  fileName   String\n  uploadedAt DateTime @default(now())\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId     String\n  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)\n  postId     Int\n}\n\n// This Activity model is similar to this approach: https://stackoverflow.com/a/1766371/8434369\n// Example:\n// * If the activity type is 'CREATE_COMMENT', the `sourceId` must be the `id` of the Comment and\n// its `targetId` must be the `id` of the Post that was commented on.\n//\n// * If the activity type is 'POST_LIKE', the `sourceId` must be the `id` of the PostLike and\n// its `targetId` must be the `id` of the liked Post.\n//\n// * If the activity type is 'COMMENT_MENTION', the `sourceId` must be the `id` of the Comment and\n// its `targetId` must be the `id` of the Post that was commented on.\nmodel Activity {\n  id                   Int      @id @default(autoincrement())\n  createdAt            DateTime @default(now())\n  type                 String\n  sourceId             Int\n  targetId             Int?\n  sourceUser           User     @relation(\"activity\", fields: [sourceUserId], references: [id], onDelete: Cascade)\n  sourceUserId         String\n  targetUser           User     @relation(\"notification\", fields: [targetUserId], references: [id], onDelete: Cascade)\n  targetUserId         String\n  isNotificationActive Boolean  @default(true)\n  isNotificationRead   Boolean  @default(false)\n}\n\nmodel ActivityType {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n}\n\nmodel VisualMediaType {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n}\n\nmodel Gender {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n}\n\nmodel RelationshipStatus {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n}\n\nmodel Conversation {\n  id             String    @id // Format: userId1_userId2 (sorted)\n  participant1   User      @relation(\"ConversationParticipant1\", fields: [participant1Id], references: [id], onDelete: Cascade)\n  participant1Id String\n  participant2   User      @relation(\"ConversationParticipant2\", fields: [participant2Id], references: [id], onDelete: Cascade)\n  participant2Id String\n  messages       Message[]\n  createdAt      DateTime  @default(now())\n  lastMessageAt  DateTime  @default(now())\n\n  @@unique([participant1Id, participant2Id])\n  @@index([lastMessageAt])\n}\n\nmodel Message {\n  id             String       @id @default(cuid())\n  content        String\n  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n  conversationId String\n  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)\n  senderId       String\n  createdAt      DateTime     @default(now())\n  isRead         Boolean      @default(false)\n\n  // Red packet fields\n  type               String    @default(\"TEXT\") // TEXT, RED_PACKET, SYSTEM, TASK_COMPLETION_REQUEST\n  redPacketAmount    Float?\n  redPacketMessage   String?\n  redPacketStatus    String? // PENDING, CLAIMED\n  redPacketClaimedAt DateTime?\n\n  // Task completion fields\n  taskPostId           Int?\n  taskFinalAmount      Float?\n  taskCompletionStatus String? // pending, completed, rejected, failed\n\n  // AI response field\n  isAIResponse Boolean @default(false)\n\n  @@index([conversationId, createdAt])\n  @@index([senderId])\n  @@index([type])\n}\n\nmodel WalletTransaction {\n  id          String  @id @default(cuid())\n  type        String // DEPOSIT, WITHDRAW, TRANSFER, REWARD\n  amount      Float\n  status      String  @default(\"PENDING\") // PENDING, COMPLETED, FAILED\n  description String?\n\n  fromUser   User?   @relation(\"sender\", fields: [fromUserId], references: [id], onDelete: SetNull)\n  fromUserId String?\n\n  toUser   User?   @relation(\"receiver\", fields: [toUserId], references: [id], onDelete: SetNull)\n  toUserId String?\n\n  txHash      String?   @unique // Blockchain transaction hash\n  createdAt   DateTime  @default(now())\n  completedAt DateTime?\n\n  @@index([fromUserId])\n  @@index([toUserId])\n  @@index([createdAt])\n}\n\n// AI Profile configuration for each user\nmodel AIProfile {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Model configuration\n  llmProvider String @default(\"deepseek\")\n  llmModel    String @default(\"deepseek-chat\")\n  temperature Float  @default(0.7)\n  maxTokens   Int    @default(2000)\n  topP        Float  @default(0.9)\n\n  // Prompt configuration\n  systemPrompt   String?\n  roleTemplate   String  @default(\"assistant\")\n  contextPrompts String? // JSON string for scene prompts\n\n  // Voice configuration\n  voiceTrainings VoiceTraining[]\n  activeVoiceId  String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\n// AI Memory system for personalization\nmodel AIMemory {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  type     String // long_term, short_term\n  category String // personal, preferences, history\n  title    String\n  content  String\n  tags     String // Comma-separated tags\n  score    Float  @default(1.0) // Weight score for importance\n\n  metadata  String? // JSON string for extra metadata\n  expiresAt DateTime? // Expiration for short-term memories\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId, type, category])\n  @@index([userId, score])\n}\n\n// Voice training records\nmodel VoiceTraining {\n  id        String    @id @default(cuid())\n  userId    String\n  profileId String\n  profile   AIProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  name     String\n  version  String\n  status   String @default(\"pending\") // pending, training, completed, failed\n  progress Int    @default(0)\n\n  // TOS storage references\n  sampleKeys String // JSON array of TOS storage keys\n  modelKey   String? // Trained model key in TOS\n\n  sampleCount Int    @default(0)\n  duration    Int    @default(0) // Total duration in seconds\n  accuracy    Float? // Similarity score\n\n  trainingStartedAt   DateTime?\n  trainingCompletedAt DateTime?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\n// Facegate Models - Face Recognition Access Control System\nmodel FacegateDevice {\n  id         String   @id @default(cuid())\n  deviceId   String   @unique\n  prodType   String?\n  prodName   String?\n  relaySlots Int      @default(0)\n  lastSeenTs BigInt?\n  fwVersion  String?\n  status     Int      @default(1)\n  online     Boolean  @default(false)\n  tz         String?\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  records         FacegateRecord[]\n  scheduleTargets FacegateScheduleTarget[]\n  jobs            FacegateJob[]\n\n  @@index([deviceId])\n  @@index([online])\n}\n\nmodel FacegatePerson {\n  id             String    @id @default(cuid())\n  userId         String?   @unique\n  phone          String    @unique\n  personName     String\n  localImagePath String? // Local storage path for device sync\n  imageChecksum  String? // MD5 hash to detect changes\n  icCardId       String?\n  idCardNo       String?\n  memberLevel    String?\n  memberExpiry   DateTime?\n  isApeLord      Boolean   @default(false)\n  passPlans      String? // JSON array of plan IDs\n  syncStatus     Int       @default(0) // 0-pending, 1-synced, 2-failed\n  extInfo        String? // Additional custom fields as JSON string\n  createdAt      DateTime  @default(now())\n  updatedAt      DateTime  @updatedAt\n\n  user    User?            @relation(fields: [userId], references: [id])\n  records FacegateRecord[]\n\n  @@index([phone])\n  @@index([userId])\n  @@index([syncStatus])\n}\n\nmodel FacegateRecord {\n  id              String   @id @default(cuid())\n  deviceId        String\n  recordId        BigInt\n  personPhone     String?\n  recordTime      BigInt\n  recordType      Int // See record_type_t enum\n  recordPass      Int // See record_pass_t enum\n  similarity      Float?\n  temperature     Float?\n  qrcode          String?\n  healthCodeColor String?\n  recordPicUrl    String?\n  idCardPicUrl    String?\n  raw             String? // Raw record data as JSON string\n  createdAt       DateTime @default(now())\n\n  device FacegateDevice  @relation(fields: [deviceId], references: [deviceId])\n  person FacegatePerson? @relation(fields: [personPhone], references: [phone])\n\n  @@unique([deviceId, recordId])\n  @@index([personPhone])\n  @@index([recordTime])\n  @@index([deviceId])\n}\n\nmodel FacegateSchedule {\n  id          String    @id @default(cuid())\n  userPhone   String\n  imageId     String?\n  payloadType String    @default(\"image\") // image or face\n  startAt     DateTime\n  endAt       DateTime?\n  cron        String? // Cron expression for recurring\n  status      Int       @default(0) // 0-active, 1-paused, 2-completed\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  image   FacegateImage?           @relation(fields: [imageId], references: [id])\n  targets FacegateScheduleTarget[]\n  jobs    FacegateJob[]\n\n  @@index([userPhone])\n  @@index([status])\n  @@index([startAt, endAt])\n}\n\nmodel FacegateImage {\n  id        String   @id @default(cuid())\n  userPhone String\n  localPath String // Local file path\n  fileName  String\n  url       String? // Optional URL for web access\n  createdAt DateTime @default(now())\n\n  schedules FacegateSchedule[]\n\n  @@index([userPhone])\n}\n\nmodel FacegateScheduleTarget {\n  id         String @id @default(cuid())\n  scheduleId String\n  deviceId   String\n\n  schedule FacegateSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)\n  device   FacegateDevice   @relation(fields: [deviceId], references: [deviceId])\n\n  @@unique([scheduleId, deviceId])\n  @@index([scheduleId])\n  @@index([deviceId])\n}\n\nmodel FacegateJob {\n  id         String   @id @default(cuid())\n  scheduleId String\n  deviceId   String\n  state      String   @default(\"pending\") // pending, sent, failed, completed\n  retryCount Int      @default(0)\n  lastError  String?\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  schedule FacegateSchedule @relation(fields: [scheduleId], references: [id])\n  device   FacegateDevice   @relation(fields: [deviceId], references: [deviceId])\n\n  @@index([scheduleId, deviceId])\n  @@index([state])\n  @@index([deviceId])\n}\n",
  "inlineSchemaHash": "2608d8021180838043e90b34ef66e863ede68b869f40302166828e0f42c48468",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"birthDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"relationshipStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"profilePhoto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverPhoto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToUser\"},{\"name\":\"visualMedia\",\"kind\":\"object\",\"type\":\"VisualMedia\",\"relationName\":\"UserToVisualMedia\"},{\"name\":\"postLikes\",\"kind\":\"object\",\"type\":\"PostLike\",\"relationName\":\"PostLikeToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"commentLikes\",\"kind\":\"object\",\"type\":\"CommentLike\",\"relationName\":\"CommentLikeToUser\"},{\"name\":\"followers\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"following\"},{\"name\":\"following\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"follower\"},{\"name\":\"activities\",\"kind\":\"object\",\"type\":\"Activity\",\"relationName\":\"activity\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Activity\",\"relationName\":\"notification\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationsAsParticipant1\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationParticipant1\"},{\"name\":\"conversationsAsParticipant2\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationParticipant2\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToUser\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"apeBalance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"walletCreatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sentTransactions\",\"kind\":\"object\",\"type\":\"WalletTransaction\",\"relationName\":\"sender\"},{\"name\":\"receivedTransactions\",\"kind\":\"object\",\"type\":\"WalletTransaction\",\"relationName\":\"receiver\"},{\"name\":\"featured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"ttsModelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ttsVoiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ttsPlaybackSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"punked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"appessoBalance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"appessoBalanceUpdatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"aiProfile\",\"kind\":\"object\",\"type\":\"AIProfile\",\"relationName\":\"AIProfileToUser\"},{\"name\":\"aiMemories\",\"kind\":\"object\",\"type\":\"AIMemory\",\"relationName\":\"AIMemoryToUser\"},{\"name\":\"facegatePerson\",\"kind\":\"object\",\"type\":\"FacegatePerson\",\"relationName\":\"FacegatePersonToUser\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Follow\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"follower\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"follower\"},{\"name\":\"followerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"following\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"following\"},{\"name\":\"followingId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"visualMedia\",\"kind\":\"object\",\"type\":\"VisualMedia\",\"relationName\":\"PostToVisualMedia\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postLikes\",\"kind\":\"object\",\"type\":\"PostLike\",\"relationName\":\"PostToPostLike\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToPost\"},{\"name\":\"isTask\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rewardAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"taskStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"initialPaymentAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"initialPaymentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"finalPaymentAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"finalPaymentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completionRequestedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completionConfirmedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"audioUrl\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"PostLike\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PostLikeToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToPostLike\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commentLikes\",\"kind\":\"object\",\"type\":\"CommentLike\",\"relationName\":\"CommentToCommentLike\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"CommentToPost\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"Replies\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"replies\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"Replies\"}],\"dbName\":null},\"CommentLike\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentLikeToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comment\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToCommentLike\"},{\"name\":\"commentId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"VisualMedia\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToVisualMedia\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Post\",\"relationName\":\"PostToVisualMedia\"},{\"name\":\"postId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"Activity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sourceId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"targetId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sourceUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"activity\"},{\"name\":\"sourceUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"notification\"},{\"name\":\"targetUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isNotificationActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isNotificationRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"ActivityType\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"VisualMediaType\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Gender\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"RelationshipStatus\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"participant1\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationParticipant1\"},{\"name\":\"participant1Id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"participant2\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationParticipant2\"},{\"name\":\"participant2Id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastMessageAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageToUser\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"redPacketAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"redPacketMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"redPacketStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"redPacketClaimedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"taskPostId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"taskFinalAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"taskCompletionStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAIResponse\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"WalletTransaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fromUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"sender\"},{\"name\":\"fromUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"receiver\"},{\"name\":\"toUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AIProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AIProfileToUser\"},{\"name\":\"llmProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"llmModel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"maxTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"topP\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"systemPrompt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roleTemplate\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contextPrompts\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"voiceTrainings\",\"kind\":\"object\",\"type\":\"VoiceTraining\",\"relationName\":\"AIProfileToVoiceTraining\"},{\"name\":\"activeVoiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AIMemory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AIMemoryToUser\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"VoiceTraining\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"AIProfile\",\"relationName\":\"AIProfileToVoiceTraining\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sampleKeys\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"modelKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sampleCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"accuracy\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"trainingStartedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trainingCompletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FacegateDevice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"prodType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"prodName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"relaySlots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSeenTs\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"fwVersion\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"online\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"tz\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"records\",\"kind\":\"object\",\"type\":\"FacegateRecord\",\"relationName\":\"FacegateDeviceToFacegateRecord\"},{\"name\":\"scheduleTargets\",\"kind\":\"object\",\"type\":\"FacegateScheduleTarget\",\"relationName\":\"FacegateDeviceToFacegateScheduleTarget\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"FacegateJob\",\"relationName\":\"FacegateDeviceToFacegateJob\"}],\"dbName\":null},\"FacegatePerson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"personName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"localImagePath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageChecksum\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icCardId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idCardNo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"memberLevel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"memberExpiry\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isApeLord\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"passPlans\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"syncStatus\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"extInfo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FacegatePersonToUser\"},{\"name\":\"records\",\"kind\":\"object\",\"type\":\"FacegateRecord\",\"relationName\":\"FacegatePersonToFacegateRecord\"}],\"dbName\":null},\"FacegateRecord\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recordId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"personPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recordTime\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"recordType\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"recordPass\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"similarity\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"qrcode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"healthCodeColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recordPicUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idCardPicUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"raw\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"device\",\"kind\":\"object\",\"type\":\"FacegateDevice\",\"relationName\":\"FacegateDeviceToFacegateRecord\"},{\"name\":\"person\",\"kind\":\"object\",\"type\":\"FacegatePerson\",\"relationName\":\"FacegatePersonToFacegateRecord\"}],\"dbName\":null},\"FacegateSchedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payloadType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cron\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"object\",\"type\":\"FacegateImage\",\"relationName\":\"FacegateImageToFacegateSchedule\"},{\"name\":\"targets\",\"kind\":\"object\",\"type\":\"FacegateScheduleTarget\",\"relationName\":\"FacegateScheduleToFacegateScheduleTarget\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"FacegateJob\",\"relationName\":\"FacegateJobToFacegateSchedule\"}],\"dbName\":null},\"FacegateImage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"localPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"schedules\",\"kind\":\"object\",\"type\":\"FacegateSchedule\",\"relationName\":\"FacegateImageToFacegateSchedule\"}],\"dbName\":null},\"FacegateScheduleTarget\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule\",\"kind\":\"object\",\"type\":\"FacegateSchedule\",\"relationName\":\"FacegateScheduleToFacegateScheduleTarget\"},{\"name\":\"device\",\"kind\":\"object\",\"type\":\"FacegateDevice\",\"relationName\":\"FacegateDeviceToFacegateScheduleTarget\"}],\"dbName\":null},\"FacegateJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"retryCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastError\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"schedule\",\"kind\":\"object\",\"type\":\"FacegateSchedule\",\"relationName\":\"FacegateJobToFacegateSchedule\"},{\"name\":\"device\",\"kind\":\"object\",\"type\":\"FacegateDevice\",\"relationName\":\"FacegateDeviceToFacegateJob\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {}
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

