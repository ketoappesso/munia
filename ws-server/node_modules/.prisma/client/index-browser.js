
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 5.0.0
 * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
 */
Prisma.prismaVersion = {
  client: "5.0.0",
  engine: "6b0aef69b7cdfc787f822ecd7cdc76d5f1991584"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  name: 'name',
  gender: 'gender',
  birthDate: 'birthDate',
  phoneNumber: 'phoneNumber',
  address: 'address',
  bio: 'bio',
  website: 'website',
  relationshipStatus: 'relationshipStatus',
  emailVerified: 'emailVerified',
  image: 'image',
  profilePhoto: 'profilePhoto',
  coverPhoto: 'coverPhoto',
  passwordHash: 'passwordHash',
  walletAddress: 'walletAddress',
  apeBalance: 'apeBalance',
  walletCreatedAt: 'walletCreatedAt',
  featured: 'featured',
  ttsModelId: 'ttsModelId',
  ttsVoiceId: 'ttsVoiceId',
  ttsPlaybackSpeed: 'ttsPlaybackSpeed',
  punked: 'punked',
  appessoBalance: 'appessoBalance',
  appessoBalanceUpdatedAt: 'appessoBalanceUpdatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  userId: 'userId',
  isTask: 'isTask',
  rewardAmount: 'rewardAmount',
  taskStatus: 'taskStatus',
  completedBy: 'completedBy',
  completedAt: 'completedAt',
  initialPaymentAmount: 'initialPaymentAmount',
  initialPaymentAt: 'initialPaymentAt',
  finalPaymentAmount: 'finalPaymentAmount',
  finalPaymentAt: 'finalPaymentAt',
  completionRequestedAt: 'completionRequestedAt',
  completionConfirmedAt: 'completionConfirmedAt',
  audioUrl: 'audioUrl'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId',
  parentId: 'parentId'
};

exports.Prisma.CommentLikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  commentId: 'commentId'
};

exports.Prisma.VisualMediaScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileName: 'fileName',
  uploadedAt: 'uploadedAt',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  sourceId: 'sourceId',
  targetId: 'targetId',
  sourceUserId: 'sourceUserId',
  targetUserId: 'targetUserId',
  isNotificationActive: 'isNotificationActive',
  isNotificationRead: 'isNotificationRead'
};

exports.Prisma.ActivityTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.VisualMediaTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.GenderScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RelationshipStatusScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  participant1Id: 'participant1Id',
  participant2Id: 'participant2Id',
  createdAt: 'createdAt',
  lastMessageAt: 'lastMessageAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  conversationId: 'conversationId',
  senderId: 'senderId',
  createdAt: 'createdAt',
  isRead: 'isRead',
  type: 'type',
  redPacketAmount: 'redPacketAmount',
  redPacketMessage: 'redPacketMessage',
  redPacketStatus: 'redPacketStatus',
  redPacketClaimedAt: 'redPacketClaimedAt',
  taskPostId: 'taskPostId',
  taskFinalAmount: 'taskFinalAmount',
  taskCompletionStatus: 'taskCompletionStatus',
  isAIResponse: 'isAIResponse'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  status: 'status',
  description: 'description',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  txHash: 'txHash',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.AIProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  llmProvider: 'llmProvider',
  llmModel: 'llmModel',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  topP: 'topP',
  systemPrompt: 'systemPrompt',
  roleTemplate: 'roleTemplate',
  contextPrompts: 'contextPrompts',
  activeVoiceId: 'activeVoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIMemoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  category: 'category',
  title: 'title',
  content: 'content',
  tags: 'tags',
  score: 'score',
  metadata: 'metadata',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoiceTrainingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileId: 'profileId',
  name: 'name',
  version: 'version',
  status: 'status',
  progress: 'progress',
  sampleKeys: 'sampleKeys',
  modelKey: 'modelKey',
  sampleCount: 'sampleCount',
  duration: 'duration',
  accuracy: 'accuracy',
  trainingStartedAt: 'trainingStartedAt',
  trainingCompletedAt: 'trainingCompletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegateDeviceScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  prodType: 'prodType',
  prodName: 'prodName',
  relaySlots: 'relaySlots',
  lastSeenTs: 'lastSeenTs',
  fwVersion: 'fwVersion',
  status: 'status',
  online: 'online',
  tz: 'tz',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegatePersonScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  personName: 'personName',
  localImagePath: 'localImagePath',
  imageChecksum: 'imageChecksum',
  icCardId: 'icCardId',
  idCardNo: 'idCardNo',
  memberLevel: 'memberLevel',
  memberExpiry: 'memberExpiry',
  isApeLord: 'isApeLord',
  passPlans: 'passPlans',
  syncStatus: 'syncStatus',
  extInfo: 'extInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegateRecordScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  recordId: 'recordId',
  personPhone: 'personPhone',
  recordTime: 'recordTime',
  recordType: 'recordType',
  recordPass: 'recordPass',
  similarity: 'similarity',
  temperature: 'temperature',
  qrcode: 'qrcode',
  healthCodeColor: 'healthCodeColor',
  recordPicUrl: 'recordPicUrl',
  idCardPicUrl: 'idCardPicUrl',
  raw: 'raw',
  createdAt: 'createdAt'
};

exports.Prisma.FacegateScheduleScalarFieldEnum = {
  id: 'id',
  userPhone: 'userPhone',
  imageId: 'imageId',
  payloadType: 'payloadType',
  startAt: 'startAt',
  endAt: 'endAt',
  cron: 'cron',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacegateImageScalarFieldEnum = {
  id: 'id',
  userPhone: 'userPhone',
  localPath: 'localPath',
  fileName: 'fileName',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.FacegateScheduleTargetScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  deviceId: 'deviceId'
};

exports.Prisma.FacegateJobScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  deviceId: 'deviceId',
  state: 'state',
  retryCount: 'retryCount',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Follow: 'Follow',
  Post: 'Post',
  PostLike: 'PostLike',
  Comment: 'Comment',
  CommentLike: 'CommentLike',
  VisualMedia: 'VisualMedia',
  Activity: 'Activity',
  ActivityType: 'ActivityType',
  VisualMediaType: 'VisualMediaType',
  Gender: 'Gender',
  RelationshipStatus: 'RelationshipStatus',
  Conversation: 'Conversation',
  Message: 'Message',
  WalletTransaction: 'WalletTransaction',
  AIProfile: 'AIProfile',
  AIMemory: 'AIMemory',
  VoiceTraining: 'VoiceTraining',
  FacegateDevice: 'FacegateDevice',
  FacegatePerson: 'FacegatePerson',
  FacegateRecord: 'FacegateRecord',
  FacegateSchedule: 'FacegateSchedule',
  FacegateImage: 'FacegateImage',
  FacegateScheduleTarget: 'FacegateScheduleTarget',
  FacegateJob: 'FacegateJob'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
